/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AvailabilityResponse;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateDonationRequest;
import com.konfigthis.client.model.DisbandRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.GroupApplication;
import com.konfigthis.client.model.GroupCreate;
import com.konfigthis.client.model.GroupCreateResponse;
import com.konfigthis.client.model.GroupInvite;
import com.konfigthis.client.model.GroupMembershipRequest;
import com.konfigthis.client.model.GroupMembershipResponse;
import com.konfigthis.client.model.GroupScoreBinding;
import com.konfigthis.client.model.GroupSearchResponse;
import com.konfigthis.client.model.GroupUpdate;
import com.konfigthis.client.model.GroupUser;
import com.konfigthis.client.model.KickRequest;
import com.konfigthis.client.model.MakeDonationRequest;
import com.konfigthis.client.model.RoleChangeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Disabled
public class GroupApiTest {

    private static GroupApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new GroupApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyObjectGroupsTest() throws ApiException {
        String objectId = null;
        Integer subGroup = null;
        CommonResponse response = api.applyObjectGroups(objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignObjectGroupTest() throws ApiException {
        Integer requirement = null;
        Integer maxSize = null;
        String objectId = null;
        String name = null;
        String enrollmentType = null;
        String tag = null;
        String clientData = null;
        List<GroupScoreBinding> scores = null;
        Integer time = null;
        String type = null;
        Integer group = null;
        GroupCreateResponse response = api.assignObjectGroup(requirement, maxSize, objectId)
                .name(name)
                .enrollmentType(enrollmentType)
                .tag(tag)
                .clientData(clientData)
                .scores(scores)
                .time(time)
                .type(type)
                .group(group)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDonationTest() throws ApiException {
        Integer amount = null;
        String objectId = null;
        String currencyId = null;
        String config = null;
        EmptyResponse response = api.createDonation(amount, objectId)
                .currencyId(currencyId)
                .config(config)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPetitionTest() throws ApiException {
        String objectId = null;
        Integer subGroup = null;
        CommonResponse response = api.createPetition(objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObjectGroupTest() throws ApiException {
        String objectId = null;
        Integer subGroup = null;
        CommonResponse response = api.deleteObjectGroup(objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupUsersTest() throws ApiException {
        String objectId = null;
        GroupUser response = api.getGroupUsers(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectGroupsTest() throws ApiException {
        String objectId = null;
        Group response = api.getObjectGroups(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendedUsersTest() throws ApiException {
        String objectId = null;
        GroupSearchResponse response = api.getRecommendedUsers(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAvailabilityTest() throws ApiException {
        String objectId = null;
        String name = null;
        String tag = null;
        String type = null;
        Boolean subGroup = null;
        AvailabilityResponse response = api.getUserAvailability(objectId)
                .name(name)
                .tag(tag)
                .type(type)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteObjectGroupTest() throws ApiException {
        Integer gamerTag = null;
        String objectId = null;
        Integer subGroup = null;
        CommonResponse response = api.inviteObjectGroup(gamerTag, objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinUserDeleteTest() throws ApiException {
        Integer group = null;
        String objectId = null;
        Integer successor = null;
        Integer score = null;
        Integer subGroup = null;
        String type = null;
        GroupMembershipResponse response = api.joinUserDelete(group, objectId)
                .successor(successor)
                .score(score)
                .subGroup(subGroup)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinUserToGroupTest() throws ApiException {
        Integer group = null;
        String objectId = null;
        Integer successor = null;
        Integer score = null;
        Integer subGroup = null;
        String type = null;
        GroupMembershipResponse response = api.joinUserToGroup(group, objectId)
                .successor(successor)
                .score(score)
                .subGroup(subGroup)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kickObjectGroupTest() throws ApiException {
        Integer gamerTag = null;
        String objectId = null;
        Integer subGroup = null;
        GroupMembershipResponse response = api.kickObjectGroup(gamerTag, objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberTest() throws ApiException {
        Integer gamerTag = null;
        String objectId = null;
        Integer subGroup = null;
        GroupMembershipResponse response = api.removeMember(gamerTag, objectId)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchGroupsTest() throws ApiException {
        String name = null;
        Integer scoreMin = null;
        String sortField = null;
        Integer userScore = null;
        Boolean hasSlots = null;
        String enrollmentTypes = null;
        Integer offset = null;
        Integer scoreMax = null;
        Boolean subGroup = null;
        Integer sortValue = null;
        String type = null;
        Integer limit = null;
        GroupSearchResponse response = api.searchGroups()
                .name(name)
                .scoreMin(scoreMin)
                .sortField(sortField)
                .userScore(userScore)
                .hasSlots(hasSlots)
                .enrollmentTypes(enrollmentTypes)
                .offset(offset)
                .scoreMax(scoreMax)
                .subGroup(subGroup)
                .sortValue(sortValue)
                .type(type)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        String objectId = null;
        String name = null;
        Integer scoreMin = null;
        String sortField = null;
        Integer userScore = null;
        Boolean hasSlots = null;
        String enrollmentTypes = null;
        Integer offset = null;
        Integer scoreMax = null;
        Boolean subGroup = null;
        Integer sortValue = null;
        String type = null;
        Integer limit = null;
        GroupSearchResponse response = api.searchUsers(objectId)
                .name(name)
                .scoreMin(scoreMin)
                .sortField(sortField)
                .userScore(userScore)
                .hasSlots(hasSlots)
                .enrollmentTypes(enrollmentTypes)
                .offset(offset)
                .scoreMax(scoreMax)
                .subGroup(subGroup)
                .sortValue(sortValue)
                .type(type)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDonationTest() throws ApiException {
        Integer recipientId = null;
        Integer amount = null;
        String objectId = null;
        EmptyResponse response = api.updateDonation(recipientId, amount, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectGroupTest() throws ApiException {
        String objectId = null;
        String name = null;
        String enrollmentType = null;
        String tag = null;
        String slogan = null;
        Integer requirement = null;
        String motd = null;
        String clientData = null;
        Integer subGroup = null;
        CommonResponse response = api.updateObjectGroup(objectId)
                .name(name)
                .enrollmentType(enrollmentType)
                .tag(tag)
                .slogan(slogan)
                .requirement(requirement)
                .motd(motd)
                .clientData(clientData)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        Integer gamerTag = null;
        String objectId = null;
        String role = null;
        Integer subGroup = null;
        CommonResponse response = api.updateRole(gamerTag, objectId)
                .role(role)
                .subGroup(subGroup)
                .execute();
        // TODO: test validations
    }

}
