/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Announcement;
import com.konfigthis.client.model.AnnouncementAttachment;
import com.konfigthis.client.model.AnnouncementContentResponse;
import com.konfigthis.client.model.AnnouncementQueryResponse;
import com.konfigthis.client.model.AnnouncementRawResponse;
import com.konfigthis.client.model.AnnouncementRequest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.DeleteAnnouncementRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.PlayerReward;
import com.konfigthis.client.model.PlayerStatRequirement;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnouncementApi
 */
@Disabled
public class AnnouncementApiTest {

    private static AnnouncementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AnnouncementApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimObjectAnnouncementTest() throws ApiException {
        String objectId = null;
        String announcement = null;
        List<String> announcements = null;
        CommonResponse response = api.claimObjectAnnouncement(objectId)
                .announcement(announcement)
                .announcements(announcements)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAnnouncementTest() throws ApiException {
        String summary = null;
        String title = null;
        String body = null;
        String channel = null;
        String startDate = null;
        PlayerReward gift = null;
        Integer mongoStartDate = null;
        List<PlayerStatRequirement> statRequirements = null;
        Integer mongoEndDate = null;
        String symbol = null;
        Map<String, Object> clientData = null;
        List<String> validationErrors = null;
        String endDate = null;
        List<AnnouncementAttachment> attachments = null;
        EmptyResponse response = api.createNewAnnouncement()
                .summary(summary)
                .title(title)
                .body(body)
                .channel(channel)
                .startDate(startDate)
                .gift(gift)
                .mongoStartDate(mongoStartDate)
                .statRequirements(statRequirements)
                .mongoEndDate(mongoEndDate)
                .symbol(symbol)
                .clientData(clientData)
                .validationErrors(validationErrors)
                .endDate(endDate)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnnouncementTest() throws ApiException {
        String symbol = null;
        EmptyResponse response = api.deleteAnnouncement()
                .symbol(symbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAnnouncementsTest() throws ApiException {
        AnnouncementContentResponse response = api.getAllAnnouncements()
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectDetailsTest() throws ApiException {
        String objectId = null;
        Boolean includeDeleted = null;
        AnnouncementQueryResponse response = api.getObjectDetails(objectId)
                .includeDeleted(includeDeleted)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectRawTest() throws ApiException {
        String objectId = null;
        AnnouncementRawResponse response = api.getObjectRaw(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsReadTest() throws ApiException {
        String objectId = null;
        String announcement = null;
        List<String> announcements = null;
        CommonResponse response = api.markAsRead(objectId)
                .announcement(announcement)
                .announcements(announcements)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAnnouncementObjectTest() throws ApiException {
        String objectId = null;
        String announcement = null;
        List<String> announcements = null;
        CommonResponse response = api.removeAnnouncementObject(objectId)
                .announcement(announcement)
                .announcements(announcements)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOperationTest() throws ApiException {
        String date = null;
        AnnouncementContentResponse response = api.searchOperation()
                .date(date)
                .execute();
        // TODO: test validations
    }

}
