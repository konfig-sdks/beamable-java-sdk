/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BeginPurchaseRequest;
import com.konfigthis.client.model.BeginPurchaseResponse;
import com.konfigthis.client.model.CancelPurchaseRequest;
import com.konfigthis.client.model.CompletePurchaseRequest;
import com.konfigthis.client.model.CurrencyChange;
import com.konfigthis.client.model.FailPurchaseRequest;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.PaymentResultResponse;
import com.konfigthis.client.model.TrackPurchaseRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {

    private static PaymentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPurchaseTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.cancelPurchase(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPurchaseProcessTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.cancelPurchaseProcess(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeItunesPurchaseTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.completeItunesPurchase(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePurchaseTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.completePurchase(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePurchaseProcessTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.completePurchaseProcess(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePurchase_0Test() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.completePurchase_0(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void couponPurchaseBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.couponPurchaseBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void couponPurchaseCancelTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.couponPurchaseCancel(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void facebookPurchaseBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.facebookPurchaseBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void facebookPurchaseCancelTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.facebookPurchaseCancel(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void facebookPurchaseCompleteTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.facebookPurchaseComplete(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void facebookPurchaseFailureTest() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.facebookPurchaseFailure(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failPurchaseTest() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.failPurchase(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void googlePlayPurchaseBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.googlePlayPurchaseBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void googlePlayPurchaseCancelTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.googlePlayPurchaseCancel(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initializePurchaseProcessTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.initializePurchaseProcess()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itunesPurchaseBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.itunesPurchaseBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itunesPurchaseTrackTest() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.itunesPurchaseTrack(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.processBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processCompleteTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.processComplete(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processFailureTest() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.processFailure(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processFailure_0Test() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.processFailure_0(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processFailure_1Test() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.processFailure_1(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processFailure_2Test() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.processFailure_2(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void steamPurchaseBeginTest() throws ApiException {
        String purchaseId = null;
        String language = null;
        String time = null;
        BeginPurchaseResponse response = api.steamPurchaseBegin()
                .purchaseId(purchaseId)
                .language(language)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void steamPurchaseCancelTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.steamPurchaseCancel(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void steamPurchaseCompleteTest() throws ApiException {
        Integer txid = null;
        String receipt = null;
        String priceInLocalCurrency = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.steamPurchaseComplete(txid)
                .receipt(receipt)
                .priceInLocalCurrency(priceInLocalCurrency)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void steamPurchaseFailTest() throws ApiException {
        Integer txid = null;
        String reason = null;
        PaymentResultResponse response = api.steamPurchaseFail(txid)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackPurchasePostTest() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.trackPurchasePost(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackPurchasePost_0Test() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.trackPurchasePost_0(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackPurchasePost_1Test() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.trackPurchasePost_1(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackPurchasePost_2Test() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.trackPurchasePost_2(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackPurchasePost_3Test() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.trackPurchasePost_3(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void windowsPurchaseCancelTest() throws ApiException {
        Integer txid = null;
        PaymentResultResponse response = api.windowsPurchaseCancel(txid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void windowsPurchaseTrackTest() throws ApiException {
        Double priceInLocalCurrency = null;
        String skuName = null;
        String skuProductId = null;
        String store = null;
        List<ItemCreateRequest> obtainItems = null;
        List<CurrencyChange> obtainCurrency = null;
        String purchaseId = null;
        String isoCurrencySymbol = null;
        PaymentResultResponse response = api.windowsPurchaseTrack(priceInLocalCurrency)
                .skuName(skuName)
                .skuProductId(skuProductId)
                .store(store)
                .obtainItems(obtainItems)
                .obtainCurrency(obtainCurrency)
                .purchaseId(purchaseId)
                .isoCurrencySymbol(isoCurrencySymbol)
                .execute();
        // TODO: test validations
    }

}
