/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientPermission;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.LeaderBoardViewResponse;
import com.konfigthis.client.model.LeaderboardAddRequest;
import com.konfigthis.client.model.LeaderboardAssignmentInfo;
import com.konfigthis.client.model.LeaderboardCreateRequest;
import com.konfigthis.client.model.LeaderboardDetails;
import com.konfigthis.client.model.LeaderboardListResponse;
import com.konfigthis.client.model.LeaderboardMembershipResponse;
import com.konfigthis.client.model.LeaderboardPartitionInfo;
import com.konfigthis.client.model.LeaderboardRemoveCacheEntryRequest;
import com.konfigthis.client.model.LeaderboardRemoveEntryRequest;
import com.konfigthis.client.model.LeaderboardSwapRequest;
import com.konfigthis.client.model.LeaderboardUidResponse;
import com.konfigthis.client.model.ListLeaderBoardViewResponse;
import com.konfigthis.client.model.MatchMakingMatchesPvpResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LeaderboardApi
 */
@Disabled
public class LeaderboardApiTest {

    private static LeaderboardApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LeaderboardApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFreezeRequestTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.createFreezeRequest(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntriesTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.deleteEntries(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObjectByIdTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.deleteObjectById(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignmentLeaderboardTest() throws ApiException {
        String boardId = null;
        Boolean joinBoard = null;
        LeaderboardAssignmentInfo response = api.getAssignmentLeaderboard(boardId)
                .joinBoard(joinBoard)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectDetailsTest() throws ApiException {
        String objectId = null;
        Integer from = null;
        Integer max = null;
        LeaderboardDetails response = api.getObjectDetails(objectId)
                .from(from)
                .max(max)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectMatchesTest() throws ApiException {
        Integer poolSize = null;
        Integer windows = null;
        Integer windowSize = null;
        String objectId = null;
        MatchMakingMatchesPvpResponse response = api.getObjectMatches(poolSize, windows, windowSize, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectMembershipTest() throws ApiException {
        Integer playerId = null;
        String objectId = null;
        LeaderboardMembershipResponse response = api.getObjectMembership(playerId, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectPartitionTest() throws ApiException {
        Integer playerId = null;
        String objectId = null;
        LeaderboardPartitionInfo response = api.getObjectPartition(playerId, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectViewTest() throws ApiException {
        String objectId = null;
        Integer max = null;
        Integer focus = null;
        Boolean friends = null;
        Integer from = null;
        Integer outlier = null;
        Boolean guild = null;
        LeaderBoardViewResponse response = api.getObjectView(objectId)
                .max(max)
                .focus(focus)
                .friends(friends)
                .from(from)
                .outlier(outlier)
                .guild(guild)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerScoresTest() throws ApiException {
        Long dbid = null;
        ListLeaderBoardViewResponse response = api.getPlayerScores(dbid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserScoresTest() throws ApiException {
        LeaderboardUidResponse response = api.getUserScores()
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectRanksTest() throws ApiException {
        String objectId = null;
        String ids = null;
        LeaderBoardViewResponse response = api.listObjectRanks(objectId)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserScoresTest() throws ApiException {
        Integer skip = null;
        Integer limit = null;
        LeaderboardListResponse response = api.listUserScores()
                .skip(skip)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAssignmentTest() throws ApiException {
        Integer playerId = null;
        String objectId = null;
        CommonResponse response = api.removeAssignment(playerId, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEntryTest() throws ApiException {
        Integer id = null;
        String objectId = null;
        CommonResponse response = api.removeEntry(id, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitObjectScoresTest() throws ApiException {
        Boolean sharded = null;
        String objectId = null;
        Integer freezeTime = null;
        List<String> derivatives = null;
        String scoreName = null;
        ClientPermission permissions = null;
        Integer maxEntries = null;
        Boolean partitioned = null;
        Integer ttl = null;
        CommonResponse response = api.submitObjectScores(sharded, objectId)
                .freezeTime(freezeTime)
                .derivatives(derivatives)
                .scoreName(scoreName)
                .permissions(permissions)
                .maxEntries(maxEntries)
                .partitioned(partitioned)
                .ttl(ttl)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void swapObjectLeaderboardTest() throws ApiException {
        Integer swapBase = null;
        Integer delta = null;
        String objectId = null;
        Integer winnerId = null;
        Integer loserId = null;
        CommonResponse response = api.swapObjectLeaderboard(swapBase, delta, objectId)
                .winnerId(winnerId)
                .loserId(loserId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntryTest() throws ApiException {
        Double score = null;
        Integer id = null;
        String objectId = null;
        Double maxScore = null;
        Map<String, Object> stats = null;
        Double minScore = null;
        Boolean increment = null;
        CommonResponse response = api.updateEntry(score, id, objectId)
                .maxScore(maxScore)
                .stats(stats)
                .minScore(minScore)
                .increment(increment)
                .execute();
        // TODO: test validations
    }

}
