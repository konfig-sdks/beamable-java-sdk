/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.EventClaimRequest;
import com.konfigthis.client.model.EventClaimResponse;
import com.konfigthis.client.model.EventObjectData;
import com.konfigthis.client.model.EventPhaseEndRequest;
import com.konfigthis.client.model.EventPlayerView;
import com.konfigthis.client.model.EventScoreRequest;
import com.konfigthis.client.model.EventsInDateRangeResponse;
import com.konfigthis.client.model.PingRsp;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventApi
 */
@Disabled
public class EventApiTest {

    private static EventApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EventApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimObjectEventPlayersTest() throws ApiException {
        String objectId = null;
        String eventId = null;
        EventClaimResponse response = api.claimObjectEventPlayers(objectId)
                .eventId(eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalendarEventsTest() throws ApiException {
        String from = null;
        String to = null;
        String query = null;
        Integer limit = null;
        EventsInDateRangeResponse response = api.getCalendarEvents()
                .from(from)
                .to(to)
                .query(query)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectEventsTest() throws ApiException {
        String objectId = null;
        EventObjectData response = api.getObjectEvents(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayersDataTest() throws ApiException {
        String objectId = null;
        EventPlayerView response = api.getPlayersData(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingObjectEventsTest() throws ApiException {
        String objectId = null;
        PingRsp response = api.pingObjectEvents(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshObjectEventsTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.refreshObjectEvents(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectEndPhaseTest() throws ApiException {
        String objectId = null;
        String time = null;
        CommonResponse response = api.updateObjectEndPhase(objectId)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlayerScoreTest() throws ApiException {
        Double score = null;
        String objectId = null;
        String eventId = null;
        Boolean increment = null;
        Map<String, Object> stats = null;
        CommonResponse response = api.updatePlayerScore(score, objectId)
                .eventId(eventId)
                .increment(increment)
                .stats(stats)
                .execute();
        // TODO: test validations
    }

}
