/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AcceptMultipleAttachments;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AttachmentRequest;
import com.konfigthis.client.model.BulkSendMailRequest;
import com.konfigthis.client.model.BulkUpdateMailObjectRequest;
import com.konfigthis.client.model.EmailUpdateConfirmation;
import com.konfigthis.client.model.EmailUpdateRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.ListMailCategoriesResponse;
import com.konfigthis.client.model.MailQueryResponse;
import com.konfigthis.client.model.MailResponse;
import com.konfigthis.client.model.MailRewards;
import com.konfigthis.client.model.MailSearchClause;
import com.konfigthis.client.model.MailSearchRequest;
import com.konfigthis.client.model.MailSearchResponse;
import com.konfigthis.client.model.MailSuccessResponse;
import com.konfigthis.client.model.MailTemplate;
import com.konfigthis.client.model.MyMailUpdate;
import com.konfigthis.client.model.SendMailObjectRequest;
import com.konfigthis.client.model.SendMailRequest;
import com.konfigthis.client.model.SendMailResponse;
import com.konfigthis.client.model.UpdateMailRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MailApi
 */
@Disabled
public class MailApiTest {

    private static MailApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MailApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptManyTest() throws ApiException {
        String objectId = null;
        List<Integer> mailIds = null;
        MailSuccessResponse response = api.acceptMany(objectId)
                .mailIds(mailIds)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createObjectMailTest() throws ApiException {
        Integer senderGamerTag = null;
        String objectId = null;
        String body = null;
        String expires = null;
        String subject = null;
        MailRewards rewards = null;
        Integer id = null;
        String category = null;
        Integer bodyRef = null;
        List<AttachmentRequest> attachments = null;
        SendMailResponse response = api.createObjectMail(senderGamerTag, objectId)
                .body(body)
                .expires(expires)
                .subject(subject)
                .rewards(rewards)
                .id(id)
                .category(category)
                .bodyRef(bodyRef)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailTemplateTest() throws ApiException {
        Integer gamerTag = null;
        String templateName = null;
        MailTemplate response = api.getMailTemplate(gamerTag)
                .templateName(templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessagesTest() throws ApiException {
        Integer mid = null;
        MailResponse response = api.getMessages(mid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectCategoriesTest() throws ApiException {
        String objectId = null;
        ListMailCategoriesResponse response = api.getObjectCategories(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectDetailTest() throws ApiException {
        Integer mid = null;
        String objectId = null;
        MailResponse response = api.getObjectDetail(mid, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectMailTest() throws ApiException {
        String objectId = null;
        MailQueryResponse response = api.getObjectMail(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMailObjectTest() throws ApiException {
        String objectId = null;
        List<MailSearchClause> clauses = null;
        MailSearchResponse response = api.searchMailObject(objectId)
                .clauses(clauses)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendBulkEmailsTest() throws ApiException {
        List<SendMailRequest> sendMailRequests = null;
        MailSuccessResponse response = api.sendBulkEmails()
                .sendMailRequests(sendMailRequests)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendBulkItemsTest() throws ApiException {
        String objectId = null;
        List<SendMailRequest> sendMailRequests = null;
        MailSuccessResponse response = api.sendBulkItems(objectId)
                .sendMailRequests(sendMailRequests)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdminEmailTest() throws ApiException {
        String newEmail = null;
        String objectId = null;
        String codeType = null;
        Account response = api.updateAdminEmail(newEmail, objectId)
                .codeType(codeType)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailConfirmationTest() throws ApiException {
        String code = null;
        String password = null;
        EmptyResponse response = api.updateEmailConfirmation(code, password)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailInitTest() throws ApiException {
        String newEmail = null;
        String codeType = null;
        EmptyResponse response = api.updateEmailInit(newEmail)
                .codeType(codeType)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMailContentTest() throws ApiException {
        Integer mailId = null;
        String body = null;
        String expires = null;
        String subject = null;
        String state = null;
        String category = null;
        Boolean acceptAttachments = null;
        MailSuccessResponse response = api.updateMailContent(mailId)
                .body(body)
                .expires(expires)
                .subject(subject)
                .state(state)
                .category(category)
                .acceptAttachments(acceptAttachments)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectBulkTest() throws ApiException {
        String objectId = null;
        List<MyMailUpdate> updateMailRequests = null;
        MailSuccessResponse response = api.updateObjectBulk(objectId)
                .updateMailRequests(updateMailRequests)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectMailTest() throws ApiException {
        Integer mailId = null;
        String objectId = null;
        String body = null;
        String expires = null;
        String subject = null;
        String state = null;
        String category = null;
        Boolean acceptAttachments = null;
        MailSuccessResponse response = api.updateObjectMail(mailId, objectId)
                .body(body)
                .expires(expires)
                .subject(subject)
                .state(state)
                .category(category)
                .acceptAttachments(acceptAttachments)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadAttachmentTest() throws ApiException {
        List<Integer> mailIds = null;
        MailSuccessResponse response = api.uploadAttachment()
                .mailIds(mailIds)
                .execute();
        // TODO: test validations
    }

}
