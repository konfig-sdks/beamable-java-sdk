/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.Manifest;
import com.konfigthis.client.model.ObjectRequest;
import com.konfigthis.client.model.ObjectRequests;
import com.konfigthis.client.model.ObjectsMetadataResponse;
import com.konfigthis.client.model.PlayerBasicCloudDataRequest;
import com.konfigthis.client.model.ReplaceObjectsRequest;
import com.konfigthis.client.model.URLSResponse;
import com.konfigthis.client.model.UploadRequest;
import com.konfigthis.client.model.UploadRequestFromPortal;
import com.konfigthis.client.model.UploadRequests;
import com.konfigthis.client.model.UploadRequestsFromPortal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudsavingApi
 */
@Disabled
public class CloudsavingApiTest {

    private static CloudsavingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CloudsavingApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitManifestPutTest() throws ApiException {
        List<UploadRequest> request = null;
        Integer playerId = null;
        Manifest response = api.commitManifestPut()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataTest() throws ApiException {
        List<ObjectRequest> request = null;
        Integer playerId = null;
        EmptyResponse response = api.deleteData()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataTest() throws ApiException {
        Integer playerId = null;
        Manifest response = api.getData()
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataDownloadUrlTest() throws ApiException {
        List<ObjectRequest> request = null;
        Integer playerId = null;
        URLSResponse response = api.getDataDownloadUrl()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataMetadataTest() throws ApiException {
        List<Object> request = null;
        Integer playerId = null;
        ObjectsMetadataResponse response = api.getDataMetadata()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveDataPutTest() throws ApiException {
        Integer playerId = null;
        Manifest response = api.moveDataPut()
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceDataTest() throws ApiException {
        Integer sourcePlayerId = null;
        Integer targetPlayerId = null;
        Manifest response = api.replaceData(sourcePlayerId, targetPlayerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDataUrlTest() throws ApiException {
        List<UploadRequest> request = null;
        Integer playerId = null;
        URLSResponse response = api.uploadDataUrl()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUrlFromPortalTest() throws ApiException {
        List<UploadRequestFromPortal> request = null;
        Integer playerId = null;
        URLSResponse response = api.uploadUrlFromPortal()
                .request(request)
                .playerId(playerId)
                .execute();
        // TODO: test validations
    }

}
