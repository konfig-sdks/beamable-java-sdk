/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AnnouncementContentResponse;
import com.konfigthis.client.model.ClientManifest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.ContentDefinition;
import com.konfigthis.client.model.ContentOrText;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.EventApplyRequest;
import com.konfigthis.client.model.EventContentResponse;
import com.konfigthis.client.model.Manifest;
import com.konfigthis.client.model.ManifestChecksum;
import com.konfigthis.client.model.PullManifestRequest;
import com.konfigthis.client.model.ReferenceSuperset;
import com.konfigthis.client.model.SaveContentRequest;
import com.konfigthis.client.model.SaveContentResponse;
import com.konfigthis.client.model.SaveManifestRequest;
import com.konfigthis.client.model.SaveTextRequest;
import com.konfigthis.client.model.SaveTextResponse;
import com.konfigthis.client.model.SetContentRequest;
import com.konfigthis.client.model.TextDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Disabled
public class ContentApiTest {

    private static ContentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContentApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyContentDataTest() throws ApiException {
        Event content = null;
        CommonResponse response = api.applyContentData()
                .content(content)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkManifestChecksumTest() throws ApiException {
        String id = null;
        ManifestChecksum response = api.checkManifestChecksum()
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createManifestDataTest() throws ApiException {
        String id = null;
        List<ReferenceSuperset> references = null;
        Manifest response = api.createManifestData()
                .id(id)
                .references(references)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewContentTest() throws ApiException {
        List<ContentDefinition> content = null;
        SaveContentResponse response = api.createNewContent()
                .content(content)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventContentTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.deleteEventContent(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnouncementContentTest() throws ApiException {
        AnnouncementContentResponse response = api.getAnnouncementContent()
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentDataTest() throws ApiException {
        EventContentResponse response = api.getContentData()
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentDetailsTest() throws ApiException {
        String contentId = null;
        String version = null;
        ContentOrText response = api.getContentDetails()
                .contentId(contentId)
                .version(version)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManifestDataTest() throws ApiException {
        String id = null;
        Manifest response = api.getManifestData()
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrivateManifestTest() throws ApiException {
        String id = null;
        ClientManifest response = api.getPrivateManifest()
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicManifestTest() throws ApiException {
        String id = null;
        ClientManifest response = api.getPublicManifest()
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullManifestDataTest() throws ApiException {
        String sourceRealmPid = null;
        String id = null;
        Manifest response = api.pullManifestData()
                .sourceRealmPid(sourceRealmPid)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTextContentTest() throws ApiException {
        List<TextDefinition> text = null;
        SaveTextResponse response = api.submitTextContent()
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectContentTest() throws ApiException {
        String objectId = null;
        Event event = null;
        String origin = null;
        CommonResponse response = api.updateObjectContent(objectId)
                .event(event)
                .origin(origin)
                .execute();
        // TODO: test validations
    }

}
