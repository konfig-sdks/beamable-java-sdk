/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdminGetPlayerStatusResponse;
import com.konfigthis.client.model.AdminPlayerStatus;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.GetChampionsResponse;
import com.konfigthis.client.model.GetPlayerStatusResponse;
import com.konfigthis.client.model.GetStandingsResponse;
import com.konfigthis.client.model.JoinRequest;
import com.konfigthis.client.model.PlayerStatus;
import com.konfigthis.client.model.PlayerStatusUpdate;
import com.konfigthis.client.model.RewardsRequest;
import com.konfigthis.client.model.RewardsResponse;
import com.konfigthis.client.model.ScoreRequest;
import com.konfigthis.client.model.TournamentClientView;
import com.konfigthis.client.model.TournamentQueryResponse;
import com.konfigthis.client.model.UpdatePlayerStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TournamentApi
 */
@Disabled
public class TournamentApiTest {

    private static TournamentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TournamentApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminPlayerDataGetTest() throws ApiException {
        Integer playerId = null;
        String tournamentId = null;
        AdminGetPlayerStatusResponse response = api.adminPlayerDataGet(playerId)
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTournamentTest() throws ApiException {
        String tournamentId = null;
        PlayerStatus response = api.createNewTournament()
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRewardTest() throws ApiException {
        String tournamentId = null;
        RewardsResponse response = api.createReward()
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChampionsTest() throws ApiException {
        Integer cycles = null;
        String tournamentId = null;
        GetChampionsResponse response = api.getChampions(cycles)
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGlobalTournamentsTest() throws ApiException {
        String tournamentId = null;
        Integer max = null;
        Integer focus = null;
        Integer cycle = null;
        Integer from = null;
        GetStandingsResponse response = api.getGlobalTournaments()
                .tournamentId(tournamentId)
                .max(max)
                .focus(focus)
                .cycle(cycle)
                .from(from)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMyTournamentTest() throws ApiException {
        String tournamentId = null;
        GetPlayerStatusResponse response = api.getMyTournament()
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRewardsTest() throws ApiException {
        String tournamentId = null;
        RewardsResponse response = api.getRewards()
                .tournamentId(tournamentId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStandingsTest() throws ApiException {
        String tournamentId = null;
        Integer max = null;
        Integer focus = null;
        Integer cycle = null;
        Integer from = null;
        GetStandingsResponse response = api.getStandings()
                .tournamentId(tournamentId)
                .max(max)
                .focus(focus)
                .cycle(cycle)
                .from(from)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTournamentObjectTest() throws ApiException {
        String objectId = null;
        TournamentClientView response = api.getTournamentObject(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTournamentsTest() throws ApiException {
        Boolean isRunning = null;
        TournamentQueryResponse response = api.listTournaments()
                .isRunning(isRunning)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitScoreTest() throws ApiException {
        Double score = null;
        Integer playerId = null;
        String tournamentId = null;
        Map<String, Object> stats = null;
        Boolean increment = null;
        EmptyResponse response = api.submitScore(score, playerId)
                .tournamentId(tournamentId)
                .stats(stats)
                .increment(increment)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdminPlayerTest() throws ApiException {
        Integer playerId = null;
        String tournamentId = null;
        PlayerStatusUpdate update = null;
        AdminPlayerStatus response = api.updateAdminPlayer(playerId)
                .tournamentId(tournamentId)
                .update(update)
                .execute();
        // TODO: test validations
    }

}
