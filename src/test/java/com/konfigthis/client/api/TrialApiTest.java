/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateTrialRestRequest;
import com.konfigthis.client.model.DeleteTrialDataRequest;
import com.konfigthis.client.model.DeleteTrialRequest;
import com.konfigthis.client.model.GetPlayerTrialsResponse;
import com.konfigthis.client.model.GetS3DataResponse;
import com.konfigthis.client.model.ListTrialsResponse;
import com.konfigthis.client.model.PauseTrialRequest;
import com.konfigthis.client.model.SaveGameDataResponse;
import com.konfigthis.client.model.ScheduleTrialRequest;
import com.konfigthis.client.model.StartTrialRequest;
import com.konfigthis.client.model.TrialSuccessResponse;
import com.konfigthis.client.model.UploadTrialDataRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrialApi
 */
@Disabled
public class TrialApiTest {

    private static TrialApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TrialApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDataGetTest() throws ApiException {
        Integer id = null;
        GetS3DataResponse response = api.adminDataGet(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTrialTest() throws ApiException {
        String name = null;
        String strat = null;
        String cohortType = null;
        String cohorts = null;
        TrialSuccessResponse response = api.createNewTrial()
                .name(name)
                .strat(strat)
                .cohortType(cohortType)
                .cohorts(cohorts)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataTest() throws ApiException {
        Integer id = null;
        TrialSuccessResponse response = api.deleteData(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdminTrialsTest() throws ApiException {
        Integer dbid = null;
        GetPlayerTrialsResponse response = api.getAdminTrials(dbid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrialsTest() throws ApiException {
        ListTrialsResponse response = api.listTrials()
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseTrialTest() throws ApiException {
        String name = null;
        TrialSuccessResponse response = api.pauseTrial()
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDataTest() throws ApiException {
        String trialName = null;
        String cohortName = null;
        String dataName = null;
        String filePayloadBase64 = null;
        SaveGameDataResponse response = api.postData()
                .trialName(trialName)
                .cohortName(cohortName)
                .dataName(dataName)
                .filePayloadBase64(filePayloadBase64)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTrialTest() throws ApiException {
        String trialType = null;
        String name = null;
        TrialSuccessResponse response = api.removeTrial()
                .trialType(trialType)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulePutTest() throws ApiException {
        Integer time = null;
        String name = null;
        TrialSuccessResponse response = api.schedulePut(time)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTrialProcessTest() throws ApiException {
        String name = null;
        TrialSuccessResponse response = api.startTrialProcess()
                .name(name)
                .execute();
        // TODO: test validations
    }

}
