/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ActiveListingResponse;
import com.konfigthis.client.model.CalendarClaimRequest;
import com.konfigthis.client.model.CalendarQueryResponse;
import com.konfigthis.client.model.ClearStatusRequest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateRoomRequest;
import com.konfigthis.client.model.CreateRoomResponse;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.EndTransactionRequest;
import com.konfigthis.client.model.GetActiveOffersResponse;
import com.konfigthis.client.model.GetRoomsResponse;
import com.konfigthis.client.model.GetTotalCouponResponse;
import com.konfigthis.client.model.GiveCouponReq;
import com.konfigthis.client.model.InventoryQueryRequest;
import com.konfigthis.client.model.InventoryUpdateRequest;
import com.konfigthis.client.model.InventoryView;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.ItemDeleteRequest;
import com.konfigthis.client.model.ItemUpdateRequest;
import com.konfigthis.client.model.LeaveRoomRequest;
import com.konfigthis.client.model.LeaveRoomResponse;
import com.konfigthis.client.model.MatchUpdate;
import com.konfigthis.client.model.MultipliersGetResponse;
import com.konfigthis.client.model.PreviewVipBonusResponse;
import com.konfigthis.client.model.PurchaseRequest;
import com.konfigthis.client.model.ReportPurchaseRequest;
import com.konfigthis.client.model.ResultResponse;
import com.konfigthis.client.model.StatRequest;
import com.konfigthis.client.model.StatStringListEntry;
import com.konfigthis.client.model.StatSubscriptionNotification;
import com.konfigthis.client.model.StatUpdateRequest;
import com.konfigthis.client.model.StatUpdateRequestStringListFormat;
import com.konfigthis.client.model.StatsResponse;
import com.konfigthis.client.model.TransferRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectApi
 */
@Disabled
public class ObjectApiTest {

    private static ObjectApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ObjectApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimCalendarTest() throws ApiException {
        String objectId = null;
        String id = null;
        CommonResponse response = api.claimCalendar(objectId)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChatRoomTest() throws ApiException {
        Boolean keepSubscribed = null;
        String objectId = null;
        String roomName = null;
        List<Integer> players = null;
        String gameType = null;
        List<Integer> dbids = null;
        CreateRoomResponse response = api.createChatRoom(keepSubscribed, objectId)
                .roomName(roomName)
                .players(players)
                .gameType(gameType)
                .dbids(dbids)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommerceCouponsTest() throws ApiException {
        String objectId = null;
        String listing = null;
        CommonResponse response = api.createCommerceCoupons(objectId)
                .listing(listing)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInventoryObjectTest() throws ApiException {
        String objectId = null;
        List<String> scopes = null;
        InventoryView response = api.createInventoryObject(objectId)
                .scopes(scopes)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createObjectStatsTest() throws ApiException {
        String objectId = null;
        String objectId = null;
        Map<String, Object> set = null;
        Map<String, Object> add = null;
        Boolean emitAnalytics = null;
        EmptyResponse response = api.createObjectStats(objectId)
                .objectId(objectId)
                .set(set)
                .add(add)
                .emitAnalytics(emitAnalytics)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoomTest() throws ApiException {
        String objectId = null;
        String roomId = null;
        LeaveRoomResponse response = api.deleteRoom(objectId)
                .roomId(roomId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStatsObjectTest() throws ApiException {
        String objectId = null;
        String stats = null;
        EmptyResponse response = api.deleteStatsObject(objectId)
                .stats(stats)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStatusByIdTest() throws ApiException {
        String objectId = null;
        String store = null;
        CommonResponse response = api.deleteStatusById(objectId)
                .store(store)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String objectId = null;
        String scope = null;
        GetActiveOffersResponse response = api.getById(objectId)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalendarsTest() throws ApiException {
        String objectId = null;
        CalendarQueryResponse response = api.getCalendars(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatRoomsTest() throws ApiException {
        String objectId = null;
        GetRoomsResponse response = api.getChatRooms(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatV2Test() throws ApiException {
        String objectId = null;
        String scope = null;
        GetRoomsResponse response = api.getChatV2(objectId)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientStatsTest() throws ApiException {
        String objectId = null;
        String stats = null;
        StatsResponse response = api.getClientStats(objectId)
                .stats(stats)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommerceCouponCountTest() throws ApiException {
        String objectId = null;
        GetTotalCouponResponse response = api.getCommerceCouponCount(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommerceListingsTest() throws ApiException {
        String objectId = null;
        String listing = null;
        String store = null;
        String time = null;
        ActiveListingResponse response = api.getCommerceListings(objectId)
                .listing(listing)
                .store(store)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommerceOffersTest() throws ApiException {
        String objectId = null;
        String language = null;
        String time = null;
        String stores = null;
        GetActiveOffersResponse response = api.getCommerceOffers(objectId)
                .language(language)
                .time(time)
                .stores(stores)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInventoryObjectByIdTest() throws ApiException {
        String objectId = null;
        String scope = null;
        InventoryView response = api.getInventoryObjectById(objectId)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchmakingDataTest() throws ApiException {
        String objectId = null;
        MatchUpdate response = api.getMatchmakingData(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipliersTest() throws ApiException {
        String objectId = null;
        MultipliersGetResponse response = api.getMultipliers(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectStatsTest() throws ApiException {
        String objectId = null;
        String stats = null;
        StatsResponse response = api.getObjectStats(objectId)
                .stats(stats)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOffersAdminTest() throws ApiException {
        String objectId = null;
        String language = null;
        String time = null;
        String stores = null;
        GetActiveOffersResponse response = api.getOffersAdmin(objectId)
                .language(language)
                .time(time)
                .stores(stores)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentDetailsTest() throws ApiException {
        String objectId = null;
        CommonResponse response = api.getPaymentDetails(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchmakingDeleteTest() throws ApiException {
        String objectId = null;
        EmptyResponse response = api.matchmakingDelete(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postClientStatsTest() throws ApiException {
        String objectId = null;
        String objectId = null;
        Map<String, Object> set = null;
        Map<String, Object> add = null;
        Boolean emitAnalytics = null;
        EmptyResponse response = api.postClientStats(objectId)
                .objectId(objectId)
                .set(set)
                .add(add)
                .emitAnalytics(emitAnalytics)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postClientStringlistTest() throws ApiException {
        String objectId = null;
        List<StatStringListEntry> set = null;
        EmptyResponse response = api.postClientStringlist(objectId)
                .set(set)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseByIdTest() throws ApiException {
        String objectId = null;
        String listingId = null;
        Boolean free = null;
        ResultResponse response = api.purchaseById(objectId)
                .listingId(listingId)
                .free(free)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseItemTest() throws ApiException {
        String objectId = null;
        String purchaseId = null;
        CommonResponse response = api.purchaseItem(objectId)
                .purchaseId(purchaseId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTransactionByIdTest() throws ApiException {
        String transaction = null;
        String objectId = null;
        CommonResponse response = api.removeTransactionById(transaction, objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMatchmakingProcessTest() throws ApiException {
        String objectId = null;
        MatchUpdate response = api.startMatchmakingProcess(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferItemInventoryTest() throws ApiException {
        Long recipientPlayer = null;
        String objectId = null;
        String transaction = null;
        Map<String, Long> currencies = null;
        CommonResponse response = api.transferItemInventory(recipientPlayer, objectId)
                .transaction(transaction)
                .currencies(currencies)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInventoryObjectTest() throws ApiException {
        Boolean empty = null;
        List<String> currencyContentIds = null;
        List<String> itemContentIds = null;
        String objectId = null;
        Map<String, Long> currencies = null;
        Map<String, List<CurrencyProperty>> currencyProperties = null;
        Boolean applyVipBonus = null;
        List<ItemUpdateRequest> updateItems = null;
        List<ItemCreateRequest> newItems = null;
        String transaction = null;
        List<ItemDeleteRequest> deleteItems = null;
        CommonResponse response = api.updateInventoryObject(empty, currencyContentIds, itemContentIds, objectId)
                .currencies(currencies)
                .currencyProperties(currencyProperties)
                .applyVipBonus(applyVipBonus)
                .updateItems(updateItems)
                .newItems(newItems)
                .transaction(transaction)
                .deleteItems(deleteItems)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInventoryPreviewTest() throws ApiException {
        Boolean empty = null;
        List<String> currencyContentIds = null;
        List<String> itemContentIds = null;
        String objectId = null;
        Map<String, Long> currencies = null;
        Map<String, List<CurrencyProperty>> currencyProperties = null;
        Boolean applyVipBonus = null;
        List<ItemUpdateRequest> updateItems = null;
        List<ItemCreateRequest> newItems = null;
        String transaction = null;
        List<ItemDeleteRequest> deleteItems = null;
        PreviewVipBonusResponse response = api.updateInventoryPreview(empty, currencyContentIds, itemContentIds, objectId)
                .currencies(currencies)
                .currencyProperties(currencyProperties)
                .applyVipBonus(applyVipBonus)
                .updateItems(updateItems)
                .newItems(newItems)
                .transaction(transaction)
                .deleteItems(deleteItems)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMatchmakingTickTest() throws ApiException {
        String objectId = null;
        EmptyResponse response = api.updateMatchmakingTick(objectId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatObjectTest() throws ApiException {
        String objectId = null;
        Map<String, Object> statsBefore = null;
        Map<String, Object> statsAfter = null;
        CommonResponse response = api.updateStatObject(objectId)
                .statsBefore(statsBefore)
                .statsAfter(statsAfter)
                .execute();
        // TODO: test validations
    }

}
