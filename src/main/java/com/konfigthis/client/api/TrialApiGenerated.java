/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTrialRestRequest;
import com.konfigthis.client.model.DeleteTrialDataRequest;
import com.konfigthis.client.model.DeleteTrialRequest;
import com.konfigthis.client.model.GetPlayerTrialsResponse;
import com.konfigthis.client.model.GetS3DataResponse;
import com.konfigthis.client.model.ListTrialsResponse;
import com.konfigthis.client.model.PauseTrialRequest;
import com.konfigthis.client.model.SaveGameDataResponse;
import com.konfigthis.client.model.ScheduleTrialRequest;
import com.konfigthis.client.model.StartTrialRequest;
import com.konfigthis.client.model.TrialSuccessResponse;
import com.konfigthis.client.model.UploadTrialDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TrialApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrialApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TrialApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call adminDataGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/trials/admin/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDataGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminDataGet(Async)");
        }

        return adminDataGetCall(id, _callback);

    }


    private ApiResponse<GetS3DataResponse> adminDataGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = adminDataGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetS3DataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call adminDataGetAsync(Integer id, final ApiCallback<GetS3DataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDataGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetS3DataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AdminDataGetRequestBuilder {
        private final Integer id;

        private AdminDataGetRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for adminDataGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return adminDataGetCall(id, _callback);
        }


        /**
         * Execute adminDataGet request
         * @return GetS3DataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetS3DataResponse execute() throws ApiException {
            ApiResponse<GetS3DataResponse> localVarResp = adminDataGetWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute adminDataGet request with HTTP info returned
         * @return ApiResponse&lt;GetS3DataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetS3DataResponse> executeWithHttpInfo() throws ApiException {
            return adminDataGetWithHttpInfo(id);
        }

        /**
         * Execute adminDataGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetS3DataResponse> _callback) throws ApiException {
            return adminDataGetAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return AdminDataGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AdminDataGetRequestBuilder adminDataGet(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AdminDataGetRequestBuilder(id);
    }
    private okhttp3.Call createNewTrialCall(CreateTrialRestRequest createTrialRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrialRestRequest;

        // create path and map variables
        String localVarPath = "/basic/trials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTrialValidateBeforeCall(CreateTrialRestRequest createTrialRestRequest, final ApiCallback _callback) throws ApiException {
        return createNewTrialCall(createTrialRestRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> createNewTrialWithHttpInfo(CreateTrialRestRequest createTrialRestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTrialValidateBeforeCall(createTrialRestRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTrialAsync(CreateTrialRestRequest createTrialRestRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTrialValidateBeforeCall(createTrialRestRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTrialRequestBuilder {
        private String name;
        private String strat;
        private String cohortType;
        private String cohorts;

        private CreateNewTrialRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewTrialRequestBuilder
         */
        public CreateNewTrialRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set strat
         * @param strat  (optional)
         * @return CreateNewTrialRequestBuilder
         */
        public CreateNewTrialRequestBuilder strat(String strat) {
            this.strat = strat;
            return this;
        }
        
        /**
         * Set cohortType
         * @param cohortType  (optional)
         * @return CreateNewTrialRequestBuilder
         */
        public CreateNewTrialRequestBuilder cohortType(String cohortType) {
            this.cohortType = cohortType;
            return this;
        }
        
        /**
         * Set cohorts
         * @param cohorts  (optional)
         * @return CreateNewTrialRequestBuilder
         */
        public CreateNewTrialRequestBuilder cohorts(String cohorts) {
            this.cohorts = cohorts;
            return this;
        }
        
        /**
         * Build call for createNewTrial
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTrialRestRequest createTrialRestRequest = buildBodyParams();
            return createNewTrialCall(createTrialRestRequest, _callback);
        }

        private CreateTrialRestRequest buildBodyParams() {
            CreateTrialRestRequest createTrialRestRequest = new CreateTrialRestRequest();
            createTrialRestRequest.name(this.name);
            createTrialRestRequest.strat(this.strat);
            createTrialRestRequest.cohortType(this.cohortType);
            createTrialRestRequest.cohorts(this.cohorts);
            return createTrialRestRequest;
        }

        /**
         * Execute createNewTrial request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            CreateTrialRestRequest createTrialRestRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = createNewTrialWithHttpInfo(createTrialRestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTrial request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            CreateTrialRestRequest createTrialRestRequest = buildBodyParams();
            return createNewTrialWithHttpInfo(createTrialRestRequest);
        }

        /**
         * Execute createNewTrial request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            CreateTrialRestRequest createTrialRestRequest = buildBodyParams();
            return createNewTrialAsync(createTrialRestRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewTrialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTrialRequestBuilder createNewTrial() throws IllegalArgumentException {
        return new CreateNewTrialRequestBuilder();
    }
    private okhttp3.Call deleteDataCall(DeleteTrialDataRequest deleteTrialDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTrialDataRequest;

        // create path and map variables
        String localVarPath = "/basic/trials/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataValidateBeforeCall(DeleteTrialDataRequest deleteTrialDataRequest, final ApiCallback _callback) throws ApiException {
        return deleteDataCall(deleteTrialDataRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> deleteDataWithHttpInfo(DeleteTrialDataRequest deleteTrialDataRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(deleteTrialDataRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDataAsync(DeleteTrialDataRequest deleteTrialDataRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(deleteTrialDataRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDataRequestBuilder {
        private final Integer id;

        private DeleteDataRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteTrialDataRequest deleteTrialDataRequest = buildBodyParams();
            return deleteDataCall(deleteTrialDataRequest, _callback);
        }

        private DeleteTrialDataRequest buildBodyParams() {
            DeleteTrialDataRequest deleteTrialDataRequest = new DeleteTrialDataRequest();
            deleteTrialDataRequest.id(this.id);
            return deleteTrialDataRequest;
        }

        /**
         * Execute deleteData request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            DeleteTrialDataRequest deleteTrialDataRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = deleteDataWithHttpInfo(deleteTrialDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteData request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            DeleteTrialDataRequest deleteTrialDataRequest = buildBodyParams();
            return deleteDataWithHttpInfo(deleteTrialDataRequest);
        }

        /**
         * Execute deleteData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            DeleteTrialDataRequest deleteTrialDataRequest = buildBodyParams();
            return deleteDataAsync(deleteTrialDataRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDataRequestBuilder deleteData(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteDataRequestBuilder(id);
    }
    private okhttp3.Call getAdminTrialsCall(Integer dbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/trials/admin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbid", dbid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminTrialsValidateBeforeCall(Integer dbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbid' is set
        if (dbid == null) {
            throw new ApiException("Missing the required parameter 'dbid' when calling getAdminTrials(Async)");
        }

        return getAdminTrialsCall(dbid, _callback);

    }


    private ApiResponse<GetPlayerTrialsResponse> getAdminTrialsWithHttpInfo(Integer dbid) throws ApiException {
        okhttp3.Call localVarCall = getAdminTrialsValidateBeforeCall(dbid, null);
        Type localVarReturnType = new TypeToken<GetPlayerTrialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdminTrialsAsync(Integer dbid, final ApiCallback<GetPlayerTrialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminTrialsValidateBeforeCall(dbid, _callback);
        Type localVarReturnType = new TypeToken<GetPlayerTrialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdminTrialsRequestBuilder {
        private final Integer dbid;

        private GetAdminTrialsRequestBuilder(Integer dbid) {
            this.dbid = dbid;
        }

        /**
         * Build call for getAdminTrials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdminTrialsCall(dbid, _callback);
        }


        /**
         * Execute getAdminTrials request
         * @return GetPlayerTrialsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetPlayerTrialsResponse execute() throws ApiException {
            ApiResponse<GetPlayerTrialsResponse> localVarResp = getAdminTrialsWithHttpInfo(dbid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdminTrials request with HTTP info returned
         * @return ApiResponse&lt;GetPlayerTrialsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPlayerTrialsResponse> executeWithHttpInfo() throws ApiException {
            return getAdminTrialsWithHttpInfo(dbid);
        }

        /**
         * Execute getAdminTrials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPlayerTrialsResponse> _callback) throws ApiException {
            return getAdminTrialsAsync(dbid, _callback);
        }
    }

    /**
     * 
     * 
     * @param dbid  (required)
     * @return GetAdminTrialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetAdminTrialsRequestBuilder getAdminTrials(Integer dbid) throws IllegalArgumentException {
        if (dbid == null) throw new IllegalArgumentException("\"dbid\" is required but got null");
        return new GetAdminTrialsRequestBuilder(dbid);
    }
    private okhttp3.Call listTrialsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/trials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrialsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTrialsCall(_callback);

    }


    private ApiResponse<ListTrialsResponse> listTrialsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTrialsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListTrialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTrialsAsync(final ApiCallback<ListTrialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrialsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListTrialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTrialsRequestBuilder {

        private ListTrialsRequestBuilder() {
        }

        /**
         * Build call for listTrials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTrialsCall(_callback);
        }


        /**
         * Execute listTrials request
         * @return ListTrialsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ListTrialsResponse execute() throws ApiException {
            ApiResponse<ListTrialsResponse> localVarResp = listTrialsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTrials request with HTTP info returned
         * @return ApiResponse&lt;ListTrialsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListTrialsResponse> executeWithHttpInfo() throws ApiException {
            return listTrialsWithHttpInfo();
        }

        /**
         * Execute listTrials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListTrialsResponse> _callback) throws ApiException {
            return listTrialsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return ListTrialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListTrialsRequestBuilder listTrials() throws IllegalArgumentException {
        return new ListTrialsRequestBuilder();
    }
    private okhttp3.Call pauseTrialCall(PauseTrialRequest pauseTrialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pauseTrialRequest;

        // create path and map variables
        String localVarPath = "/basic/trials/pause";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseTrialValidateBeforeCall(PauseTrialRequest pauseTrialRequest, final ApiCallback _callback) throws ApiException {
        return pauseTrialCall(pauseTrialRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> pauseTrialWithHttpInfo(PauseTrialRequest pauseTrialRequest) throws ApiException {
        okhttp3.Call localVarCall = pauseTrialValidateBeforeCall(pauseTrialRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pauseTrialAsync(PauseTrialRequest pauseTrialRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseTrialValidateBeforeCall(pauseTrialRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PauseTrialRequestBuilder {
        private String name;

        private PauseTrialRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return PauseTrialRequestBuilder
         */
        public PauseTrialRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for pauseTrial
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PauseTrialRequest pauseTrialRequest = buildBodyParams();
            return pauseTrialCall(pauseTrialRequest, _callback);
        }

        private PauseTrialRequest buildBodyParams() {
            PauseTrialRequest pauseTrialRequest = new PauseTrialRequest();
            pauseTrialRequest.name(this.name);
            return pauseTrialRequest;
        }

        /**
         * Execute pauseTrial request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            PauseTrialRequest pauseTrialRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = pauseTrialWithHttpInfo(pauseTrialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pauseTrial request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            PauseTrialRequest pauseTrialRequest = buildBodyParams();
            return pauseTrialWithHttpInfo(pauseTrialRequest);
        }

        /**
         * Execute pauseTrial request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            PauseTrialRequest pauseTrialRequest = buildBodyParams();
            return pauseTrialAsync(pauseTrialRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return PauseTrialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PauseTrialRequestBuilder pauseTrial() throws IllegalArgumentException {
        return new PauseTrialRequestBuilder();
    }
    private okhttp3.Call postDataCall(UploadTrialDataRequest uploadTrialDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadTrialDataRequest;

        // create path and map variables
        String localVarPath = "/basic/trials/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDataValidateBeforeCall(UploadTrialDataRequest uploadTrialDataRequest, final ApiCallback _callback) throws ApiException {
        return postDataCall(uploadTrialDataRequest, _callback);

    }


    private ApiResponse<SaveGameDataResponse> postDataWithHttpInfo(UploadTrialDataRequest uploadTrialDataRequest) throws ApiException {
        okhttp3.Call localVarCall = postDataValidateBeforeCall(uploadTrialDataRequest, null);
        Type localVarReturnType = new TypeToken<SaveGameDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postDataAsync(UploadTrialDataRequest uploadTrialDataRequest, final ApiCallback<SaveGameDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDataValidateBeforeCall(uploadTrialDataRequest, _callback);
        Type localVarReturnType = new TypeToken<SaveGameDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostDataRequestBuilder {
        private String trialName;
        private String cohortName;
        private String dataName;
        private String filePayloadBase64;

        private PostDataRequestBuilder() {
        }

        /**
         * Set trialName
         * @param trialName  (optional)
         * @return PostDataRequestBuilder
         */
        public PostDataRequestBuilder trialName(String trialName) {
            this.trialName = trialName;
            return this;
        }
        
        /**
         * Set cohortName
         * @param cohortName  (optional)
         * @return PostDataRequestBuilder
         */
        public PostDataRequestBuilder cohortName(String cohortName) {
            this.cohortName = cohortName;
            return this;
        }
        
        /**
         * Set dataName
         * @param dataName  (optional)
         * @return PostDataRequestBuilder
         */
        public PostDataRequestBuilder dataName(String dataName) {
            this.dataName = dataName;
            return this;
        }
        
        /**
         * Set filePayloadBase64
         * @param filePayloadBase64  (optional)
         * @return PostDataRequestBuilder
         */
        public PostDataRequestBuilder filePayloadBase64(String filePayloadBase64) {
            this.filePayloadBase64 = filePayloadBase64;
            return this;
        }
        
        /**
         * Build call for postData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadTrialDataRequest uploadTrialDataRequest = buildBodyParams();
            return postDataCall(uploadTrialDataRequest, _callback);
        }

        private UploadTrialDataRequest buildBodyParams() {
            UploadTrialDataRequest uploadTrialDataRequest = new UploadTrialDataRequest();
            uploadTrialDataRequest.trialName(this.trialName);
            uploadTrialDataRequest.cohortName(this.cohortName);
            uploadTrialDataRequest.dataName(this.dataName);
            uploadTrialDataRequest.filePayloadBase64(this.filePayloadBase64);
            return uploadTrialDataRequest;
        }

        /**
         * Execute postData request
         * @return SaveGameDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SaveGameDataResponse execute() throws ApiException {
            UploadTrialDataRequest uploadTrialDataRequest = buildBodyParams();
            ApiResponse<SaveGameDataResponse> localVarResp = postDataWithHttpInfo(uploadTrialDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postData request with HTTP info returned
         * @return ApiResponse&lt;SaveGameDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveGameDataResponse> executeWithHttpInfo() throws ApiException {
            UploadTrialDataRequest uploadTrialDataRequest = buildBodyParams();
            return postDataWithHttpInfo(uploadTrialDataRequest);
        }

        /**
         * Execute postData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveGameDataResponse> _callback) throws ApiException {
            UploadTrialDataRequest uploadTrialDataRequest = buildBodyParams();
            return postDataAsync(uploadTrialDataRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return PostDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostDataRequestBuilder postData() throws IllegalArgumentException {
        return new PostDataRequestBuilder();
    }
    private okhttp3.Call removeTrialCall(DeleteTrialRequest deleteTrialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTrialRequest;

        // create path and map variables
        String localVarPath = "/basic/trials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTrialValidateBeforeCall(DeleteTrialRequest deleteTrialRequest, final ApiCallback _callback) throws ApiException {
        return removeTrialCall(deleteTrialRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> removeTrialWithHttpInfo(DeleteTrialRequest deleteTrialRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTrialValidateBeforeCall(deleteTrialRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTrialAsync(DeleteTrialRequest deleteTrialRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTrialValidateBeforeCall(deleteTrialRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTrialRequestBuilder {
        private String trialType;
        private String name;

        private RemoveTrialRequestBuilder() {
        }

        /**
         * Set trialType
         * @param trialType  (optional)
         * @return RemoveTrialRequestBuilder
         */
        public RemoveTrialRequestBuilder trialType(String trialType) {
            this.trialType = trialType;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return RemoveTrialRequestBuilder
         */
        public RemoveTrialRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for removeTrial
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteTrialRequest deleteTrialRequest = buildBodyParams();
            return removeTrialCall(deleteTrialRequest, _callback);
        }

        private DeleteTrialRequest buildBodyParams() {
            DeleteTrialRequest deleteTrialRequest = new DeleteTrialRequest();
            deleteTrialRequest.trialType(this.trialType);
            deleteTrialRequest.name(this.name);
            return deleteTrialRequest;
        }

        /**
         * Execute removeTrial request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            DeleteTrialRequest deleteTrialRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = removeTrialWithHttpInfo(deleteTrialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTrial request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            DeleteTrialRequest deleteTrialRequest = buildBodyParams();
            return removeTrialWithHttpInfo(deleteTrialRequest);
        }

        /**
         * Execute removeTrial request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            DeleteTrialRequest deleteTrialRequest = buildBodyParams();
            return removeTrialAsync(deleteTrialRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return RemoveTrialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTrialRequestBuilder removeTrial() throws IllegalArgumentException {
        return new RemoveTrialRequestBuilder();
    }
    private okhttp3.Call schedulePutCall(ScheduleTrialRequest scheduleTrialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleTrialRequest;

        // create path and map variables
        String localVarPath = "/basic/trials/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulePutValidateBeforeCall(ScheduleTrialRequest scheduleTrialRequest, final ApiCallback _callback) throws ApiException {
        return schedulePutCall(scheduleTrialRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> schedulePutWithHttpInfo(ScheduleTrialRequest scheduleTrialRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulePutValidateBeforeCall(scheduleTrialRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call schedulePutAsync(ScheduleTrialRequest scheduleTrialRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulePutValidateBeforeCall(scheduleTrialRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SchedulePutRequestBuilder {
        private final Integer time;
        private String name;

        private SchedulePutRequestBuilder(Integer time) {
            this.time = time;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return SchedulePutRequestBuilder
         */
        public SchedulePutRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for schedulePut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScheduleTrialRequest scheduleTrialRequest = buildBodyParams();
            return schedulePutCall(scheduleTrialRequest, _callback);
        }

        private ScheduleTrialRequest buildBodyParams() {
            ScheduleTrialRequest scheduleTrialRequest = new ScheduleTrialRequest();
            scheduleTrialRequest.name(this.name);
            scheduleTrialRequest.time(this.time);
            return scheduleTrialRequest;
        }

        /**
         * Execute schedulePut request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            ScheduleTrialRequest scheduleTrialRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = schedulePutWithHttpInfo(scheduleTrialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute schedulePut request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            ScheduleTrialRequest scheduleTrialRequest = buildBodyParams();
            return schedulePutWithHttpInfo(scheduleTrialRequest);
        }

        /**
         * Execute schedulePut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            ScheduleTrialRequest scheduleTrialRequest = buildBodyParams();
            return schedulePutAsync(scheduleTrialRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SchedulePutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SchedulePutRequestBuilder schedulePut(Integer time) throws IllegalArgumentException {
        if (time == null) throw new IllegalArgumentException("\"time\" is required but got null");
        return new SchedulePutRequestBuilder(time);
    }
    private okhttp3.Call startTrialProcessCall(StartTrialRequest startTrialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startTrialRequest;

        // create path and map variables
        String localVarPath = "/basic/trials/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTrialProcessValidateBeforeCall(StartTrialRequest startTrialRequest, final ApiCallback _callback) throws ApiException {
        return startTrialProcessCall(startTrialRequest, _callback);

    }


    private ApiResponse<TrialSuccessResponse> startTrialProcessWithHttpInfo(StartTrialRequest startTrialRequest) throws ApiException {
        okhttp3.Call localVarCall = startTrialProcessValidateBeforeCall(startTrialRequest, null);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startTrialProcessAsync(StartTrialRequest startTrialRequest, final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTrialProcessValidateBeforeCall(startTrialRequest, _callback);
        Type localVarReturnType = new TypeToken<TrialSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartTrialProcessRequestBuilder {
        private String name;

        private StartTrialProcessRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return StartTrialProcessRequestBuilder
         */
        public StartTrialProcessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for startTrialProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StartTrialRequest startTrialRequest = buildBodyParams();
            return startTrialProcessCall(startTrialRequest, _callback);
        }

        private StartTrialRequest buildBodyParams() {
            StartTrialRequest startTrialRequest = new StartTrialRequest();
            startTrialRequest.name(this.name);
            return startTrialRequest;
        }

        /**
         * Execute startTrialProcess request
         * @return TrialSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TrialSuccessResponse execute() throws ApiException {
            StartTrialRequest startTrialRequest = buildBodyParams();
            ApiResponse<TrialSuccessResponse> localVarResp = startTrialProcessWithHttpInfo(startTrialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startTrialProcess request with HTTP info returned
         * @return ApiResponse&lt;TrialSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrialSuccessResponse> executeWithHttpInfo() throws ApiException {
            StartTrialRequest startTrialRequest = buildBodyParams();
            return startTrialProcessWithHttpInfo(startTrialRequest);
        }

        /**
         * Execute startTrialProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrialSuccessResponse> _callback) throws ApiException {
            StartTrialRequest startTrialRequest = buildBodyParams();
            return startTrialProcessAsync(startTrialRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return StartTrialProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StartTrialProcessRequestBuilder startTrialProcess() throws IllegalArgumentException {
        return new StartTrialProcessRequestBuilder();
    }
}
