/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AcceptMultipleAttachments;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AttachmentRequest;
import com.konfigthis.client.model.BulkSendMailRequest;
import com.konfigthis.client.model.BulkUpdateMailObjectRequest;
import com.konfigthis.client.model.EmailUpdateConfirmation;
import com.konfigthis.client.model.EmailUpdateRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.ListMailCategoriesResponse;
import com.konfigthis.client.model.MailQueryResponse;
import com.konfigthis.client.model.MailResponse;
import com.konfigthis.client.model.MailRewards;
import com.konfigthis.client.model.MailSearchClause;
import com.konfigthis.client.model.MailSearchRequest;
import com.konfigthis.client.model.MailSearchResponse;
import com.konfigthis.client.model.MailSuccessResponse;
import com.konfigthis.client.model.MailTemplate;
import com.konfigthis.client.model.MyMailUpdate;
import com.konfigthis.client.model.SendMailObjectRequest;
import com.konfigthis.client.model.SendMailRequest;
import com.konfigthis.client.model.SendMailResponse;
import com.konfigthis.client.model.UpdateMailRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MailApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MailApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MailApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptManyCall(String objectId, AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptMultipleAttachments;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/accept/many"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptManyValidateBeforeCall(String objectId, AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling acceptMany(Async)");
        }

        return acceptManyCall(objectId, acceptMultipleAttachments, _callback);

    }


    private ApiResponse<MailSuccessResponse> acceptManyWithHttpInfo(String objectId, AcceptMultipleAttachments acceptMultipleAttachments) throws ApiException {
        okhttp3.Call localVarCall = acceptManyValidateBeforeCall(objectId, acceptMultipleAttachments, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptManyAsync(String objectId, AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptManyValidateBeforeCall(objectId, acceptMultipleAttachments, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AcceptManyRequestBuilder {
        private final String objectId;
        private List<Integer> mailIds;

        private AcceptManyRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set mailIds
         * @param mailIds  (optional)
         * @return AcceptManyRequestBuilder
         */
        public AcceptManyRequestBuilder mailIds(List<Integer> mailIds) {
            this.mailIds = mailIds;
            return this;
        }
        
        /**
         * Build call for acceptMany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return acceptManyCall(objectId, acceptMultipleAttachments, _callback);
        }

        private AcceptMultipleAttachments buildBodyParams() {
            AcceptMultipleAttachments acceptMultipleAttachments = new AcceptMultipleAttachments();
            acceptMultipleAttachments.mailIds(this.mailIds);
            return acceptMultipleAttachments;
        }

        /**
         * Execute acceptMany request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = acceptManyWithHttpInfo(objectId, acceptMultipleAttachments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute acceptMany request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return acceptManyWithHttpInfo(objectId, acceptMultipleAttachments);
        }

        /**
         * Execute acceptMany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return acceptManyAsync(objectId, acceptMultipleAttachments, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return AcceptManyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AcceptManyRequestBuilder acceptMany(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new AcceptManyRequestBuilder(objectId);
    }
    private okhttp3.Call createObjectMailCall(String objectId, SendMailObjectRequest sendMailObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMailObjectRequest;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectMailValidateBeforeCall(String objectId, SendMailObjectRequest sendMailObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createObjectMail(Async)");
        }

        return createObjectMailCall(objectId, sendMailObjectRequest, _callback);

    }


    private ApiResponse<SendMailResponse> createObjectMailWithHttpInfo(String objectId, SendMailObjectRequest sendMailObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createObjectMailValidateBeforeCall(objectId, sendMailObjectRequest, null);
        Type localVarReturnType = new TypeToken<SendMailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createObjectMailAsync(String objectId, SendMailObjectRequest sendMailObjectRequest, final ApiCallback<SendMailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectMailValidateBeforeCall(objectId, sendMailObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateObjectMailRequestBuilder {
        private final Integer senderGamerTag;
        private final String objectId;
        private String body;
        private String expires;
        private String subject;
        private MailRewards rewards;
        private Integer id;
        private String category;
        private Integer bodyRef;
        private List<AttachmentRequest> attachments;

        private CreateObjectMailRequestBuilder(Integer senderGamerTag, String objectId) {
            this.senderGamerTag = senderGamerTag;
            this.objectId = objectId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set expires
         * @param expires  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder expires(String expires) {
            this.expires = expires;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set rewards
         * @param rewards  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder rewards(MailRewards rewards) {
            this.rewards = rewards;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set bodyRef
         * @param bodyRef  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder bodyRef(Integer bodyRef) {
            this.bodyRef = bodyRef;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments  (optional)
         * @return CreateObjectMailRequestBuilder
         */
        public CreateObjectMailRequestBuilder attachments(List<AttachmentRequest> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for createObjectMail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendMailObjectRequest sendMailObjectRequest = buildBodyParams();
            return createObjectMailCall(objectId, sendMailObjectRequest, _callback);
        }

        private SendMailObjectRequest buildBodyParams() {
            SendMailObjectRequest sendMailObjectRequest = new SendMailObjectRequest();
            sendMailObjectRequest.body(this.body);
            sendMailObjectRequest.expires(this.expires);
            sendMailObjectRequest.subject(this.subject);
            sendMailObjectRequest.rewards(this.rewards);
            sendMailObjectRequest.id(this.id);
            sendMailObjectRequest.senderGamerTag(this.senderGamerTag);
            sendMailObjectRequest.category(this.category);
            sendMailObjectRequest.bodyRef(this.bodyRef);
            sendMailObjectRequest.attachments(this.attachments);
            return sendMailObjectRequest;
        }

        /**
         * Execute createObjectMail request
         * @return SendMailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SendMailResponse execute() throws ApiException {
            SendMailObjectRequest sendMailObjectRequest = buildBodyParams();
            ApiResponse<SendMailResponse> localVarResp = createObjectMailWithHttpInfo(objectId, sendMailObjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createObjectMail request with HTTP info returned
         * @return ApiResponse&lt;SendMailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendMailResponse> executeWithHttpInfo() throws ApiException {
            SendMailObjectRequest sendMailObjectRequest = buildBodyParams();
            return createObjectMailWithHttpInfo(objectId, sendMailObjectRequest);
        }

        /**
         * Execute createObjectMail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendMailResponse> _callback) throws ApiException {
            SendMailObjectRequest sendMailObjectRequest = buildBodyParams();
            return createObjectMailAsync(objectId, sendMailObjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateObjectMailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateObjectMailRequestBuilder createObjectMail(Integer senderGamerTag, String objectId) throws IllegalArgumentException {
        if (senderGamerTag == null) throw new IllegalArgumentException("\"senderGamerTag\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateObjectMailRequestBuilder(senderGamerTag, objectId);
    }
    private okhttp3.Call getMailTemplateCall(Integer gamerTag, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/mail/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (gamerTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gamerTag", gamerTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailTemplateValidateBeforeCall(Integer gamerTag, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamerTag' is set
        if (gamerTag == null) {
            throw new ApiException("Missing the required parameter 'gamerTag' when calling getMailTemplate(Async)");
        }

        return getMailTemplateCall(gamerTag, templateName, _callback);

    }


    private ApiResponse<MailTemplate> getMailTemplateWithHttpInfo(Integer gamerTag, String templateName) throws ApiException {
        okhttp3.Call localVarCall = getMailTemplateValidateBeforeCall(gamerTag, templateName, null);
        Type localVarReturnType = new TypeToken<MailTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMailTemplateAsync(Integer gamerTag, String templateName, final ApiCallback<MailTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailTemplateValidateBeforeCall(gamerTag, templateName, _callback);
        Type localVarReturnType = new TypeToken<MailTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMailTemplateRequestBuilder {
        private final Integer gamerTag;
        private String templateName;

        private GetMailTemplateRequestBuilder(Integer gamerTag) {
            this.gamerTag = gamerTag;
        }

        /**
         * Set templateName
         * @param templateName  (optional)
         * @return GetMailTemplateRequestBuilder
         */
        public GetMailTemplateRequestBuilder templateName(String templateName) {
            this.templateName = templateName;
            return this;
        }
        
        /**
         * Build call for getMailTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMailTemplateCall(gamerTag, templateName, _callback);
        }


        /**
         * Execute getMailTemplate request
         * @return MailTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailTemplate execute() throws ApiException {
            ApiResponse<MailTemplate> localVarResp = getMailTemplateWithHttpInfo(gamerTag, templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMailTemplate request with HTTP info returned
         * @return ApiResponse&lt;MailTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailTemplate> executeWithHttpInfo() throws ApiException {
            return getMailTemplateWithHttpInfo(gamerTag, templateName);
        }

        /**
         * Execute getMailTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailTemplate> _callback) throws ApiException {
            return getMailTemplateAsync(gamerTag, templateName, _callback);
        }
    }

    /**
     * 
     * 
     * @param gamerTag  (required)
     * @return GetMailTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMailTemplateRequestBuilder getMailTemplate(Integer gamerTag) throws IllegalArgumentException {
        if (gamerTag == null) throw new IllegalArgumentException("\"gamerTag\" is required but got null");
        return new GetMailTemplateRequestBuilder(gamerTag);
    }
    private okhttp3.Call getMessagesCall(Integer mid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/mail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesValidateBeforeCall(Integer mid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getMessages(Async)");
        }

        return getMessagesCall(mid, _callback);

    }


    private ApiResponse<MailResponse> getMessagesWithHttpInfo(Integer mid) throws ApiException {
        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(mid, null);
        Type localVarReturnType = new TypeToken<MailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMessagesAsync(Integer mid, final ApiCallback<MailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(mid, _callback);
        Type localVarReturnType = new TypeToken<MailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMessagesRequestBuilder {
        private final Integer mid;

        private GetMessagesRequestBuilder(Integer mid) {
            this.mid = mid;
        }

        /**
         * Build call for getMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMessagesCall(mid, _callback);
        }


        /**
         * Execute getMessages request
         * @return MailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailResponse execute() throws ApiException {
            ApiResponse<MailResponse> localVarResp = getMessagesWithHttpInfo(mid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMessages request with HTTP info returned
         * @return ApiResponse&lt;MailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailResponse> executeWithHttpInfo() throws ApiException {
            return getMessagesWithHttpInfo(mid);
        }

        /**
         * Execute getMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailResponse> _callback) throws ApiException {
            return getMessagesAsync(mid, _callback);
        }
    }

    /**
     * 
     * 
     * @param mid  (required)
     * @return GetMessagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMessagesRequestBuilder getMessages(Integer mid) throws IllegalArgumentException {
        if (mid == null) throw new IllegalArgumentException("\"mid\" is required but got null");
        return new GetMessagesRequestBuilder(mid);
    }
    private okhttp3.Call getObjectCategoriesCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/categories"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectCategoriesValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectCategories(Async)");
        }

        return getObjectCategoriesCall(objectId, _callback);

    }


    private ApiResponse<ListMailCategoriesResponse> getObjectCategoriesWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectCategoriesValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<ListMailCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectCategoriesAsync(String objectId, final ApiCallback<ListMailCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectCategoriesValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<ListMailCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectCategoriesRequestBuilder {
        private final String objectId;

        private GetObjectCategoriesRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectCategoriesCall(objectId, _callback);
        }


        /**
         * Execute getObjectCategories request
         * @return ListMailCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ListMailCategoriesResponse execute() throws ApiException {
            ApiResponse<ListMailCategoriesResponse> localVarResp = getObjectCategoriesWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectCategories request with HTTP info returned
         * @return ApiResponse&lt;ListMailCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMailCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return getObjectCategoriesWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMailCategoriesResponse> _callback) throws ApiException {
            return getObjectCategoriesAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectCategoriesRequestBuilder getObjectCategories(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectCategoriesRequestBuilder(objectId);
    }
    private okhttp3.Call getObjectDetailCall(Integer mid, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/detail"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectDetailValidateBeforeCall(Integer mid, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getObjectDetail(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectDetail(Async)");
        }

        return getObjectDetailCall(mid, objectId, _callback);

    }


    private ApiResponse<MailResponse> getObjectDetailWithHttpInfo(Integer mid, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectDetailValidateBeforeCall(mid, objectId, null);
        Type localVarReturnType = new TypeToken<MailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectDetailAsync(Integer mid, String objectId, final ApiCallback<MailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectDetailValidateBeforeCall(mid, objectId, _callback);
        Type localVarReturnType = new TypeToken<MailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectDetailRequestBuilder {
        private final Integer mid;
        private final String objectId;

        private GetObjectDetailRequestBuilder(Integer mid, String objectId) {
            this.mid = mid;
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectDetailCall(mid, objectId, _callback);
        }


        /**
         * Execute getObjectDetail request
         * @return MailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailResponse execute() throws ApiException {
            ApiResponse<MailResponse> localVarResp = getObjectDetailWithHttpInfo(mid, objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectDetail request with HTTP info returned
         * @return ApiResponse&lt;MailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailResponse> executeWithHttpInfo() throws ApiException {
            return getObjectDetailWithHttpInfo(mid, objectId);
        }

        /**
         * Execute getObjectDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailResponse> _callback) throws ApiException {
            return getObjectDetailAsync(mid, objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param mid  (required)
     * @param objectId  (required)
     * @return GetObjectDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectDetailRequestBuilder getObjectDetail(Integer mid, String objectId) throws IllegalArgumentException {
        if (mid == null) throw new IllegalArgumentException("\"mid\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectDetailRequestBuilder(mid, objectId);
    }
    private okhttp3.Call getObjectMailCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectMailValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectMail(Async)");
        }

        return getObjectMailCall(objectId, _callback);

    }


    private ApiResponse<MailQueryResponse> getObjectMailWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectMailValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<MailQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectMailAsync(String objectId, final ApiCallback<MailQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectMailValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<MailQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectMailRequestBuilder {
        private final String objectId;

        private GetObjectMailRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectMail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectMailCall(objectId, _callback);
        }


        /**
         * Execute getObjectMail request
         * @return MailQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailQueryResponse execute() throws ApiException {
            ApiResponse<MailQueryResponse> localVarResp = getObjectMailWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectMail request with HTTP info returned
         * @return ApiResponse&lt;MailQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailQueryResponse> executeWithHttpInfo() throws ApiException {
            return getObjectMailWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectMail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailQueryResponse> _callback) throws ApiException {
            return getObjectMailAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectMailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectMailRequestBuilder getObjectMail(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectMailRequestBuilder(objectId);
    }
    private okhttp3.Call searchMailObjectCall(String objectId, MailSearchRequest mailSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mailSearchRequest;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/search"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMailObjectValidateBeforeCall(String objectId, MailSearchRequest mailSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling searchMailObject(Async)");
        }

        return searchMailObjectCall(objectId, mailSearchRequest, _callback);

    }


    private ApiResponse<MailSearchResponse> searchMailObjectWithHttpInfo(String objectId, MailSearchRequest mailSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchMailObjectValidateBeforeCall(objectId, mailSearchRequest, null);
        Type localVarReturnType = new TypeToken<MailSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchMailObjectAsync(String objectId, MailSearchRequest mailSearchRequest, final ApiCallback<MailSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMailObjectValidateBeforeCall(objectId, mailSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchMailObjectRequestBuilder {
        private final String objectId;
        private List<MailSearchClause> clauses;

        private SearchMailObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set clauses
         * @param clauses  (optional)
         * @return SearchMailObjectRequestBuilder
         */
        public SearchMailObjectRequestBuilder clauses(List<MailSearchClause> clauses) {
            this.clauses = clauses;
            return this;
        }
        
        /**
         * Build call for searchMailObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MailSearchRequest mailSearchRequest = buildBodyParams();
            return searchMailObjectCall(objectId, mailSearchRequest, _callback);
        }

        private MailSearchRequest buildBodyParams() {
            MailSearchRequest mailSearchRequest = new MailSearchRequest();
            mailSearchRequest.clauses(this.clauses);
            return mailSearchRequest;
        }

        /**
         * Execute searchMailObject request
         * @return MailSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSearchResponse execute() throws ApiException {
            MailSearchRequest mailSearchRequest = buildBodyParams();
            ApiResponse<MailSearchResponse> localVarResp = searchMailObjectWithHttpInfo(objectId, mailSearchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchMailObject request with HTTP info returned
         * @return ApiResponse&lt;MailSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSearchResponse> executeWithHttpInfo() throws ApiException {
            MailSearchRequest mailSearchRequest = buildBodyParams();
            return searchMailObjectWithHttpInfo(objectId, mailSearchRequest);
        }

        /**
         * Execute searchMailObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSearchResponse> _callback) throws ApiException {
            MailSearchRequest mailSearchRequest = buildBodyParams();
            return searchMailObjectAsync(objectId, mailSearchRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SearchMailObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchMailObjectRequestBuilder searchMailObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SearchMailObjectRequestBuilder(objectId);
    }
    private okhttp3.Call sendBulkEmailsCall(BulkSendMailRequest bulkSendMailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkSendMailRequest;

        // create path and map variables
        String localVarPath = "/basic/mail/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBulkEmailsValidateBeforeCall(BulkSendMailRequest bulkSendMailRequest, final ApiCallback _callback) throws ApiException {
        return sendBulkEmailsCall(bulkSendMailRequest, _callback);

    }


    private ApiResponse<MailSuccessResponse> sendBulkEmailsWithHttpInfo(BulkSendMailRequest bulkSendMailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendBulkEmailsValidateBeforeCall(bulkSendMailRequest, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBulkEmailsAsync(BulkSendMailRequest bulkSendMailRequest, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBulkEmailsValidateBeforeCall(bulkSendMailRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBulkEmailsRequestBuilder {
        private List<SendMailRequest> sendMailRequests;

        private SendBulkEmailsRequestBuilder() {
        }

        /**
         * Set sendMailRequests
         * @param sendMailRequests  (optional)
         * @return SendBulkEmailsRequestBuilder
         */
        public SendBulkEmailsRequestBuilder sendMailRequests(List<SendMailRequest> sendMailRequests) {
            this.sendMailRequests = sendMailRequests;
            return this;
        }
        
        /**
         * Build call for sendBulkEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkEmailsCall(bulkSendMailRequest, _callback);
        }

        private BulkSendMailRequest buildBodyParams() {
            BulkSendMailRequest bulkSendMailRequest = new BulkSendMailRequest();
            bulkSendMailRequest.sendMailRequests(this.sendMailRequests);
            return bulkSendMailRequest;
        }

        /**
         * Execute sendBulkEmails request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = sendBulkEmailsWithHttpInfo(bulkSendMailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBulkEmails request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkEmailsWithHttpInfo(bulkSendMailRequest);
        }

        /**
         * Execute sendBulkEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkEmailsAsync(bulkSendMailRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendBulkEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendBulkEmailsRequestBuilder sendBulkEmails() throws IllegalArgumentException {
        return new SendBulkEmailsRequestBuilder();
    }
    private okhttp3.Call sendBulkItemsCall(String objectId, BulkSendMailRequest bulkSendMailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkSendMailRequest;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/bulk"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBulkItemsValidateBeforeCall(String objectId, BulkSendMailRequest bulkSendMailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling sendBulkItems(Async)");
        }

        return sendBulkItemsCall(objectId, bulkSendMailRequest, _callback);

    }


    private ApiResponse<MailSuccessResponse> sendBulkItemsWithHttpInfo(String objectId, BulkSendMailRequest bulkSendMailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendBulkItemsValidateBeforeCall(objectId, bulkSendMailRequest, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBulkItemsAsync(String objectId, BulkSendMailRequest bulkSendMailRequest, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBulkItemsValidateBeforeCall(objectId, bulkSendMailRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBulkItemsRequestBuilder {
        private final String objectId;
        private List<SendMailRequest> sendMailRequests;

        private SendBulkItemsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set sendMailRequests
         * @param sendMailRequests  (optional)
         * @return SendBulkItemsRequestBuilder
         */
        public SendBulkItemsRequestBuilder sendMailRequests(List<SendMailRequest> sendMailRequests) {
            this.sendMailRequests = sendMailRequests;
            return this;
        }
        
        /**
         * Build call for sendBulkItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkItemsCall(objectId, bulkSendMailRequest, _callback);
        }

        private BulkSendMailRequest buildBodyParams() {
            BulkSendMailRequest bulkSendMailRequest = new BulkSendMailRequest();
            bulkSendMailRequest.sendMailRequests(this.sendMailRequests);
            return bulkSendMailRequest;
        }

        /**
         * Execute sendBulkItems request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = sendBulkItemsWithHttpInfo(objectId, bulkSendMailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBulkItems request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkItemsWithHttpInfo(objectId, bulkSendMailRequest);
        }

        /**
         * Execute sendBulkItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            BulkSendMailRequest bulkSendMailRequest = buildBodyParams();
            return sendBulkItemsAsync(objectId, bulkSendMailRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SendBulkItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendBulkItemsRequestBuilder sendBulkItems(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SendBulkItemsRequestBuilder(objectId);
    }
    private okhttp3.Call updateAdminEmailCall(String objectId, EmailUpdateRequest emailUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailUpdateRequest;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/email"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdminEmailValidateBeforeCall(String objectId, EmailUpdateRequest emailUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateAdminEmail(Async)");
        }

        return updateAdminEmailCall(objectId, emailUpdateRequest, _callback);

    }


    private ApiResponse<Account> updateAdminEmailWithHttpInfo(String objectId, EmailUpdateRequest emailUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAdminEmailValidateBeforeCall(objectId, emailUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdminEmailAsync(String objectId, EmailUpdateRequest emailUpdateRequest, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdminEmailValidateBeforeCall(objectId, emailUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdminEmailRequestBuilder {
        private final String newEmail;
        private final String objectId;
        private String codeType;

        private UpdateAdminEmailRequestBuilder(String newEmail, String objectId) {
            this.newEmail = newEmail;
            this.objectId = objectId;
        }

        /**
         * Set codeType
         * @param codeType  (optional)
         * @return UpdateAdminEmailRequestBuilder
         */
        public UpdateAdminEmailRequestBuilder codeType(String codeType) {
            this.codeType = codeType;
            return this;
        }
        
        /**
         * Build call for updateAdminEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateAdminEmailCall(objectId, emailUpdateRequest, _callback);
        }

        private EmailUpdateRequest buildBodyParams() {
            EmailUpdateRequest emailUpdateRequest = new EmailUpdateRequest();
            emailUpdateRequest.newEmail(this.newEmail);
            emailUpdateRequest.codeType(this.codeType);
            return emailUpdateRequest;
        }

        /**
         * Execute updateAdminEmail request
         * @return Account
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Account execute() throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            ApiResponse<Account> localVarResp = updateAdminEmailWithHttpInfo(objectId, emailUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdminEmail request with HTTP info returned
         * @return ApiResponse&lt;Account&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Account> executeWithHttpInfo() throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateAdminEmailWithHttpInfo(objectId, emailUpdateRequest);
        }

        /**
         * Execute updateAdminEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Account> _callback) throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateAdminEmailAsync(objectId, emailUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateAdminEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdminEmailRequestBuilder updateAdminEmail(String newEmail, String objectId) throws IllegalArgumentException {
        if (newEmail == null) throw new IllegalArgumentException("\"newEmail\" is required but got null");
            

        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateAdminEmailRequestBuilder(newEmail, objectId);
    }
    private okhttp3.Call updateEmailConfirmationCall(EmailUpdateConfirmation emailUpdateConfirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailUpdateConfirmation;

        // create path and map variables
        String localVarPath = "/basic/accounts/email-update/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailConfirmationValidateBeforeCall(EmailUpdateConfirmation emailUpdateConfirmation, final ApiCallback _callback) throws ApiException {
        return updateEmailConfirmationCall(emailUpdateConfirmation, _callback);

    }


    private ApiResponse<EmptyResponse> updateEmailConfirmationWithHttpInfo(EmailUpdateConfirmation emailUpdateConfirmation) throws ApiException {
        okhttp3.Call localVarCall = updateEmailConfirmationValidateBeforeCall(emailUpdateConfirmation, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmailConfirmationAsync(EmailUpdateConfirmation emailUpdateConfirmation, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailConfirmationValidateBeforeCall(emailUpdateConfirmation, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmailConfirmationRequestBuilder {
        private final String code;
        private final String password;

        private UpdateEmailConfirmationRequestBuilder(String code, String password) {
            this.code = code;
            this.password = password;
        }

        /**
         * Build call for updateEmailConfirmation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailUpdateConfirmation emailUpdateConfirmation = buildBodyParams();
            return updateEmailConfirmationCall(emailUpdateConfirmation, _callback);
        }

        private EmailUpdateConfirmation buildBodyParams() {
            EmailUpdateConfirmation emailUpdateConfirmation = new EmailUpdateConfirmation();
            emailUpdateConfirmation.code(this.code);
            emailUpdateConfirmation.password(this.password);
            return emailUpdateConfirmation;
        }

        /**
         * Execute updateEmailConfirmation request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            EmailUpdateConfirmation emailUpdateConfirmation = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateEmailConfirmationWithHttpInfo(emailUpdateConfirmation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmailConfirmation request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            EmailUpdateConfirmation emailUpdateConfirmation = buildBodyParams();
            return updateEmailConfirmationWithHttpInfo(emailUpdateConfirmation);
        }

        /**
         * Execute updateEmailConfirmation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            EmailUpdateConfirmation emailUpdateConfirmation = buildBodyParams();
            return updateEmailConfirmationAsync(emailUpdateConfirmation, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateEmailConfirmationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailConfirmationRequestBuilder updateEmailConfirmation(String code, String password) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new UpdateEmailConfirmationRequestBuilder(code, password);
    }
    private okhttp3.Call updateEmailInitCall(EmailUpdateRequest emailUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailUpdateRequest;

        // create path and map variables
        String localVarPath = "/basic/accounts/email-update/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailInitValidateBeforeCall(EmailUpdateRequest emailUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateEmailInitCall(emailUpdateRequest, _callback);

    }


    private ApiResponse<EmptyResponse> updateEmailInitWithHttpInfo(EmailUpdateRequest emailUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmailInitValidateBeforeCall(emailUpdateRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmailInitAsync(EmailUpdateRequest emailUpdateRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailInitValidateBeforeCall(emailUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmailInitRequestBuilder {
        private final String newEmail;
        private String codeType;

        private UpdateEmailInitRequestBuilder(String newEmail) {
            this.newEmail = newEmail;
        }

        /**
         * Set codeType
         * @param codeType  (optional)
         * @return UpdateEmailInitRequestBuilder
         */
        public UpdateEmailInitRequestBuilder codeType(String codeType) {
            this.codeType = codeType;
            return this;
        }
        
        /**
         * Build call for updateEmailInit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateEmailInitCall(emailUpdateRequest, _callback);
        }

        private EmailUpdateRequest buildBodyParams() {
            EmailUpdateRequest emailUpdateRequest = new EmailUpdateRequest();
            emailUpdateRequest.newEmail(this.newEmail);
            emailUpdateRequest.codeType(this.codeType);
            return emailUpdateRequest;
        }

        /**
         * Execute updateEmailInit request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateEmailInitWithHttpInfo(emailUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmailInit request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateEmailInitWithHttpInfo(emailUpdateRequest);
        }

        /**
         * Execute updateEmailInit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            EmailUpdateRequest emailUpdateRequest = buildBodyParams();
            return updateEmailInitAsync(emailUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateEmailInitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailInitRequestBuilder updateEmailInit(String newEmail) throws IllegalArgumentException {
        if (newEmail == null) throw new IllegalArgumentException("\"newEmail\" is required but got null");
            

        return new UpdateEmailInitRequestBuilder(newEmail);
    }
    private okhttp3.Call updateMailContentCall(UpdateMailRequest updateMailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMailRequest;

        // create path and map variables
        String localVarPath = "/basic/mail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMailContentValidateBeforeCall(UpdateMailRequest updateMailRequest, final ApiCallback _callback) throws ApiException {
        return updateMailContentCall(updateMailRequest, _callback);

    }


    private ApiResponse<MailSuccessResponse> updateMailContentWithHttpInfo(UpdateMailRequest updateMailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMailContentValidateBeforeCall(updateMailRequest, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMailContentAsync(UpdateMailRequest updateMailRequest, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMailContentValidateBeforeCall(updateMailRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMailContentRequestBuilder {
        private final Integer mailId;
        private String body;
        private String expires;
        private String subject;
        private String state;
        private String category;
        private Boolean acceptAttachments;

        private UpdateMailContentRequestBuilder(Integer mailId) {
            this.mailId = mailId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set expires
         * @param expires  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder expires(String expires) {
            this.expires = expires;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set acceptAttachments
         * @param acceptAttachments  (optional)
         * @return UpdateMailContentRequestBuilder
         */
        public UpdateMailContentRequestBuilder acceptAttachments(Boolean acceptAttachments) {
            this.acceptAttachments = acceptAttachments;
            return this;
        }
        
        /**
         * Build call for updateMailContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateMailContentCall(updateMailRequest, _callback);
        }

        private UpdateMailRequest buildBodyParams() {
            UpdateMailRequest updateMailRequest = new UpdateMailRequest();
            updateMailRequest.body(this.body);
            updateMailRequest.expires(this.expires);
            updateMailRequest.subject(this.subject);
            updateMailRequest.state(this.state);
            updateMailRequest.mailId(this.mailId);
            updateMailRequest.category(this.category);
            updateMailRequest.acceptAttachments(this.acceptAttachments);
            return updateMailRequest;
        }

        /**
         * Execute updateMailContent request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = updateMailContentWithHttpInfo(updateMailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMailContent request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateMailContentWithHttpInfo(updateMailRequest);
        }

        /**
         * Execute updateMailContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateMailContentAsync(updateMailRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateMailContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMailContentRequestBuilder updateMailContent(Integer mailId) throws IllegalArgumentException {
        if (mailId == null) throw new IllegalArgumentException("\"mailId\" is required but got null");
        return new UpdateMailContentRequestBuilder(mailId);
    }
    private okhttp3.Call updateObjectBulkCall(String objectId, BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateMailObjectRequest;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}/bulk"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectBulkValidateBeforeCall(String objectId, BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectBulk(Async)");
        }

        return updateObjectBulkCall(objectId, bulkUpdateMailObjectRequest, _callback);

    }


    private ApiResponse<MailSuccessResponse> updateObjectBulkWithHttpInfo(String objectId, BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateObjectBulkValidateBeforeCall(objectId, bulkUpdateMailObjectRequest, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectBulkAsync(String objectId, BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectBulkValidateBeforeCall(objectId, bulkUpdateMailObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectBulkRequestBuilder {
        private final String objectId;
        private List<MyMailUpdate> updateMailRequests;

        private UpdateObjectBulkRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set updateMailRequests
         * @param updateMailRequests  (optional)
         * @return UpdateObjectBulkRequestBuilder
         */
        public UpdateObjectBulkRequestBuilder updateMailRequests(List<MyMailUpdate> updateMailRequests) {
            this.updateMailRequests = updateMailRequests;
            return this;
        }
        
        /**
         * Build call for updateObjectBulk
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest = buildBodyParams();
            return updateObjectBulkCall(objectId, bulkUpdateMailObjectRequest, _callback);
        }

        private BulkUpdateMailObjectRequest buildBodyParams() {
            BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest = new BulkUpdateMailObjectRequest();
            bulkUpdateMailObjectRequest.updateMailRequests(this.updateMailRequests);
            return bulkUpdateMailObjectRequest;
        }

        /**
         * Execute updateObjectBulk request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = updateObjectBulkWithHttpInfo(objectId, bulkUpdateMailObjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObjectBulk request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest = buildBodyParams();
            return updateObjectBulkWithHttpInfo(objectId, bulkUpdateMailObjectRequest);
        }

        /**
         * Execute updateObjectBulk request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            BulkUpdateMailObjectRequest bulkUpdateMailObjectRequest = buildBodyParams();
            return updateObjectBulkAsync(objectId, bulkUpdateMailObjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateObjectBulkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectBulkRequestBuilder updateObjectBulk(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateObjectBulkRequestBuilder(objectId);
    }
    private okhttp3.Call updateObjectMailCall(String objectId, UpdateMailRequest updateMailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMailRequest;

        // create path and map variables
        String localVarPath = "/object/mail/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectMailValidateBeforeCall(String objectId, UpdateMailRequest updateMailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectMail(Async)");
        }

        return updateObjectMailCall(objectId, updateMailRequest, _callback);

    }


    private ApiResponse<MailSuccessResponse> updateObjectMailWithHttpInfo(String objectId, UpdateMailRequest updateMailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateObjectMailValidateBeforeCall(objectId, updateMailRequest, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectMailAsync(String objectId, UpdateMailRequest updateMailRequest, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectMailValidateBeforeCall(objectId, updateMailRequest, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectMailRequestBuilder {
        private final Integer mailId;
        private final String objectId;
        private String body;
        private String expires;
        private String subject;
        private String state;
        private String category;
        private Boolean acceptAttachments;

        private UpdateObjectMailRequestBuilder(Integer mailId, String objectId) {
            this.mailId = mailId;
            this.objectId = objectId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set expires
         * @param expires  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder expires(String expires) {
            this.expires = expires;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set acceptAttachments
         * @param acceptAttachments  (optional)
         * @return UpdateObjectMailRequestBuilder
         */
        public UpdateObjectMailRequestBuilder acceptAttachments(Boolean acceptAttachments) {
            this.acceptAttachments = acceptAttachments;
            return this;
        }
        
        /**
         * Build call for updateObjectMail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateObjectMailCall(objectId, updateMailRequest, _callback);
        }

        private UpdateMailRequest buildBodyParams() {
            UpdateMailRequest updateMailRequest = new UpdateMailRequest();
            updateMailRequest.body(this.body);
            updateMailRequest.expires(this.expires);
            updateMailRequest.subject(this.subject);
            updateMailRequest.state(this.state);
            updateMailRequest.mailId(this.mailId);
            updateMailRequest.category(this.category);
            updateMailRequest.acceptAttachments(this.acceptAttachments);
            return updateMailRequest;
        }

        /**
         * Execute updateObjectMail request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = updateObjectMailWithHttpInfo(objectId, updateMailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObjectMail request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateObjectMailWithHttpInfo(objectId, updateMailRequest);
        }

        /**
         * Execute updateObjectMail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            UpdateMailRequest updateMailRequest = buildBodyParams();
            return updateObjectMailAsync(objectId, updateMailRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateObjectMailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectMailRequestBuilder updateObjectMail(Integer mailId, String objectId) throws IllegalArgumentException {
        if (mailId == null) throw new IllegalArgumentException("\"mailId\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateObjectMailRequestBuilder(mailId, objectId);
    }
    private okhttp3.Call uploadAttachmentCall(AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptMultipleAttachments;

        // create path and map variables
        String localVarPath = "/basic/mail/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAttachmentValidateBeforeCall(AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback _callback) throws ApiException {
        return uploadAttachmentCall(acceptMultipleAttachments, _callback);

    }


    private ApiResponse<MailSuccessResponse> uploadAttachmentWithHttpInfo(AcceptMultipleAttachments acceptMultipleAttachments) throws ApiException {
        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(acceptMultipleAttachments, null);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAttachmentAsync(AcceptMultipleAttachments acceptMultipleAttachments, final ApiCallback<MailSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(acceptMultipleAttachments, _callback);
        Type localVarReturnType = new TypeToken<MailSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadAttachmentRequestBuilder {
        private List<Integer> mailIds;

        private UploadAttachmentRequestBuilder() {
        }

        /**
         * Set mailIds
         * @param mailIds  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder mailIds(List<Integer> mailIds) {
            this.mailIds = mailIds;
            return this;
        }
        
        /**
         * Build call for uploadAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return uploadAttachmentCall(acceptMultipleAttachments, _callback);
        }

        private AcceptMultipleAttachments buildBodyParams() {
            AcceptMultipleAttachments acceptMultipleAttachments = new AcceptMultipleAttachments();
            acceptMultipleAttachments.mailIds(this.mailIds);
            return acceptMultipleAttachments;
        }

        /**
         * Execute uploadAttachment request
         * @return MailSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MailSuccessResponse execute() throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            ApiResponse<MailSuccessResponse> localVarResp = uploadAttachmentWithHttpInfo(acceptMultipleAttachments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadAttachment request with HTTP info returned
         * @return ApiResponse&lt;MailSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MailSuccessResponse> executeWithHttpInfo() throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return uploadAttachmentWithHttpInfo(acceptMultipleAttachments);
        }

        /**
         * Execute uploadAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MailSuccessResponse> _callback) throws ApiException {
            AcceptMultipleAttachments acceptMultipleAttachments = buildBodyParams();
            return uploadAttachmentAsync(acceptMultipleAttachments, _callback);
        }
    }

    /**
     * 
     * 
     * @return UploadAttachmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UploadAttachmentRequestBuilder uploadAttachment() throws IllegalArgumentException {
        return new UploadAttachmentRequestBuilder();
    }
}
