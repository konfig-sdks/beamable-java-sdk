/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchReadStatsResponse;
import com.konfigthis.client.model.BatchSetStatsRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.StatUpdateRequest;
import com.konfigthis.client.model.StatsSearchCriteria;
import com.konfigthis.client.model.StatsSearchRequest;
import com.konfigthis.client.model.StatsSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatisticApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call batchPostCall(BatchSetStatsRequest batchSetStatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchSetStatsRequest;

        // create path and map variables
        String localVarPath = "/basic/stats/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchPostValidateBeforeCall(BatchSetStatsRequest batchSetStatsRequest, final ApiCallback _callback) throws ApiException {
        return batchPostCall(batchSetStatsRequest, _callback);

    }


    private ApiResponse<EmptyResponse> batchPostWithHttpInfo(BatchSetStatsRequest batchSetStatsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchPostValidateBeforeCall(batchSetStatsRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchPostAsync(BatchSetStatsRequest batchSetStatsRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchPostValidateBeforeCall(batchSetStatsRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchPostRequestBuilder {
        private List<StatUpdateRequest> updates;

        private BatchPostRequestBuilder() {
        }

        /**
         * Set updates
         * @param updates  (optional)
         * @return BatchPostRequestBuilder
         */
        public BatchPostRequestBuilder updates(List<StatUpdateRequest> updates) {
            this.updates = updates;
            return this;
        }
        
        /**
         * Build call for batchPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchSetStatsRequest batchSetStatsRequest = buildBodyParams();
            return batchPostCall(batchSetStatsRequest, _callback);
        }

        private BatchSetStatsRequest buildBodyParams() {
            BatchSetStatsRequest batchSetStatsRequest = new BatchSetStatsRequest();
            batchSetStatsRequest.updates(this.updates);
            return batchSetStatsRequest;
        }

        /**
         * Execute batchPost request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            BatchSetStatsRequest batchSetStatsRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = batchPostWithHttpInfo(batchSetStatsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchPost request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            BatchSetStatsRequest batchSetStatsRequest = buildBodyParams();
            return batchPostWithHttpInfo(batchSetStatsRequest);
        }

        /**
         * Execute batchPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            BatchSetStatsRequest batchSetStatsRequest = buildBodyParams();
            return batchPostAsync(batchSetStatsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return BatchPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BatchPostRequestBuilder batchPost() throws IllegalArgumentException {
        return new BatchPostRequestBuilder();
    }
    private okhttp3.Call getClientBatchStatsCall(String objectIds, String stats, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/stats/client/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objectIds", objectIds));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientBatchStatsValidateBeforeCall(String objectIds, String stats, String format, final ApiCallback _callback) throws ApiException {
        return getClientBatchStatsCall(objectIds, stats, format, _callback);

    }


    private ApiResponse<BatchReadStatsResponse> getClientBatchStatsWithHttpInfo(String objectIds, String stats, String format) throws ApiException {
        okhttp3.Call localVarCall = getClientBatchStatsValidateBeforeCall(objectIds, stats, format, null);
        Type localVarReturnType = new TypeToken<BatchReadStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientBatchStatsAsync(String objectIds, String stats, String format, final ApiCallback<BatchReadStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientBatchStatsValidateBeforeCall(objectIds, stats, format, _callback);
        Type localVarReturnType = new TypeToken<BatchReadStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientBatchStatsRequestBuilder {
        private String objectIds;
        private String stats;
        private String format;

        private GetClientBatchStatsRequestBuilder() {
        }

        /**
         * Set objectIds
         * @param objectIds  (optional)
         * @return GetClientBatchStatsRequestBuilder
         */
        public GetClientBatchStatsRequestBuilder objectIds(String objectIds) {
            this.objectIds = objectIds;
            return this;
        }
        
        /**
         * Set stats
         * @param stats  (optional)
         * @return GetClientBatchStatsRequestBuilder
         */
        public GetClientBatchStatsRequestBuilder stats(String stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return GetClientBatchStatsRequestBuilder
         */
        public GetClientBatchStatsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getClientBatchStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientBatchStatsCall(objectIds, stats, format, _callback);
        }


        /**
         * Execute getClientBatchStats request
         * @return BatchReadStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BatchReadStatsResponse execute() throws ApiException {
            ApiResponse<BatchReadStatsResponse> localVarResp = getClientBatchStatsWithHttpInfo(objectIds, stats, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientBatchStats request with HTTP info returned
         * @return ApiResponse&lt;BatchReadStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchReadStatsResponse> executeWithHttpInfo() throws ApiException {
            return getClientBatchStatsWithHttpInfo(objectIds, stats, format);
        }

        /**
         * Execute getClientBatchStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchReadStatsResponse> _callback) throws ApiException {
            return getClientBatchStatsAsync(objectIds, stats, format, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetClientBatchStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetClientBatchStatsRequestBuilder getClientBatchStats() throws IllegalArgumentException {
        return new GetClientBatchStatsRequestBuilder();
    }
    private okhttp3.Call searchDataCall(StatsSearchRequest statsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statsSearchRequest;

        // create path and map variables
        String localVarPath = "/basic/stats/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDataValidateBeforeCall(StatsSearchRequest statsSearchRequest, final ApiCallback _callback) throws ApiException {
        return searchDataCall(statsSearchRequest, _callback);

    }


    private ApiResponse<StatsSearchResponse> searchDataWithHttpInfo(StatsSearchRequest statsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchDataValidateBeforeCall(statsSearchRequest, null);
        Type localVarReturnType = new TypeToken<StatsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchDataAsync(StatsSearchRequest statsSearchRequest, final ApiCallback<StatsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDataValidateBeforeCall(statsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<StatsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchDataRequestBuilder {
        private String domain;
        private String access;
        private String objectType;
        private List<StatsSearchCriteria> criteria;

        private SearchDataRequestBuilder() {
        }

        /**
         * Set domain
         * @param domain  (optional)
         * @return SearchDataRequestBuilder
         */
        public SearchDataRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set access
         * @param access  (optional)
         * @return SearchDataRequestBuilder
         */
        public SearchDataRequestBuilder access(String access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set objectType
         * @param objectType  (optional)
         * @return SearchDataRequestBuilder
         */
        public SearchDataRequestBuilder objectType(String objectType) {
            this.objectType = objectType;
            return this;
        }
        
        /**
         * Set criteria
         * @param criteria  (optional)
         * @return SearchDataRequestBuilder
         */
        public SearchDataRequestBuilder criteria(List<StatsSearchCriteria> criteria) {
            this.criteria = criteria;
            return this;
        }
        
        /**
         * Build call for searchData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatsSearchRequest statsSearchRequest = buildBodyParams();
            return searchDataCall(statsSearchRequest, _callback);
        }

        private StatsSearchRequest buildBodyParams() {
            StatsSearchRequest statsSearchRequest = new StatsSearchRequest();
            statsSearchRequest.domain(this.domain);
            statsSearchRequest.access(this.access);
            statsSearchRequest.objectType(this.objectType);
            statsSearchRequest.criteria(this.criteria);
            return statsSearchRequest;
        }

        /**
         * Execute searchData request
         * @return StatsSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public StatsSearchResponse execute() throws ApiException {
            StatsSearchRequest statsSearchRequest = buildBodyParams();
            ApiResponse<StatsSearchResponse> localVarResp = searchDataWithHttpInfo(statsSearchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchData request with HTTP info returned
         * @return ApiResponse&lt;StatsSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsSearchResponse> executeWithHttpInfo() throws ApiException {
            StatsSearchRequest statsSearchRequest = buildBodyParams();
            return searchDataWithHttpInfo(statsSearchRequest);
        }

        /**
         * Execute searchData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsSearchResponse> _callback) throws ApiException {
            StatsSearchRequest statsSearchRequest = buildBodyParams();
            return searchDataAsync(statsSearchRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SearchDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchDataRequestBuilder searchData() throws IllegalArgumentException {
        return new SearchDataRequestBuilder();
    }
}
