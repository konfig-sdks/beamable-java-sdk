/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActiveListingResponse;
import com.konfigthis.client.model.CalendarClaimRequest;
import com.konfigthis.client.model.CalendarQueryResponse;
import com.konfigthis.client.model.ClearStatusRequest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateRoomRequest;
import com.konfigthis.client.model.CreateRoomResponse;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.EndTransactionRequest;
import com.konfigthis.client.model.GetActiveOffersResponse;
import com.konfigthis.client.model.GetRoomsResponse;
import com.konfigthis.client.model.GetTotalCouponResponse;
import com.konfigthis.client.model.GiveCouponReq;
import com.konfigthis.client.model.InventoryQueryRequest;
import com.konfigthis.client.model.InventoryUpdateRequest;
import com.konfigthis.client.model.InventoryView;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.ItemDeleteRequest;
import com.konfigthis.client.model.ItemUpdateRequest;
import com.konfigthis.client.model.LeaveRoomRequest;
import com.konfigthis.client.model.LeaveRoomResponse;
import com.konfigthis.client.model.MatchUpdate;
import com.konfigthis.client.model.MultipliersGetResponse;
import com.konfigthis.client.model.PreviewVipBonusResponse;
import com.konfigthis.client.model.PurchaseRequest;
import com.konfigthis.client.model.ReportPurchaseRequest;
import com.konfigthis.client.model.ResultResponse;
import com.konfigthis.client.model.StatRequest;
import com.konfigthis.client.model.StatStringListEntry;
import com.konfigthis.client.model.StatSubscriptionNotification;
import com.konfigthis.client.model.StatUpdateRequest;
import com.konfigthis.client.model.StatUpdateRequestStringListFormat;
import com.konfigthis.client.model.StatsResponse;
import com.konfigthis.client.model.TransferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call claimCalendarCall(String objectId, CalendarClaimRequest calendarClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calendarClaimRequest;

        // create path and map variables
        String localVarPath = "/object/calendars/{objectId}/claim"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimCalendarValidateBeforeCall(String objectId, CalendarClaimRequest calendarClaimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling claimCalendar(Async)");
        }

        return claimCalendarCall(objectId, calendarClaimRequest, _callback);

    }


    private ApiResponse<CommonResponse> claimCalendarWithHttpInfo(String objectId, CalendarClaimRequest calendarClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = claimCalendarValidateBeforeCall(objectId, calendarClaimRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call claimCalendarAsync(String objectId, CalendarClaimRequest calendarClaimRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimCalendarValidateBeforeCall(objectId, calendarClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClaimCalendarRequestBuilder {
        private final String objectId;
        private String id;

        private ClaimCalendarRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set id
         * @param id  (optional)
         * @return ClaimCalendarRequestBuilder
         */
        public ClaimCalendarRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for claimCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CalendarClaimRequest calendarClaimRequest = buildBodyParams();
            return claimCalendarCall(objectId, calendarClaimRequest, _callback);
        }

        private CalendarClaimRequest buildBodyParams() {
            CalendarClaimRequest calendarClaimRequest = new CalendarClaimRequest();
            calendarClaimRequest.id(this.id);
            return calendarClaimRequest;
        }

        /**
         * Execute claimCalendar request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            CalendarClaimRequest calendarClaimRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = claimCalendarWithHttpInfo(objectId, calendarClaimRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute claimCalendar request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            CalendarClaimRequest calendarClaimRequest = buildBodyParams();
            return claimCalendarWithHttpInfo(objectId, calendarClaimRequest);
        }

        /**
         * Execute claimCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            CalendarClaimRequest calendarClaimRequest = buildBodyParams();
            return claimCalendarAsync(objectId, calendarClaimRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return ClaimCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ClaimCalendarRequestBuilder claimCalendar(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new ClaimCalendarRequestBuilder(objectId);
    }
    private okhttp3.Call createChatRoomCall(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRoomRequest;

        // create path and map variables
        String localVarPath = "/object/chatV2/{objectId}/rooms"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChatRoomValidateBeforeCall(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createChatRoom(Async)");
        }

        return createChatRoomCall(objectId, createRoomRequest, _callback);

    }


    private ApiResponse<CreateRoomResponse> createChatRoomWithHttpInfo(String objectId, CreateRoomRequest createRoomRequest) throws ApiException {
        okhttp3.Call localVarCall = createChatRoomValidateBeforeCall(objectId, createRoomRequest, null);
        Type localVarReturnType = new TypeToken<CreateRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChatRoomAsync(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback<CreateRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChatRoomValidateBeforeCall(objectId, createRoomRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChatRoomRequestBuilder {
        private final Boolean keepSubscribed;
        private final String objectId;
        private String roomName;
        private List<Integer> players;
        private String gameType;
        private List<Integer> dbids;

        private CreateChatRoomRequestBuilder(Boolean keepSubscribed, String objectId) {
            this.keepSubscribed = keepSubscribed;
            this.objectId = objectId;
        }

        /**
         * Set roomName
         * @param roomName  (optional)
         * @return CreateChatRoomRequestBuilder
         */
        public CreateChatRoomRequestBuilder roomName(String roomName) {
            this.roomName = roomName;
            return this;
        }
        
        /**
         * Set players
         * @param players  (optional)
         * @return CreateChatRoomRequestBuilder
         */
        public CreateChatRoomRequestBuilder players(List<Integer> players) {
            this.players = players;
            return this;
        }
        
        /**
         * Set gameType
         * @param gameType  (optional)
         * @return CreateChatRoomRequestBuilder
         */
        public CreateChatRoomRequestBuilder gameType(String gameType) {
            this.gameType = gameType;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return CreateChatRoomRequestBuilder
         */
        public CreateChatRoomRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for createChatRoom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return createChatRoomCall(objectId, createRoomRequest, _callback);
        }

        private CreateRoomRequest buildBodyParams() {
            CreateRoomRequest createRoomRequest = new CreateRoomRequest();
            createRoomRequest.roomName(this.roomName);
            createRoomRequest.keepSubscribed(this.keepSubscribed);
            createRoomRequest.players(this.players);
            createRoomRequest.gameType(this.gameType);
            createRoomRequest.dbids(this.dbids);
            return createRoomRequest;
        }

        /**
         * Execute createChatRoom request
         * @return CreateRoomResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CreateRoomResponse execute() throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            ApiResponse<CreateRoomResponse> localVarResp = createChatRoomWithHttpInfo(objectId, createRoomRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChatRoom request with HTTP info returned
         * @return ApiResponse&lt;CreateRoomResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateRoomResponse> executeWithHttpInfo() throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return createChatRoomWithHttpInfo(objectId, createRoomRequest);
        }

        /**
         * Execute createChatRoom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateRoomResponse> _callback) throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return createChatRoomAsync(objectId, createRoomRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateChatRoomRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateChatRoomRequestBuilder createChatRoom(Boolean keepSubscribed, String objectId) throws IllegalArgumentException {
        if (keepSubscribed == null) throw new IllegalArgumentException("\"keepSubscribed\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateChatRoomRequestBuilder(keepSubscribed, objectId);
    }
    private okhttp3.Call createCommerceCouponsCall(String objectId, GiveCouponReq giveCouponReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = giveCouponReq;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/coupons"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommerceCouponsValidateBeforeCall(String objectId, GiveCouponReq giveCouponReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createCommerceCoupons(Async)");
        }

        return createCommerceCouponsCall(objectId, giveCouponReq, _callback);

    }


    private ApiResponse<CommonResponse> createCommerceCouponsWithHttpInfo(String objectId, GiveCouponReq giveCouponReq) throws ApiException {
        okhttp3.Call localVarCall = createCommerceCouponsValidateBeforeCall(objectId, giveCouponReq, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCommerceCouponsAsync(String objectId, GiveCouponReq giveCouponReq, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommerceCouponsValidateBeforeCall(objectId, giveCouponReq, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCommerceCouponsRequestBuilder {
        private final String objectId;
        private String listing;

        private CreateCommerceCouponsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set listing
         * @param listing  (optional)
         * @return CreateCommerceCouponsRequestBuilder
         */
        public CreateCommerceCouponsRequestBuilder listing(String listing) {
            this.listing = listing;
            return this;
        }
        
        /**
         * Build call for createCommerceCoupons
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GiveCouponReq giveCouponReq = buildBodyParams();
            return createCommerceCouponsCall(objectId, giveCouponReq, _callback);
        }

        private GiveCouponReq buildBodyParams() {
            GiveCouponReq giveCouponReq = new GiveCouponReq();
            giveCouponReq.listing(this.listing);
            return giveCouponReq;
        }

        /**
         * Execute createCommerceCoupons request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            GiveCouponReq giveCouponReq = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createCommerceCouponsWithHttpInfo(objectId, giveCouponReq);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCommerceCoupons request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            GiveCouponReq giveCouponReq = buildBodyParams();
            return createCommerceCouponsWithHttpInfo(objectId, giveCouponReq);
        }

        /**
         * Execute createCommerceCoupons request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            GiveCouponReq giveCouponReq = buildBodyParams();
            return createCommerceCouponsAsync(objectId, giveCouponReq, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateCommerceCouponsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommerceCouponsRequestBuilder createCommerceCoupons(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateCommerceCouponsRequestBuilder(objectId);
    }
    private okhttp3.Call createInventoryObjectCall(String objectId, InventoryQueryRequest inventoryQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryQueryRequest;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInventoryObjectValidateBeforeCall(String objectId, InventoryQueryRequest inventoryQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createInventoryObject(Async)");
        }

        return createInventoryObjectCall(objectId, inventoryQueryRequest, _callback);

    }


    private ApiResponse<InventoryView> createInventoryObjectWithHttpInfo(String objectId, InventoryQueryRequest inventoryQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = createInventoryObjectValidateBeforeCall(objectId, inventoryQueryRequest, null);
        Type localVarReturnType = new TypeToken<InventoryView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInventoryObjectAsync(String objectId, InventoryQueryRequest inventoryQueryRequest, final ApiCallback<InventoryView> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInventoryObjectValidateBeforeCall(objectId, inventoryQueryRequest, _callback);
        Type localVarReturnType = new TypeToken<InventoryView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInventoryObjectRequestBuilder {
        private final String objectId;
        private List<String> scopes;

        private CreateInventoryObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set scopes
         * @param scopes  (optional)
         * @return CreateInventoryObjectRequestBuilder
         */
        public CreateInventoryObjectRequestBuilder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Build call for createInventoryObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InventoryQueryRequest inventoryQueryRequest = buildBodyParams();
            return createInventoryObjectCall(objectId, inventoryQueryRequest, _callback);
        }

        private InventoryQueryRequest buildBodyParams() {
            InventoryQueryRequest inventoryQueryRequest = new InventoryQueryRequest();
            inventoryQueryRequest.scopes(this.scopes);
            return inventoryQueryRequest;
        }

        /**
         * Execute createInventoryObject request
         * @return InventoryView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public InventoryView execute() throws ApiException {
            InventoryQueryRequest inventoryQueryRequest = buildBodyParams();
            ApiResponse<InventoryView> localVarResp = createInventoryObjectWithHttpInfo(objectId, inventoryQueryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInventoryObject request with HTTP info returned
         * @return ApiResponse&lt;InventoryView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InventoryView> executeWithHttpInfo() throws ApiException {
            InventoryQueryRequest inventoryQueryRequest = buildBodyParams();
            return createInventoryObjectWithHttpInfo(objectId, inventoryQueryRequest);
        }

        /**
         * Execute createInventoryObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InventoryView> _callback) throws ApiException {
            InventoryQueryRequest inventoryQueryRequest = buildBodyParams();
            return createInventoryObjectAsync(objectId, inventoryQueryRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateInventoryObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateInventoryObjectRequestBuilder createInventoryObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateInventoryObjectRequestBuilder(objectId);
    }
    private okhttp3.Call createObjectStatsCall(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statUpdateRequest;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectStatsValidateBeforeCall(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createObjectStats(Async)");
        }

        return createObjectStatsCall(objectId, statUpdateRequest, _callback);

    }


    private ApiResponse<EmptyResponse> createObjectStatsWithHttpInfo(String objectId, StatUpdateRequest statUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = createObjectStatsValidateBeforeCall(objectId, statUpdateRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createObjectStatsAsync(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectStatsValidateBeforeCall(objectId, statUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateObjectStatsRequestBuilder {
        private final String objectId;
        private String objectId;
        private Map<String, Object> set;
        private Map<String, Object> add;
        private Boolean emitAnalytics;

        private CreateObjectStatsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set objectId
         * @param objectId  (optional)
         * @return CreateObjectStatsRequestBuilder
         */
        public CreateObjectStatsRequestBuilder objectId(String objectId) {
            this.objectId = objectId;
            return this;
        }
        
        /**
         * Set set
         * @param set  (optional)
         * @return CreateObjectStatsRequestBuilder
         */
        public CreateObjectStatsRequestBuilder set(Map<String, Object> set) {
            this.set = set;
            return this;
        }
        
        /**
         * Set add
         * @param add  (optional)
         * @return CreateObjectStatsRequestBuilder
         */
        public CreateObjectStatsRequestBuilder add(Map<String, Object> add) {
            this.add = add;
            return this;
        }
        
        /**
         * Set emitAnalytics
         * @param emitAnalytics  (optional)
         * @return CreateObjectStatsRequestBuilder
         */
        public CreateObjectStatsRequestBuilder emitAnalytics(Boolean emitAnalytics) {
            this.emitAnalytics = emitAnalytics;
            return this;
        }
        
        /**
         * Build call for createObjectStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return createObjectStatsCall(objectId, statUpdateRequest, _callback);
        }

        private StatUpdateRequest buildBodyParams() {
            StatUpdateRequest statUpdateRequest = new StatUpdateRequest();
            statUpdateRequest.objectId(this.objectId);
            statUpdateRequest.set(this.set);
            statUpdateRequest.add(this.add);
            statUpdateRequest.emitAnalytics(this.emitAnalytics);
            return statUpdateRequest;
        }

        /**
         * Execute createObjectStats request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createObjectStatsWithHttpInfo(objectId, statUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createObjectStats request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return createObjectStatsWithHttpInfo(objectId, statUpdateRequest);
        }

        /**
         * Execute createObjectStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return createObjectStatsAsync(objectId, statUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateObjectStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateObjectStatsRequestBuilder createObjectStats(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateObjectStatsRequestBuilder(objectId);
    }
    private okhttp3.Call deleteRoomCall(String objectId, LeaveRoomRequest leaveRoomRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveRoomRequest;

        // create path and map variables
        String localVarPath = "/object/chatV2/{objectId}/rooms"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoomValidateBeforeCall(String objectId, LeaveRoomRequest leaveRoomRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteRoom(Async)");
        }

        return deleteRoomCall(objectId, leaveRoomRequest, _callback);

    }


    private ApiResponse<LeaveRoomResponse> deleteRoomWithHttpInfo(String objectId, LeaveRoomRequest leaveRoomRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteRoomValidateBeforeCall(objectId, leaveRoomRequest, null);
        Type localVarReturnType = new TypeToken<LeaveRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRoomAsync(String objectId, LeaveRoomRequest leaveRoomRequest, final ApiCallback<LeaveRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoomValidateBeforeCall(objectId, leaveRoomRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRoomRequestBuilder {
        private final String objectId;
        private String roomId;

        private DeleteRoomRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set roomId
         * @param roomId  (optional)
         * @return DeleteRoomRequestBuilder
         */
        public DeleteRoomRequestBuilder roomId(String roomId) {
            this.roomId = roomId;
            return this;
        }
        
        /**
         * Build call for deleteRoom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveRoomRequest leaveRoomRequest = buildBodyParams();
            return deleteRoomCall(objectId, leaveRoomRequest, _callback);
        }

        private LeaveRoomRequest buildBodyParams() {
            LeaveRoomRequest leaveRoomRequest = new LeaveRoomRequest();
            leaveRoomRequest.roomId(this.roomId);
            return leaveRoomRequest;
        }

        /**
         * Execute deleteRoom request
         * @return LeaveRoomResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaveRoomResponse execute() throws ApiException {
            LeaveRoomRequest leaveRoomRequest = buildBodyParams();
            ApiResponse<LeaveRoomResponse> localVarResp = deleteRoomWithHttpInfo(objectId, leaveRoomRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRoom request with HTTP info returned
         * @return ApiResponse&lt;LeaveRoomResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveRoomResponse> executeWithHttpInfo() throws ApiException {
            LeaveRoomRequest leaveRoomRequest = buildBodyParams();
            return deleteRoomWithHttpInfo(objectId, leaveRoomRequest);
        }

        /**
         * Execute deleteRoom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveRoomResponse> _callback) throws ApiException {
            LeaveRoomRequest leaveRoomRequest = buildBodyParams();
            return deleteRoomAsync(objectId, leaveRoomRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteRoomRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoomRequestBuilder deleteRoom(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteRoomRequestBuilder(objectId);
    }
    private okhttp3.Call deleteStatsObjectCall(String objectId, StatRequest statRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statRequest;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStatsObjectValidateBeforeCall(String objectId, StatRequest statRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteStatsObject(Async)");
        }

        return deleteStatsObjectCall(objectId, statRequest, _callback);

    }


    private ApiResponse<EmptyResponse> deleteStatsObjectWithHttpInfo(String objectId, StatRequest statRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteStatsObjectValidateBeforeCall(objectId, statRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteStatsObjectAsync(String objectId, StatRequest statRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStatsObjectValidateBeforeCall(objectId, statRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteStatsObjectRequestBuilder {
        private final String objectId;
        private String stats;

        private DeleteStatsObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set stats
         * @param stats  (optional)
         * @return DeleteStatsObjectRequestBuilder
         */
        public DeleteStatsObjectRequestBuilder stats(String stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Build call for deleteStatsObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatRequest statRequest = buildBodyParams();
            return deleteStatsObjectCall(objectId, statRequest, _callback);
        }

        private StatRequest buildBodyParams() {
            StatRequest statRequest = new StatRequest();
            statRequest.stats(this.stats);
            return statRequest;
        }

        /**
         * Execute deleteStatsObject request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            StatRequest statRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = deleteStatsObjectWithHttpInfo(objectId, statRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteStatsObject request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            StatRequest statRequest = buildBodyParams();
            return deleteStatsObjectWithHttpInfo(objectId, statRequest);
        }

        /**
         * Execute deleteStatsObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            StatRequest statRequest = buildBodyParams();
            return deleteStatsObjectAsync(objectId, statRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteStatsObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStatsObjectRequestBuilder deleteStatsObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteStatsObjectRequestBuilder(objectId);
    }
    private okhttp3.Call deleteStatusByIdCall(String objectId, ClearStatusRequest clearStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clearStatusRequest;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/status"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStatusByIdValidateBeforeCall(String objectId, ClearStatusRequest clearStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteStatusById(Async)");
        }

        return deleteStatusByIdCall(objectId, clearStatusRequest, _callback);

    }


    private ApiResponse<CommonResponse> deleteStatusByIdWithHttpInfo(String objectId, ClearStatusRequest clearStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteStatusByIdValidateBeforeCall(objectId, clearStatusRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteStatusByIdAsync(String objectId, ClearStatusRequest clearStatusRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStatusByIdValidateBeforeCall(objectId, clearStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteStatusByIdRequestBuilder {
        private final String objectId;
        private String store;

        private DeleteStatusByIdRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set store
         * @param store  (optional)
         * @return DeleteStatusByIdRequestBuilder
         */
        public DeleteStatusByIdRequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Build call for deleteStatusById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClearStatusRequest clearStatusRequest = buildBodyParams();
            return deleteStatusByIdCall(objectId, clearStatusRequest, _callback);
        }

        private ClearStatusRequest buildBodyParams() {
            ClearStatusRequest clearStatusRequest = new ClearStatusRequest();
            clearStatusRequest.store(this.store);
            return clearStatusRequest;
        }

        /**
         * Execute deleteStatusById request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ClearStatusRequest clearStatusRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = deleteStatusByIdWithHttpInfo(objectId, clearStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteStatusById request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            ClearStatusRequest clearStatusRequest = buildBodyParams();
            return deleteStatusByIdWithHttpInfo(objectId, clearStatusRequest);
        }

        /**
         * Execute deleteStatusById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            ClearStatusRequest clearStatusRequest = buildBodyParams();
            return deleteStatusByIdAsync(objectId, clearStatusRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteStatusByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStatusByIdRequestBuilder deleteStatusById(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteStatusByIdRequestBuilder(objectId);
    }
    private okhttp3.Call getByIdCall(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getById(Async)");
        }

        return getByIdCall(objectId, scope, _callback);

    }


    private ApiResponse<GetActiveOffersResponse> getByIdWithHttpInfo(String objectId, String scope) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(objectId, scope, null);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String objectId, String scope, final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(objectId, scope, _callback);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String objectId;
        private String scope;

        private GetByIdRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set scope
         * @param scope  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(objectId, scope, _callback);
        }


        /**
         * Execute getById request
         * @return GetActiveOffersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetActiveOffersResponse execute() throws ApiException {
            ApiResponse<GetActiveOffersResponse> localVarResp = getByIdWithHttpInfo(objectId, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;GetActiveOffersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetActiveOffersResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(objectId, scope);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {
            return getByIdAsync(objectId, scope, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetByIdRequestBuilder(objectId);
    }
    private okhttp3.Call getCalendarsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/calendars/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getCalendars(Async)");
        }

        return getCalendarsCall(objectId, _callback);

    }


    private ApiResponse<CalendarQueryResponse> getCalendarsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getCalendarsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CalendarQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalendarsAsync(String objectId, final ApiCallback<CalendarQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CalendarQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCalendarsRequestBuilder {
        private final String objectId;

        private GetCalendarsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getCalendars
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalendarsCall(objectId, _callback);
        }


        /**
         * Execute getCalendars request
         * @return CalendarQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CalendarQueryResponse execute() throws ApiException {
            ApiResponse<CalendarQueryResponse> localVarResp = getCalendarsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCalendars request with HTTP info returned
         * @return ApiResponse&lt;CalendarQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalendarQueryResponse> executeWithHttpInfo() throws ApiException {
            return getCalendarsWithHttpInfo(objectId);
        }

        /**
         * Execute getCalendars request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalendarQueryResponse> _callback) throws ApiException {
            return getCalendarsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetCalendarsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCalendarsRequestBuilder getCalendars(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetCalendarsRequestBuilder(objectId);
    }
    private okhttp3.Call getChatRoomsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/chatV2/{objectId}/rooms"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatRoomsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getChatRooms(Async)");
        }

        return getChatRoomsCall(objectId, _callback);

    }


    private ApiResponse<GetRoomsResponse> getChatRoomsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getChatRoomsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<GetRoomsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChatRoomsAsync(String objectId, final ApiCallback<GetRoomsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatRoomsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<GetRoomsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChatRoomsRequestBuilder {
        private final String objectId;

        private GetChatRoomsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getChatRooms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChatRoomsCall(objectId, _callback);
        }


        /**
         * Execute getChatRooms request
         * @return GetRoomsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetRoomsResponse execute() throws ApiException {
            ApiResponse<GetRoomsResponse> localVarResp = getChatRoomsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChatRooms request with HTTP info returned
         * @return ApiResponse&lt;GetRoomsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRoomsResponse> executeWithHttpInfo() throws ApiException {
            return getChatRoomsWithHttpInfo(objectId);
        }

        /**
         * Execute getChatRooms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRoomsResponse> _callback) throws ApiException {
            return getChatRoomsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetChatRoomsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetChatRoomsRequestBuilder getChatRooms(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetChatRoomsRequestBuilder(objectId);
    }
    private okhttp3.Call getChatV2Call(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/chatV2/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatV2ValidateBeforeCall(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getChatV2(Async)");
        }

        return getChatV2Call(objectId, scope, _callback);

    }


    private ApiResponse<GetRoomsResponse> getChatV2WithHttpInfo(String objectId, String scope) throws ApiException {
        okhttp3.Call localVarCall = getChatV2ValidateBeforeCall(objectId, scope, null);
        Type localVarReturnType = new TypeToken<GetRoomsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChatV2Async(String objectId, String scope, final ApiCallback<GetRoomsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatV2ValidateBeforeCall(objectId, scope, _callback);
        Type localVarReturnType = new TypeToken<GetRoomsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChatV2RequestBuilder {
        private final String objectId;
        private String scope;

        private GetChatV2RequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set scope
         * @param scope  (optional)
         * @return GetChatV2RequestBuilder
         */
        public GetChatV2RequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for getChatV2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChatV2Call(objectId, scope, _callback);
        }


        /**
         * Execute getChatV2 request
         * @return GetRoomsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetRoomsResponse execute() throws ApiException {
            ApiResponse<GetRoomsResponse> localVarResp = getChatV2WithHttpInfo(objectId, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChatV2 request with HTTP info returned
         * @return ApiResponse&lt;GetRoomsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRoomsResponse> executeWithHttpInfo() throws ApiException {
            return getChatV2WithHttpInfo(objectId, scope);
        }

        /**
         * Execute getChatV2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRoomsResponse> _callback) throws ApiException {
            return getChatV2Async(objectId, scope, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetChatV2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetChatV2RequestBuilder getChatV2(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetChatV2RequestBuilder(objectId);
    }
    private okhttp3.Call getClientStatsCall(String objectId, String stats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}/client"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientStatsValidateBeforeCall(String objectId, String stats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getClientStats(Async)");
        }

        return getClientStatsCall(objectId, stats, _callback);

    }


    private ApiResponse<StatsResponse> getClientStatsWithHttpInfo(String objectId, String stats) throws ApiException {
        okhttp3.Call localVarCall = getClientStatsValidateBeforeCall(objectId, stats, null);
        Type localVarReturnType = new TypeToken<StatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientStatsAsync(String objectId, String stats, final ApiCallback<StatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientStatsValidateBeforeCall(objectId, stats, _callback);
        Type localVarReturnType = new TypeToken<StatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientStatsRequestBuilder {
        private final String objectId;
        private String stats;

        private GetClientStatsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set stats
         * @param stats  (optional)
         * @return GetClientStatsRequestBuilder
         */
        public GetClientStatsRequestBuilder stats(String stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Build call for getClientStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientStatsCall(objectId, stats, _callback);
        }


        /**
         * Execute getClientStats request
         * @return StatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public StatsResponse execute() throws ApiException {
            ApiResponse<StatsResponse> localVarResp = getClientStatsWithHttpInfo(objectId, stats);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientStats request with HTTP info returned
         * @return ApiResponse&lt;StatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsResponse> executeWithHttpInfo() throws ApiException {
            return getClientStatsWithHttpInfo(objectId, stats);
        }

        /**
         * Execute getClientStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsResponse> _callback) throws ApiException {
            return getClientStatsAsync(objectId, stats, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetClientStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetClientStatsRequestBuilder getClientStats(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetClientStatsRequestBuilder(objectId);
    }
    private okhttp3.Call getCommerceCouponCountCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/coupons/count"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommerceCouponCountValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getCommerceCouponCount(Async)");
        }

        return getCommerceCouponCountCall(objectId, _callback);

    }


    private ApiResponse<GetTotalCouponResponse> getCommerceCouponCountWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getCommerceCouponCountValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<GetTotalCouponResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommerceCouponCountAsync(String objectId, final ApiCallback<GetTotalCouponResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommerceCouponCountValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<GetTotalCouponResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommerceCouponCountRequestBuilder {
        private final String objectId;

        private GetCommerceCouponCountRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getCommerceCouponCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommerceCouponCountCall(objectId, _callback);
        }


        /**
         * Execute getCommerceCouponCount request
         * @return GetTotalCouponResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetTotalCouponResponse execute() throws ApiException {
            ApiResponse<GetTotalCouponResponse> localVarResp = getCommerceCouponCountWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommerceCouponCount request with HTTP info returned
         * @return ApiResponse&lt;GetTotalCouponResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTotalCouponResponse> executeWithHttpInfo() throws ApiException {
            return getCommerceCouponCountWithHttpInfo(objectId);
        }

        /**
         * Execute getCommerceCouponCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTotalCouponResponse> _callback) throws ApiException {
            return getCommerceCouponCountAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetCommerceCouponCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCommerceCouponCountRequestBuilder getCommerceCouponCount(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetCommerceCouponCountRequestBuilder(objectId);
    }
    private okhttp3.Call getCommerceListingsCall(String objectId, String listing, String store, String time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/listings"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing", listing));
        }

        if (store != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store", store));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommerceListingsValidateBeforeCall(String objectId, String listing, String store, String time, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getCommerceListings(Async)");
        }

        return getCommerceListingsCall(objectId, listing, store, time, _callback);

    }


    private ApiResponse<ActiveListingResponse> getCommerceListingsWithHttpInfo(String objectId, String listing, String store, String time) throws ApiException {
        okhttp3.Call localVarCall = getCommerceListingsValidateBeforeCall(objectId, listing, store, time, null);
        Type localVarReturnType = new TypeToken<ActiveListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommerceListingsAsync(String objectId, String listing, String store, String time, final ApiCallback<ActiveListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommerceListingsValidateBeforeCall(objectId, listing, store, time, _callback);
        Type localVarReturnType = new TypeToken<ActiveListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommerceListingsRequestBuilder {
        private final String objectId;
        private String listing;
        private String store;
        private String time;

        private GetCommerceListingsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set listing
         * @param listing  (optional)
         * @return GetCommerceListingsRequestBuilder
         */
        public GetCommerceListingsRequestBuilder listing(String listing) {
            this.listing = listing;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return GetCommerceListingsRequestBuilder
         */
        public GetCommerceListingsRequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return GetCommerceListingsRequestBuilder
         */
        public GetCommerceListingsRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for getCommerceListings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommerceListingsCall(objectId, listing, store, time, _callback);
        }


        /**
         * Execute getCommerceListings request
         * @return ActiveListingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ActiveListingResponse execute() throws ApiException {
            ApiResponse<ActiveListingResponse> localVarResp = getCommerceListingsWithHttpInfo(objectId, listing, store, time);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommerceListings request with HTTP info returned
         * @return ApiResponse&lt;ActiveListingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActiveListingResponse> executeWithHttpInfo() throws ApiException {
            return getCommerceListingsWithHttpInfo(objectId, listing, store, time);
        }

        /**
         * Execute getCommerceListings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActiveListingResponse> _callback) throws ApiException {
            return getCommerceListingsAsync(objectId, listing, store, time, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetCommerceListingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCommerceListingsRequestBuilder getCommerceListings(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetCommerceListingsRequestBuilder(objectId);
    }
    private okhttp3.Call getCommerceOffersCall(String objectId, String language, String time, String stores, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/offers"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (stores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores", stores));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommerceOffersValidateBeforeCall(String objectId, String language, String time, String stores, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getCommerceOffers(Async)");
        }

        return getCommerceOffersCall(objectId, language, time, stores, _callback);

    }


    private ApiResponse<GetActiveOffersResponse> getCommerceOffersWithHttpInfo(String objectId, String language, String time, String stores) throws ApiException {
        okhttp3.Call localVarCall = getCommerceOffersValidateBeforeCall(objectId, language, time, stores, null);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommerceOffersAsync(String objectId, String language, String time, String stores, final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommerceOffersValidateBeforeCall(objectId, language, time, stores, _callback);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommerceOffersRequestBuilder {
        private final String objectId;
        private String language;
        private String time;
        private String stores;

        private GetCommerceOffersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set language
         * @param language  (optional)
         * @return GetCommerceOffersRequestBuilder
         */
        public GetCommerceOffersRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return GetCommerceOffersRequestBuilder
         */
        public GetCommerceOffersRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Set stores
         * @param stores  (optional)
         * @return GetCommerceOffersRequestBuilder
         */
        public GetCommerceOffersRequestBuilder stores(String stores) {
            this.stores = stores;
            return this;
        }
        
        /**
         * Build call for getCommerceOffers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommerceOffersCall(objectId, language, time, stores, _callback);
        }


        /**
         * Execute getCommerceOffers request
         * @return GetActiveOffersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetActiveOffersResponse execute() throws ApiException {
            ApiResponse<GetActiveOffersResponse> localVarResp = getCommerceOffersWithHttpInfo(objectId, language, time, stores);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommerceOffers request with HTTP info returned
         * @return ApiResponse&lt;GetActiveOffersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetActiveOffersResponse> executeWithHttpInfo() throws ApiException {
            return getCommerceOffersWithHttpInfo(objectId, language, time, stores);
        }

        /**
         * Execute getCommerceOffers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {
            return getCommerceOffersAsync(objectId, language, time, stores, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetCommerceOffersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCommerceOffersRequestBuilder getCommerceOffers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetCommerceOffersRequestBuilder(objectId);
    }
    private okhttp3.Call getInventoryObjectByIdCall(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryObjectByIdValidateBeforeCall(String objectId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getInventoryObjectById(Async)");
        }

        return getInventoryObjectByIdCall(objectId, scope, _callback);

    }


    private ApiResponse<InventoryView> getInventoryObjectByIdWithHttpInfo(String objectId, String scope) throws ApiException {
        okhttp3.Call localVarCall = getInventoryObjectByIdValidateBeforeCall(objectId, scope, null);
        Type localVarReturnType = new TypeToken<InventoryView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInventoryObjectByIdAsync(String objectId, String scope, final ApiCallback<InventoryView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryObjectByIdValidateBeforeCall(objectId, scope, _callback);
        Type localVarReturnType = new TypeToken<InventoryView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInventoryObjectByIdRequestBuilder {
        private final String objectId;
        private String scope;

        private GetInventoryObjectByIdRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set scope
         * @param scope  (optional)
         * @return GetInventoryObjectByIdRequestBuilder
         */
        public GetInventoryObjectByIdRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for getInventoryObjectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInventoryObjectByIdCall(objectId, scope, _callback);
        }


        /**
         * Execute getInventoryObjectById request
         * @return InventoryView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public InventoryView execute() throws ApiException {
            ApiResponse<InventoryView> localVarResp = getInventoryObjectByIdWithHttpInfo(objectId, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInventoryObjectById request with HTTP info returned
         * @return ApiResponse&lt;InventoryView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InventoryView> executeWithHttpInfo() throws ApiException {
            return getInventoryObjectByIdWithHttpInfo(objectId, scope);
        }

        /**
         * Execute getInventoryObjectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InventoryView> _callback) throws ApiException {
            return getInventoryObjectByIdAsync(objectId, scope, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetInventoryObjectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetInventoryObjectByIdRequestBuilder getInventoryObjectById(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetInventoryObjectByIdRequestBuilder(objectId);
    }
    private okhttp3.Call getMatchmakingDataCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/matchmaking/{objectId}/match"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchmakingDataValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getMatchmakingData(Async)");
        }

        return getMatchmakingDataCall(objectId, _callback);

    }


    private ApiResponse<MatchUpdate> getMatchmakingDataWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getMatchmakingDataValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<MatchUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMatchmakingDataAsync(String objectId, final ApiCallback<MatchUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchmakingDataValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<MatchUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMatchmakingDataRequestBuilder {
        private final String objectId;

        private GetMatchmakingDataRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getMatchmakingData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMatchmakingDataCall(objectId, _callback);
        }


        /**
         * Execute getMatchmakingData request
         * @return MatchUpdate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MatchUpdate execute() throws ApiException {
            ApiResponse<MatchUpdate> localVarResp = getMatchmakingDataWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMatchmakingData request with HTTP info returned
         * @return ApiResponse&lt;MatchUpdate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MatchUpdate> executeWithHttpInfo() throws ApiException {
            return getMatchmakingDataWithHttpInfo(objectId);
        }

        /**
         * Execute getMatchmakingData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MatchUpdate> _callback) throws ApiException {
            return getMatchmakingDataAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetMatchmakingDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMatchmakingDataRequestBuilder getMatchmakingData(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetMatchmakingDataRequestBuilder(objectId);
    }
    private okhttp3.Call getMultipliersCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}/multipliers"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipliersValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getMultipliers(Async)");
        }

        return getMultipliersCall(objectId, _callback);

    }


    private ApiResponse<MultipliersGetResponse> getMultipliersWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getMultipliersValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<MultipliersGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipliersAsync(String objectId, final ApiCallback<MultipliersGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipliersValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<MultipliersGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipliersRequestBuilder {
        private final String objectId;

        private GetMultipliersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getMultipliers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipliersCall(objectId, _callback);
        }


        /**
         * Execute getMultipliers request
         * @return MultipliersGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MultipliersGetResponse execute() throws ApiException {
            ApiResponse<MultipliersGetResponse> localVarResp = getMultipliersWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipliers request with HTTP info returned
         * @return ApiResponse&lt;MultipliersGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MultipliersGetResponse> executeWithHttpInfo() throws ApiException {
            return getMultipliersWithHttpInfo(objectId);
        }

        /**
         * Execute getMultipliers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MultipliersGetResponse> _callback) throws ApiException {
            return getMultipliersAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetMultipliersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipliersRequestBuilder getMultipliers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetMultipliersRequestBuilder(objectId);
    }
    private okhttp3.Call getObjectStatsCall(String objectId, String stats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectStatsValidateBeforeCall(String objectId, String stats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectStats(Async)");
        }

        return getObjectStatsCall(objectId, stats, _callback);

    }


    private ApiResponse<StatsResponse> getObjectStatsWithHttpInfo(String objectId, String stats) throws ApiException {
        okhttp3.Call localVarCall = getObjectStatsValidateBeforeCall(objectId, stats, null);
        Type localVarReturnType = new TypeToken<StatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectStatsAsync(String objectId, String stats, final ApiCallback<StatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectStatsValidateBeforeCall(objectId, stats, _callback);
        Type localVarReturnType = new TypeToken<StatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectStatsRequestBuilder {
        private final String objectId;
        private String stats;

        private GetObjectStatsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set stats
         * @param stats  (optional)
         * @return GetObjectStatsRequestBuilder
         */
        public GetObjectStatsRequestBuilder stats(String stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Build call for getObjectStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectStatsCall(objectId, stats, _callback);
        }


        /**
         * Execute getObjectStats request
         * @return StatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public StatsResponse execute() throws ApiException {
            ApiResponse<StatsResponse> localVarResp = getObjectStatsWithHttpInfo(objectId, stats);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectStats request with HTTP info returned
         * @return ApiResponse&lt;StatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsResponse> executeWithHttpInfo() throws ApiException {
            return getObjectStatsWithHttpInfo(objectId, stats);
        }

        /**
         * Execute getObjectStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsResponse> _callback) throws ApiException {
            return getObjectStatsAsync(objectId, stats, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectStatsRequestBuilder getObjectStats(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectStatsRequestBuilder(objectId);
    }
    private okhttp3.Call getOffersAdminCall(String objectId, String language, String time, String stores, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/offersAdmin"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (stores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores", stores));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOffersAdminValidateBeforeCall(String objectId, String language, String time, String stores, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getOffersAdmin(Async)");
        }

        return getOffersAdminCall(objectId, language, time, stores, _callback);

    }


    private ApiResponse<GetActiveOffersResponse> getOffersAdminWithHttpInfo(String objectId, String language, String time, String stores) throws ApiException {
        okhttp3.Call localVarCall = getOffersAdminValidateBeforeCall(objectId, language, time, stores, null);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOffersAdminAsync(String objectId, String language, String time, String stores, final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOffersAdminValidateBeforeCall(objectId, language, time, stores, _callback);
        Type localVarReturnType = new TypeToken<GetActiveOffersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOffersAdminRequestBuilder {
        private final String objectId;
        private String language;
        private String time;
        private String stores;

        private GetOffersAdminRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set language
         * @param language  (optional)
         * @return GetOffersAdminRequestBuilder
         */
        public GetOffersAdminRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return GetOffersAdminRequestBuilder
         */
        public GetOffersAdminRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Set stores
         * @param stores  (optional)
         * @return GetOffersAdminRequestBuilder
         */
        public GetOffersAdminRequestBuilder stores(String stores) {
            this.stores = stores;
            return this;
        }
        
        /**
         * Build call for getOffersAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOffersAdminCall(objectId, language, time, stores, _callback);
        }


        /**
         * Execute getOffersAdmin request
         * @return GetActiveOffersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetActiveOffersResponse execute() throws ApiException {
            ApiResponse<GetActiveOffersResponse> localVarResp = getOffersAdminWithHttpInfo(objectId, language, time, stores);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOffersAdmin request with HTTP info returned
         * @return ApiResponse&lt;GetActiveOffersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetActiveOffersResponse> executeWithHttpInfo() throws ApiException {
            return getOffersAdminWithHttpInfo(objectId, language, time, stores);
        }

        /**
         * Execute getOffersAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetActiveOffersResponse> _callback) throws ApiException {
            return getOffersAdminAsync(objectId, language, time, stores, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetOffersAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetOffersAdminRequestBuilder getOffersAdmin(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetOffersAdminRequestBuilder(objectId);
    }
    private okhttp3.Call getPaymentDetailsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/payments/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentDetailsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getPaymentDetails(Async)");
        }

        return getPaymentDetailsCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> getPaymentDetailsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentDetailsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentDetailsAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentDetailsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentDetailsRequestBuilder {
        private final String objectId;

        private GetPaymentDetailsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getPaymentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentDetailsCall(objectId, _callback);
        }


        /**
         * Execute getPaymentDetails request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = getPaymentDetailsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentDetails request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return getPaymentDetailsWithHttpInfo(objectId);
        }

        /**
         * Execute getPaymentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return getPaymentDetailsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetPaymentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentDetailsRequestBuilder getPaymentDetails(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetPaymentDetailsRequestBuilder(objectId);
    }
    private okhttp3.Call matchmakingDeleteCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/matchmaking/{objectId}/match"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchmakingDeleteValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling matchmakingDelete(Async)");
        }

        return matchmakingDeleteCall(objectId, _callback);

    }


    private ApiResponse<EmptyResponse> matchmakingDeleteWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = matchmakingDeleteValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call matchmakingDeleteAsync(String objectId, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchmakingDeleteValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MatchmakingDeleteRequestBuilder {
        private final String objectId;

        private MatchmakingDeleteRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for matchmakingDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return matchmakingDeleteCall(objectId, _callback);
        }


        /**
         * Execute matchmakingDelete request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ApiResponse<EmptyResponse> localVarResp = matchmakingDeleteWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute matchmakingDelete request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            return matchmakingDeleteWithHttpInfo(objectId);
        }

        /**
         * Execute matchmakingDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            return matchmakingDeleteAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return MatchmakingDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MatchmakingDeleteRequestBuilder matchmakingDelete(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new MatchmakingDeleteRequestBuilder(objectId);
    }
    private okhttp3.Call postClientStatsCall(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statUpdateRequest;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}/client"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postClientStatsValidateBeforeCall(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling postClientStats(Async)");
        }

        return postClientStatsCall(objectId, statUpdateRequest, _callback);

    }


    private ApiResponse<EmptyResponse> postClientStatsWithHttpInfo(String objectId, StatUpdateRequest statUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = postClientStatsValidateBeforeCall(objectId, statUpdateRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postClientStatsAsync(String objectId, StatUpdateRequest statUpdateRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postClientStatsValidateBeforeCall(objectId, statUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostClientStatsRequestBuilder {
        private final String objectId;
        private String objectId;
        private Map<String, Object> set;
        private Map<String, Object> add;
        private Boolean emitAnalytics;

        private PostClientStatsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set objectId
         * @param objectId  (optional)
         * @return PostClientStatsRequestBuilder
         */
        public PostClientStatsRequestBuilder objectId(String objectId) {
            this.objectId = objectId;
            return this;
        }
        
        /**
         * Set set
         * @param set  (optional)
         * @return PostClientStatsRequestBuilder
         */
        public PostClientStatsRequestBuilder set(Map<String, Object> set) {
            this.set = set;
            return this;
        }
        
        /**
         * Set add
         * @param add  (optional)
         * @return PostClientStatsRequestBuilder
         */
        public PostClientStatsRequestBuilder add(Map<String, Object> add) {
            this.add = add;
            return this;
        }
        
        /**
         * Set emitAnalytics
         * @param emitAnalytics  (optional)
         * @return PostClientStatsRequestBuilder
         */
        public PostClientStatsRequestBuilder emitAnalytics(Boolean emitAnalytics) {
            this.emitAnalytics = emitAnalytics;
            return this;
        }
        
        /**
         * Build call for postClientStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return postClientStatsCall(objectId, statUpdateRequest, _callback);
        }

        private StatUpdateRequest buildBodyParams() {
            StatUpdateRequest statUpdateRequest = new StatUpdateRequest();
            statUpdateRequest.objectId(this.objectId);
            statUpdateRequest.set(this.set);
            statUpdateRequest.add(this.add);
            statUpdateRequest.emitAnalytics(this.emitAnalytics);
            return statUpdateRequest;
        }

        /**
         * Execute postClientStats request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = postClientStatsWithHttpInfo(objectId, statUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postClientStats request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return postClientStatsWithHttpInfo(objectId, statUpdateRequest);
        }

        /**
         * Execute postClientStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            StatUpdateRequest statUpdateRequest = buildBodyParams();
            return postClientStatsAsync(objectId, statUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return PostClientStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostClientStatsRequestBuilder postClientStats(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new PostClientStatsRequestBuilder(objectId);
    }
    private okhttp3.Call postClientStringlistCall(String objectId, StatUpdateRequestStringListFormat statUpdateRequestStringListFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statUpdateRequestStringListFormat;

        // create path and map variables
        String localVarPath = "/object/stats/{objectId}/client/stringlist"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postClientStringlistValidateBeforeCall(String objectId, StatUpdateRequestStringListFormat statUpdateRequestStringListFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling postClientStringlist(Async)");
        }

        return postClientStringlistCall(objectId, statUpdateRequestStringListFormat, _callback);

    }


    private ApiResponse<EmptyResponse> postClientStringlistWithHttpInfo(String objectId, StatUpdateRequestStringListFormat statUpdateRequestStringListFormat) throws ApiException {
        okhttp3.Call localVarCall = postClientStringlistValidateBeforeCall(objectId, statUpdateRequestStringListFormat, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postClientStringlistAsync(String objectId, StatUpdateRequestStringListFormat statUpdateRequestStringListFormat, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postClientStringlistValidateBeforeCall(objectId, statUpdateRequestStringListFormat, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostClientStringlistRequestBuilder {
        private final String objectId;
        private List<StatStringListEntry> set;

        private PostClientStringlistRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set set
         * @param set  (optional)
         * @return PostClientStringlistRequestBuilder
         */
        public PostClientStringlistRequestBuilder set(List<StatStringListEntry> set) {
            this.set = set;
            return this;
        }
        
        /**
         * Build call for postClientStringlist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatUpdateRequestStringListFormat statUpdateRequestStringListFormat = buildBodyParams();
            return postClientStringlistCall(objectId, statUpdateRequestStringListFormat, _callback);
        }

        private StatUpdateRequestStringListFormat buildBodyParams() {
            StatUpdateRequestStringListFormat statUpdateRequestStringListFormat = new StatUpdateRequestStringListFormat();
            statUpdateRequestStringListFormat.set(this.set);
            return statUpdateRequestStringListFormat;
        }

        /**
         * Execute postClientStringlist request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            StatUpdateRequestStringListFormat statUpdateRequestStringListFormat = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = postClientStringlistWithHttpInfo(objectId, statUpdateRequestStringListFormat);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postClientStringlist request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            StatUpdateRequestStringListFormat statUpdateRequestStringListFormat = buildBodyParams();
            return postClientStringlistWithHttpInfo(objectId, statUpdateRequestStringListFormat);
        }

        /**
         * Execute postClientStringlist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            StatUpdateRequestStringListFormat statUpdateRequestStringListFormat = buildBodyParams();
            return postClientStringlistAsync(objectId, statUpdateRequestStringListFormat, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return PostClientStringlistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostClientStringlistRequestBuilder postClientStringlist(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new PostClientStringlistRequestBuilder(objectId);
    }
    private okhttp3.Call purchaseByIdCall(String objectId, ReportPurchaseRequest reportPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportPurchaseRequest;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/purchase"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseByIdValidateBeforeCall(String objectId, ReportPurchaseRequest reportPurchaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling purchaseById(Async)");
        }

        return purchaseByIdCall(objectId, reportPurchaseRequest, _callback);

    }


    private ApiResponse<ResultResponse> purchaseByIdWithHttpInfo(String objectId, ReportPurchaseRequest reportPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseByIdValidateBeforeCall(objectId, reportPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<ResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseByIdAsync(String objectId, ReportPurchaseRequest reportPurchaseRequest, final ApiCallback<ResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseByIdValidateBeforeCall(objectId, reportPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<ResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseByIdRequestBuilder {
        private final String objectId;
        private String listingId;
        private Boolean free;

        private PurchaseByIdRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set listingId
         * @param listingId  (optional)
         * @return PurchaseByIdRequestBuilder
         */
        public PurchaseByIdRequestBuilder listingId(String listingId) {
            this.listingId = listingId;
            return this;
        }
        
        /**
         * Set free
         * @param free  (optional)
         * @return PurchaseByIdRequestBuilder
         */
        public PurchaseByIdRequestBuilder free(Boolean free) {
            this.free = free;
            return this;
        }
        
        /**
         * Build call for purchaseById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReportPurchaseRequest reportPurchaseRequest = buildBodyParams();
            return purchaseByIdCall(objectId, reportPurchaseRequest, _callback);
        }

        private ReportPurchaseRequest buildBodyParams() {
            ReportPurchaseRequest reportPurchaseRequest = new ReportPurchaseRequest();
            reportPurchaseRequest.listingId(this.listingId);
            reportPurchaseRequest.free(this.free);
            return reportPurchaseRequest;
        }

        /**
         * Execute purchaseById request
         * @return ResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ResultResponse execute() throws ApiException {
            ReportPurchaseRequest reportPurchaseRequest = buildBodyParams();
            ApiResponse<ResultResponse> localVarResp = purchaseByIdWithHttpInfo(objectId, reportPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseById request with HTTP info returned
         * @return ApiResponse&lt;ResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultResponse> executeWithHttpInfo() throws ApiException {
            ReportPurchaseRequest reportPurchaseRequest = buildBodyParams();
            return purchaseByIdWithHttpInfo(objectId, reportPurchaseRequest);
        }

        /**
         * Execute purchaseById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultResponse> _callback) throws ApiException {
            ReportPurchaseRequest reportPurchaseRequest = buildBodyParams();
            return purchaseByIdAsync(objectId, reportPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return PurchaseByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseByIdRequestBuilder purchaseById(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new PurchaseByIdRequestBuilder(objectId);
    }
    private okhttp3.Call purchaseItemCall(String objectId, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseRequest;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/purchase"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseItemValidateBeforeCall(String objectId, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling purchaseItem(Async)");
        }

        return purchaseItemCall(objectId, purchaseRequest, _callback);

    }


    private ApiResponse<CommonResponse> purchaseItemWithHttpInfo(String objectId, PurchaseRequest purchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseItemValidateBeforeCall(objectId, purchaseRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseItemAsync(String objectId, PurchaseRequest purchaseRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseItemValidateBeforeCall(objectId, purchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseItemRequestBuilder {
        private final String objectId;
        private String purchaseId;

        private PurchaseItemRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return PurchaseItemRequestBuilder
         */
        public PurchaseItemRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Build call for purchaseItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return purchaseItemCall(objectId, purchaseRequest, _callback);
        }

        private PurchaseRequest buildBodyParams() {
            PurchaseRequest purchaseRequest = new PurchaseRequest();
            purchaseRequest.purchaseId(this.purchaseId);
            return purchaseRequest;
        }

        /**
         * Execute purchaseItem request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = purchaseItemWithHttpInfo(objectId, purchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseItem request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return purchaseItemWithHttpInfo(objectId, purchaseRequest);
        }

        /**
         * Execute purchaseItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return purchaseItemAsync(objectId, purchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return PurchaseItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseItemRequestBuilder purchaseItem(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new PurchaseItemRequestBuilder(objectId);
    }
    private okhttp3.Call removeTransactionByIdCall(String objectId, EndTransactionRequest endTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endTransactionRequest;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}/transaction"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTransactionByIdValidateBeforeCall(String objectId, EndTransactionRequest endTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeTransactionById(Async)");
        }

        return removeTransactionByIdCall(objectId, endTransactionRequest, _callback);

    }


    private ApiResponse<CommonResponse> removeTransactionByIdWithHttpInfo(String objectId, EndTransactionRequest endTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTransactionByIdValidateBeforeCall(objectId, endTransactionRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTransactionByIdAsync(String objectId, EndTransactionRequest endTransactionRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTransactionByIdValidateBeforeCall(objectId, endTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTransactionByIdRequestBuilder {
        private final String transaction;
        private final String objectId;

        private RemoveTransactionByIdRequestBuilder(String transaction, String objectId) {
            this.transaction = transaction;
            this.objectId = objectId;
        }

        /**
         * Build call for removeTransactionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndTransactionRequest endTransactionRequest = buildBodyParams();
            return removeTransactionByIdCall(objectId, endTransactionRequest, _callback);
        }

        private EndTransactionRequest buildBodyParams() {
            EndTransactionRequest endTransactionRequest = new EndTransactionRequest();
            endTransactionRequest.transaction(this.transaction);
            return endTransactionRequest;
        }

        /**
         * Execute removeTransactionById request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            EndTransactionRequest endTransactionRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = removeTransactionByIdWithHttpInfo(objectId, endTransactionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTransactionById request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            EndTransactionRequest endTransactionRequest = buildBodyParams();
            return removeTransactionByIdWithHttpInfo(objectId, endTransactionRequest);
        }

        /**
         * Execute removeTransactionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            EndTransactionRequest endTransactionRequest = buildBodyParams();
            return removeTransactionByIdAsync(objectId, endTransactionRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveTransactionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTransactionByIdRequestBuilder removeTransactionById(String transaction, String objectId) throws IllegalArgumentException {
        if (transaction == null) throw new IllegalArgumentException("\"transaction\" is required but got null");
            

        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveTransactionByIdRequestBuilder(transaction, objectId);
    }
    private okhttp3.Call startMatchmakingProcessCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/matchmaking/{objectId}/match"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startMatchmakingProcessValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling startMatchmakingProcess(Async)");
        }

        return startMatchmakingProcessCall(objectId, _callback);

    }


    private ApiResponse<MatchUpdate> startMatchmakingProcessWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = startMatchmakingProcessValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<MatchUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startMatchmakingProcessAsync(String objectId, final ApiCallback<MatchUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = startMatchmakingProcessValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<MatchUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartMatchmakingProcessRequestBuilder {
        private final String objectId;

        private StartMatchmakingProcessRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for startMatchmakingProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startMatchmakingProcessCall(objectId, _callback);
        }


        /**
         * Execute startMatchmakingProcess request
         * @return MatchUpdate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MatchUpdate execute() throws ApiException {
            ApiResponse<MatchUpdate> localVarResp = startMatchmakingProcessWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startMatchmakingProcess request with HTTP info returned
         * @return ApiResponse&lt;MatchUpdate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MatchUpdate> executeWithHttpInfo() throws ApiException {
            return startMatchmakingProcessWithHttpInfo(objectId);
        }

        /**
         * Execute startMatchmakingProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MatchUpdate> _callback) throws ApiException {
            return startMatchmakingProcessAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return StartMatchmakingProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StartMatchmakingProcessRequestBuilder startMatchmakingProcess(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new StartMatchmakingProcessRequestBuilder(objectId);
    }
    private okhttp3.Call transferItemInventoryCall(String objectId, TransferRequest transferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}/transfer"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferItemInventoryValidateBeforeCall(String objectId, TransferRequest transferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling transferItemInventory(Async)");
        }

        return transferItemInventoryCall(objectId, transferRequest, _callback);

    }


    private ApiResponse<CommonResponse> transferItemInventoryWithHttpInfo(String objectId, TransferRequest transferRequest) throws ApiException {
        okhttp3.Call localVarCall = transferItemInventoryValidateBeforeCall(objectId, transferRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferItemInventoryAsync(String objectId, TransferRequest transferRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferItemInventoryValidateBeforeCall(objectId, transferRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferItemInventoryRequestBuilder {
        private final Long recipientPlayer;
        private final String objectId;
        private String transaction;
        private Map<String, Long> currencies;

        private TransferItemInventoryRequestBuilder(Long recipientPlayer, String objectId) {
            this.recipientPlayer = recipientPlayer;
            this.objectId = objectId;
        }

        /**
         * Set transaction
         * @param transaction  (optional)
         * @return TransferItemInventoryRequestBuilder
         */
        public TransferItemInventoryRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set currencies
         * @param currencies  (optional)
         * @return TransferItemInventoryRequestBuilder
         */
        public TransferItemInventoryRequestBuilder currencies(Map<String, Long> currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Build call for transferItemInventory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransferRequest transferRequest = buildBodyParams();
            return transferItemInventoryCall(objectId, transferRequest, _callback);
        }

        private TransferRequest buildBodyParams() {
            TransferRequest transferRequest = new TransferRequest();
            transferRequest.transaction(this.transaction);
            transferRequest.recipientPlayer(this.recipientPlayer);
            transferRequest.currencies(this.currencies);
            return transferRequest;
        }

        /**
         * Execute transferItemInventory request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            TransferRequest transferRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = transferItemInventoryWithHttpInfo(objectId, transferRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferItemInventory request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            TransferRequest transferRequest = buildBodyParams();
            return transferItemInventoryWithHttpInfo(objectId, transferRequest);
        }

        /**
         * Execute transferItemInventory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            TransferRequest transferRequest = buildBodyParams();
            return transferItemInventoryAsync(objectId, transferRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return TransferItemInventoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TransferItemInventoryRequestBuilder transferItemInventory(Long recipientPlayer, String objectId) throws IllegalArgumentException {
        if (recipientPlayer == null) throw new IllegalArgumentException("\"recipientPlayer\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new TransferItemInventoryRequestBuilder(recipientPlayer, objectId);
    }
    private okhttp3.Call updateInventoryObjectCall(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryUpdateRequest;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInventoryObjectValidateBeforeCall(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateInventoryObject(Async)");
        }

        return updateInventoryObjectCall(objectId, inventoryUpdateRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateInventoryObjectWithHttpInfo(String objectId, InventoryUpdateRequest inventoryUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInventoryObjectValidateBeforeCall(objectId, inventoryUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInventoryObjectAsync(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInventoryObjectValidateBeforeCall(objectId, inventoryUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInventoryObjectRequestBuilder {
        private final Boolean empty;
        private final List<String> currencyContentIds;
        private final List<String> itemContentIds;
        private final String objectId;
        private Map<String, Long> currencies;
        private Map<String, List<CurrencyProperty>> currencyProperties;
        private Boolean applyVipBonus;
        private List<ItemUpdateRequest> updateItems;
        private List<ItemCreateRequest> newItems;
        private String transaction;
        private List<ItemDeleteRequest> deleteItems;

        private UpdateInventoryObjectRequestBuilder(Boolean empty, List<String> currencyContentIds, List<String> itemContentIds, String objectId) {
            this.empty = empty;
            this.currencyContentIds = currencyContentIds;
            this.itemContentIds = itemContentIds;
            this.objectId = objectId;
        }

        /**
         * Set currencies
         * @param currencies  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder currencies(Map<String, Long> currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Set currencyProperties
         * @param currencyProperties  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder currencyProperties(Map<String, List<CurrencyProperty>> currencyProperties) {
            this.currencyProperties = currencyProperties;
            return this;
        }
        
        /**
         * Set applyVipBonus
         * @param applyVipBonus  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder applyVipBonus(Boolean applyVipBonus) {
            this.applyVipBonus = applyVipBonus;
            return this;
        }
        
        /**
         * Set updateItems
         * @param updateItems  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder updateItems(List<ItemUpdateRequest> updateItems) {
            this.updateItems = updateItems;
            return this;
        }
        
        /**
         * Set newItems
         * @param newItems  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder newItems(List<ItemCreateRequest> newItems) {
            this.newItems = newItems;
            return this;
        }
        
        /**
         * Set transaction
         * @param transaction  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set deleteItems
         * @param deleteItems  (optional)
         * @return UpdateInventoryObjectRequestBuilder
         */
        public UpdateInventoryObjectRequestBuilder deleteItems(List<ItemDeleteRequest> deleteItems) {
            this.deleteItems = deleteItems;
            return this;
        }
        
        /**
         * Build call for updateInventoryObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryObjectCall(objectId, inventoryUpdateRequest, _callback);
        }

        private InventoryUpdateRequest buildBodyParams() {
            InventoryUpdateRequest inventoryUpdateRequest = new InventoryUpdateRequest();
            inventoryUpdateRequest.currencies(this.currencies);
            inventoryUpdateRequest.empty(this.empty);
            inventoryUpdateRequest.currencyProperties(this.currencyProperties);
            inventoryUpdateRequest.currencyContentIds(this.currencyContentIds);
            inventoryUpdateRequest.applyVipBonus(this.applyVipBonus);
            inventoryUpdateRequest.itemContentIds(this.itemContentIds);
            inventoryUpdateRequest.updateItems(this.updateItems);
            inventoryUpdateRequest.newItems(this.newItems);
            inventoryUpdateRequest.transaction(this.transaction);
            inventoryUpdateRequest.deleteItems(this.deleteItems);
            return inventoryUpdateRequest;
        }

        /**
         * Execute updateInventoryObject request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateInventoryObjectWithHttpInfo(objectId, inventoryUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInventoryObject request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryObjectWithHttpInfo(objectId, inventoryUpdateRequest);
        }

        /**
         * Execute updateInventoryObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryObjectAsync(objectId, inventoryUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateInventoryObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInventoryObjectRequestBuilder updateInventoryObject(Boolean empty, List<String> currencyContentIds, List<String> itemContentIds, String objectId) throws IllegalArgumentException {
        if (empty == null) throw new IllegalArgumentException("\"empty\" is required but got null");
        if (currencyContentIds == null) throw new IllegalArgumentException("\"currencyContentIds\" is required but got null");
        if (itemContentIds == null) throw new IllegalArgumentException("\"itemContentIds\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateInventoryObjectRequestBuilder(empty, currencyContentIds, itemContentIds, objectId);
    }
    private okhttp3.Call updateInventoryPreviewCall(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryUpdateRequest;

        // create path and map variables
        String localVarPath = "/object/inventory/{objectId}/preview"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInventoryPreviewValidateBeforeCall(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateInventoryPreview(Async)");
        }

        return updateInventoryPreviewCall(objectId, inventoryUpdateRequest, _callback);

    }


    private ApiResponse<PreviewVipBonusResponse> updateInventoryPreviewWithHttpInfo(String objectId, InventoryUpdateRequest inventoryUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInventoryPreviewValidateBeforeCall(objectId, inventoryUpdateRequest, null);
        Type localVarReturnType = new TypeToken<PreviewVipBonusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInventoryPreviewAsync(String objectId, InventoryUpdateRequest inventoryUpdateRequest, final ApiCallback<PreviewVipBonusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInventoryPreviewValidateBeforeCall(objectId, inventoryUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<PreviewVipBonusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInventoryPreviewRequestBuilder {
        private final Boolean empty;
        private final List<String> currencyContentIds;
        private final List<String> itemContentIds;
        private final String objectId;
        private Map<String, Long> currencies;
        private Map<String, List<CurrencyProperty>> currencyProperties;
        private Boolean applyVipBonus;
        private List<ItemUpdateRequest> updateItems;
        private List<ItemCreateRequest> newItems;
        private String transaction;
        private List<ItemDeleteRequest> deleteItems;

        private UpdateInventoryPreviewRequestBuilder(Boolean empty, List<String> currencyContentIds, List<String> itemContentIds, String objectId) {
            this.empty = empty;
            this.currencyContentIds = currencyContentIds;
            this.itemContentIds = itemContentIds;
            this.objectId = objectId;
        }

        /**
         * Set currencies
         * @param currencies  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder currencies(Map<String, Long> currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Set currencyProperties
         * @param currencyProperties  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder currencyProperties(Map<String, List<CurrencyProperty>> currencyProperties) {
            this.currencyProperties = currencyProperties;
            return this;
        }
        
        /**
         * Set applyVipBonus
         * @param applyVipBonus  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder applyVipBonus(Boolean applyVipBonus) {
            this.applyVipBonus = applyVipBonus;
            return this;
        }
        
        /**
         * Set updateItems
         * @param updateItems  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder updateItems(List<ItemUpdateRequest> updateItems) {
            this.updateItems = updateItems;
            return this;
        }
        
        /**
         * Set newItems
         * @param newItems  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder newItems(List<ItemCreateRequest> newItems) {
            this.newItems = newItems;
            return this;
        }
        
        /**
         * Set transaction
         * @param transaction  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set deleteItems
         * @param deleteItems  (optional)
         * @return UpdateInventoryPreviewRequestBuilder
         */
        public UpdateInventoryPreviewRequestBuilder deleteItems(List<ItemDeleteRequest> deleteItems) {
            this.deleteItems = deleteItems;
            return this;
        }
        
        /**
         * Build call for updateInventoryPreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryPreviewCall(objectId, inventoryUpdateRequest, _callback);
        }

        private InventoryUpdateRequest buildBodyParams() {
            InventoryUpdateRequest inventoryUpdateRequest = new InventoryUpdateRequest();
            inventoryUpdateRequest.currencies(this.currencies);
            inventoryUpdateRequest.empty(this.empty);
            inventoryUpdateRequest.currencyProperties(this.currencyProperties);
            inventoryUpdateRequest.currencyContentIds(this.currencyContentIds);
            inventoryUpdateRequest.applyVipBonus(this.applyVipBonus);
            inventoryUpdateRequest.itemContentIds(this.itemContentIds);
            inventoryUpdateRequest.updateItems(this.updateItems);
            inventoryUpdateRequest.newItems(this.newItems);
            inventoryUpdateRequest.transaction(this.transaction);
            inventoryUpdateRequest.deleteItems(this.deleteItems);
            return inventoryUpdateRequest;
        }

        /**
         * Execute updateInventoryPreview request
         * @return PreviewVipBonusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PreviewVipBonusResponse execute() throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            ApiResponse<PreviewVipBonusResponse> localVarResp = updateInventoryPreviewWithHttpInfo(objectId, inventoryUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInventoryPreview request with HTTP info returned
         * @return ApiResponse&lt;PreviewVipBonusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PreviewVipBonusResponse> executeWithHttpInfo() throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryPreviewWithHttpInfo(objectId, inventoryUpdateRequest);
        }

        /**
         * Execute updateInventoryPreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PreviewVipBonusResponse> _callback) throws ApiException {
            InventoryUpdateRequest inventoryUpdateRequest = buildBodyParams();
            return updateInventoryPreviewAsync(objectId, inventoryUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateInventoryPreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInventoryPreviewRequestBuilder updateInventoryPreview(Boolean empty, List<String> currencyContentIds, List<String> itemContentIds, String objectId) throws IllegalArgumentException {
        if (empty == null) throw new IllegalArgumentException("\"empty\" is required but got null");
        if (currencyContentIds == null) throw new IllegalArgumentException("\"currencyContentIds\" is required but got null");
        if (itemContentIds == null) throw new IllegalArgumentException("\"itemContentIds\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateInventoryPreviewRequestBuilder(empty, currencyContentIds, itemContentIds, objectId);
    }
    private okhttp3.Call updateMatchmakingTickCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/matchmaking/{objectId}/tick"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMatchmakingTickValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateMatchmakingTick(Async)");
        }

        return updateMatchmakingTickCall(objectId, _callback);

    }


    private ApiResponse<EmptyResponse> updateMatchmakingTickWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = updateMatchmakingTickValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMatchmakingTickAsync(String objectId, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMatchmakingTickValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMatchmakingTickRequestBuilder {
        private final String objectId;

        private UpdateMatchmakingTickRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for updateMatchmakingTick
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateMatchmakingTickCall(objectId, _callback);
        }


        /**
         * Execute updateMatchmakingTick request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ApiResponse<EmptyResponse> localVarResp = updateMatchmakingTickWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMatchmakingTick request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            return updateMatchmakingTickWithHttpInfo(objectId);
        }

        /**
         * Execute updateMatchmakingTick request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            return updateMatchmakingTickAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateMatchmakingTickRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMatchmakingTickRequestBuilder updateMatchmakingTick(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateMatchmakingTickRequestBuilder(objectId);
    }
    private okhttp3.Call updateStatObjectCall(String objectId, StatSubscriptionNotification statSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statSubscriptionNotification;

        // create path and map variables
        String localVarPath = "/object/commerce/{objectId}/stats/update"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatObjectValidateBeforeCall(String objectId, StatSubscriptionNotification statSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateStatObject(Async)");
        }

        return updateStatObjectCall(objectId, statSubscriptionNotification, _callback);

    }


    private ApiResponse<CommonResponse> updateStatObjectWithHttpInfo(String objectId, StatSubscriptionNotification statSubscriptionNotification) throws ApiException {
        okhttp3.Call localVarCall = updateStatObjectValidateBeforeCall(objectId, statSubscriptionNotification, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatObjectAsync(String objectId, StatSubscriptionNotification statSubscriptionNotification, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatObjectValidateBeforeCall(objectId, statSubscriptionNotification, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatObjectRequestBuilder {
        private final String objectId;
        private Map<String, Object> statsBefore;
        private Map<String, Object> statsAfter;

        private UpdateStatObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set statsBefore
         * @param statsBefore  (optional)
         * @return UpdateStatObjectRequestBuilder
         */
        public UpdateStatObjectRequestBuilder statsBefore(Map<String, Object> statsBefore) {
            this.statsBefore = statsBefore;
            return this;
        }
        
        /**
         * Set statsAfter
         * @param statsAfter  (optional)
         * @return UpdateStatObjectRequestBuilder
         */
        public UpdateStatObjectRequestBuilder statsAfter(Map<String, Object> statsAfter) {
            this.statsAfter = statsAfter;
            return this;
        }
        
        /**
         * Build call for updateStatObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatSubscriptionNotification statSubscriptionNotification = buildBodyParams();
            return updateStatObjectCall(objectId, statSubscriptionNotification, _callback);
        }

        private StatSubscriptionNotification buildBodyParams() {
            StatSubscriptionNotification statSubscriptionNotification = new StatSubscriptionNotification();
            statSubscriptionNotification.statsBefore(this.statsBefore);
            statSubscriptionNotification.statsAfter(this.statsAfter);
            return statSubscriptionNotification;
        }

        /**
         * Execute updateStatObject request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            StatSubscriptionNotification statSubscriptionNotification = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateStatObjectWithHttpInfo(objectId, statSubscriptionNotification);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatObject request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            StatSubscriptionNotification statSubscriptionNotification = buildBodyParams();
            return updateStatObjectWithHttpInfo(objectId, statSubscriptionNotification);
        }

        /**
         * Execute updateStatObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            StatSubscriptionNotification statSubscriptionNotification = buildBodyParams();
            return updateStatObjectAsync(objectId, statSubscriptionNotification, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateStatObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatObjectRequestBuilder updateStatObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateStatObjectRequestBuilder(objectId);
    }
}
