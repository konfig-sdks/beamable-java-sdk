/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateLaunchMessageRequest;
import com.konfigthis.client.model.LaunchMessageListResponse;
import com.konfigthis.client.model.RemoveLaunchMessageRequest;
import com.konfigthis.client.model.SendMessageRequest;
import com.konfigthis.client.model.SendMessageResponse;
import com.konfigthis.client.model.SendMsg;
import com.konfigthis.client.model.SendReq;
import com.konfigthis.client.model.Social;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLaunchMessageCall(CreateLaunchMessageRequest createLaunchMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLaunchMessageRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/launch-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLaunchMessageValidateBeforeCall(CreateLaunchMessageRequest createLaunchMessageRequest, final ApiCallback _callback) throws ApiException {
        return createLaunchMessageCall(createLaunchMessageRequest, _callback);

    }


    private ApiResponse<CommonResponse> createLaunchMessageWithHttpInfo(CreateLaunchMessageRequest createLaunchMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = createLaunchMessageValidateBeforeCall(createLaunchMessageRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLaunchMessageAsync(CreateLaunchMessageRequest createLaunchMessageRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLaunchMessageValidateBeforeCall(createLaunchMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLaunchMessageRequestBuilder {
        private final String name;
        private final String body;

        private CreateLaunchMessageRequestBuilder(String name, String body) {
            this.name = name;
            this.body = body;
        }

        /**
         * Build call for createLaunchMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateLaunchMessageRequest createLaunchMessageRequest = buildBodyParams();
            return createLaunchMessageCall(createLaunchMessageRequest, _callback);
        }

        private CreateLaunchMessageRequest buildBodyParams() {
            CreateLaunchMessageRequest createLaunchMessageRequest = new CreateLaunchMessageRequest();
            createLaunchMessageRequest.name(this.name);
            createLaunchMessageRequest.body(this.body);
            return createLaunchMessageRequest;
        }

        /**
         * Execute createLaunchMessage request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            CreateLaunchMessageRequest createLaunchMessageRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createLaunchMessageWithHttpInfo(createLaunchMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLaunchMessage request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            CreateLaunchMessageRequest createLaunchMessageRequest = buildBodyParams();
            return createLaunchMessageWithHttpInfo(createLaunchMessageRequest);
        }

        /**
         * Execute createLaunchMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            CreateLaunchMessageRequest createLaunchMessageRequest = buildBodyParams();
            return createLaunchMessageAsync(createLaunchMessageRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateLaunchMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateLaunchMessageRequestBuilder createLaunchMessage(String name, String body) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        return new CreateLaunchMessageRequestBuilder(name, body);
    }
    private okhttp3.Call deleteLaunchMessageCall(RemoveLaunchMessageRequest removeLaunchMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeLaunchMessageRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/launch-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLaunchMessageValidateBeforeCall(RemoveLaunchMessageRequest removeLaunchMessageRequest, final ApiCallback _callback) throws ApiException {
        return deleteLaunchMessageCall(removeLaunchMessageRequest, _callback);

    }


    private ApiResponse<CommonResponse> deleteLaunchMessageWithHttpInfo(RemoveLaunchMessageRequest removeLaunchMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteLaunchMessageValidateBeforeCall(removeLaunchMessageRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteLaunchMessageAsync(RemoveLaunchMessageRequest removeLaunchMessageRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLaunchMessageValidateBeforeCall(removeLaunchMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteLaunchMessageRequestBuilder {
        private final String _file;

        private DeleteLaunchMessageRequestBuilder(String _file) {
            this._file = _file;
        }

        /**
         * Build call for deleteLaunchMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemoveLaunchMessageRequest removeLaunchMessageRequest = buildBodyParams();
            return deleteLaunchMessageCall(removeLaunchMessageRequest, _callback);
        }

        private RemoveLaunchMessageRequest buildBodyParams() {
            RemoveLaunchMessageRequest removeLaunchMessageRequest = new RemoveLaunchMessageRequest();
            removeLaunchMessageRequest._file(this._file);
            return removeLaunchMessageRequest;
        }

        /**
         * Execute deleteLaunchMessage request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            RemoveLaunchMessageRequest removeLaunchMessageRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = deleteLaunchMessageWithHttpInfo(removeLaunchMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteLaunchMessage request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            RemoveLaunchMessageRequest removeLaunchMessageRequest = buildBodyParams();
            return deleteLaunchMessageWithHttpInfo(removeLaunchMessageRequest);
        }

        /**
         * Execute deleteLaunchMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            RemoveLaunchMessageRequest removeLaunchMessageRequest = buildBodyParams();
            return deleteLaunchMessageAsync(removeLaunchMessageRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteLaunchMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLaunchMessageRequestBuilder deleteLaunchMessage(String _file) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
            

        return new DeleteLaunchMessageRequestBuilder(_file);
    }
    private okhttp3.Call getLaunchDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/launch-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLaunchDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLaunchDataCall(_callback);

    }


    private ApiResponse<LaunchMessageListResponse> getLaunchDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLaunchDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LaunchMessageListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLaunchDataAsync(final ApiCallback<LaunchMessageListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLaunchDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LaunchMessageListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLaunchDataRequestBuilder {

        private GetLaunchDataRequestBuilder() {
        }

        /**
         * Build call for getLaunchData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLaunchDataCall(_callback);
        }


        /**
         * Execute getLaunchData request
         * @return LaunchMessageListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LaunchMessageListResponse execute() throws ApiException {
            ApiResponse<LaunchMessageListResponse> localVarResp = getLaunchDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLaunchData request with HTTP info returned
         * @return ApiResponse&lt;LaunchMessageListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LaunchMessageListResponse> executeWithHttpInfo() throws ApiException {
            return getLaunchDataWithHttpInfo();
        }

        /**
         * Execute getLaunchData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LaunchMessageListResponse> _callback) throws ApiException {
            return getLaunchDataAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLaunchDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLaunchDataRequestBuilder getLaunchData() throws IllegalArgumentException {
        return new GetLaunchDataRequestBuilder();
    }
    private okhttp3.Call getMySocialDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/social/my";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMySocialDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMySocialDataCall(_callback);

    }


    private ApiResponse<Social> getMySocialDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMySocialDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Social>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMySocialDataAsync(final ApiCallback<Social> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMySocialDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Social>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMySocialDataRequestBuilder {

        private GetMySocialDataRequestBuilder() {
        }

        /**
         * Build call for getMySocialData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMySocialDataCall(_callback);
        }


        /**
         * Execute getMySocialData request
         * @return Social
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Social execute() throws ApiException {
            ApiResponse<Social> localVarResp = getMySocialDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMySocialData request with HTTP info returned
         * @return ApiResponse&lt;Social&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Social> executeWithHttpInfo() throws ApiException {
            return getMySocialDataWithHttpInfo();
        }

        /**
         * Execute getMySocialData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Social> _callback) throws ApiException {
            return getMySocialDataAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetMySocialDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMySocialDataRequestBuilder getMySocialData() throws IllegalArgumentException {
        return new GetMySocialDataRequestBuilder();
    }
    private okhttp3.Call sendMessageCall(String objectId, SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageRequest;

        // create path and map variables
        String localVarPath = "/object/chatV2/{objectId}/messages"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(String objectId, SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling sendMessage(Async)");
        }

        return sendMessageCall(objectId, sendMessageRequest, _callback);

    }


    private ApiResponse<SendMessageResponse> sendMessageWithHttpInfo(String objectId, SendMessageRequest sendMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(objectId, sendMessageRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendMessageAsync(String objectId, SendMessageRequest sendMessageRequest, final ApiCallback<SendMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(objectId, sendMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendMessageRequestBuilder {
        private final String objectId;
        private String roomId;
        private String content;

        private SendMessageRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set roomId
         * @param roomId  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder roomId(String roomId) {
            this.roomId = roomId;
            return this;
        }
        
        /**
         * Set content
         * @param content  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Build call for sendMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendMessageRequest sendMessageRequest = buildBodyParams();
            return sendMessageCall(objectId, sendMessageRequest, _callback);
        }

        private SendMessageRequest buildBodyParams() {
            SendMessageRequest sendMessageRequest = new SendMessageRequest();
            sendMessageRequest.roomId(this.roomId);
            sendMessageRequest.content(this.content);
            return sendMessageRequest;
        }

        /**
         * Execute sendMessage request
         * @return SendMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SendMessageResponse execute() throws ApiException {
            SendMessageRequest sendMessageRequest = buildBodyParams();
            ApiResponse<SendMessageResponse> localVarResp = sendMessageWithHttpInfo(objectId, sendMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendMessage request with HTTP info returned
         * @return ApiResponse&lt;SendMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendMessageResponse> executeWithHttpInfo() throws ApiException {
            SendMessageRequest sendMessageRequest = buildBodyParams();
            return sendMessageWithHttpInfo(objectId, sendMessageRequest);
        }

        /**
         * Execute sendMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendMessageResponse> _callback) throws ApiException {
            SendMessageRequest sendMessageRequest = buildBodyParams();
            return sendMessageAsync(objectId, sendMessageRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SendMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageRequestBuilder sendMessage(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SendMessageRequestBuilder(objectId);
    }
    private okhttp3.Call sendPushNotificationCall(SendReq sendReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendReq;

        // create path and map variables
        String localVarPath = "/basic/push/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPushNotificationValidateBeforeCall(SendReq sendReq, final ApiCallback _callback) throws ApiException {
        return sendPushNotificationCall(sendReq, _callback);

    }


    private ApiResponse<Object> sendPushNotificationWithHttpInfo(SendReq sendReq) throws ApiException {
        okhttp3.Call localVarCall = sendPushNotificationValidateBeforeCall(sendReq, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendPushNotificationAsync(SendReq sendReq, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPushNotificationValidateBeforeCall(sendReq, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendPushNotificationRequestBuilder {
        private List<SendMsg> msgs;

        private SendPushNotificationRequestBuilder() {
        }

        /**
         * Set msgs
         * @param msgs  (optional)
         * @return SendPushNotificationRequestBuilder
         */
        public SendPushNotificationRequestBuilder msgs(List<SendMsg> msgs) {
            this.msgs = msgs;
            return this;
        }
        
        /**
         * Build call for sendPushNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendReq sendReq = buildBodyParams();
            return sendPushNotificationCall(sendReq, _callback);
        }

        private SendReq buildBodyParams() {
            SendReq sendReq = new SendReq();
            sendReq.msgs(this.msgs);
            return sendReq;
        }

        /**
         * Execute sendPushNotification request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SendReq sendReq = buildBodyParams();
            ApiResponse<Object> localVarResp = sendPushNotificationWithHttpInfo(sendReq);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendPushNotification request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SendReq sendReq = buildBodyParams();
            return sendPushNotificationWithHttpInfo(sendReq);
        }

        /**
         * Execute sendPushNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SendReq sendReq = buildBodyParams();
            return sendPushNotificationAsync(sendReq, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendPushNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendPushNotificationRequestBuilder sendPushNotification() throws IllegalArgumentException {
        return new SendPushNotificationRequestBuilder();
    }
}
