/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateRoomRequest;
import com.konfigthis.client.model.GameResultsMessage;
import com.konfigthis.client.model.GetGameResponse;
import com.konfigthis.client.model.NewGameRequest;
import com.konfigthis.client.model.NotificationRequest;
import com.konfigthis.client.model.NotificationRequestData;
import com.konfigthis.client.model.PlayerResult;
import com.konfigthis.client.model.ProjectView;
import com.konfigthis.client.model.ResultsRequest;
import com.konfigthis.client.model.SimEvent;
import com.konfigthis.client.model.SyncReq;
import com.konfigthis.client.model.SyncRsp;
import com.konfigthis.client.model.UpdateGameHierarchyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GameApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GameApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GameApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRealmCall(NewGameRequest newGameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newGameRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/game";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRealmValidateBeforeCall(NewGameRequest newGameRequest, final ApiCallback _callback) throws ApiException {
        return createRealmCall(newGameRequest, _callback);

    }


    private ApiResponse<CommonResponse> createRealmWithHttpInfo(NewGameRequest newGameRequest) throws ApiException {
        okhttp3.Call localVarCall = createRealmValidateBeforeCall(newGameRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRealmAsync(NewGameRequest newGameRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRealmValidateBeforeCall(newGameRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRealmRequestBuilder {
        private final String gameName;

        private CreateRealmRequestBuilder(String gameName) {
            this.gameName = gameName;
        }

        /**
         * Build call for createRealm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewGameRequest newGameRequest = buildBodyParams();
            return createRealmCall(newGameRequest, _callback);
        }

        private NewGameRequest buildBodyParams() {
            NewGameRequest newGameRequest = new NewGameRequest();
            newGameRequest.gameName(this.gameName);
            return newGameRequest;
        }

        /**
         * Execute createRealm request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NewGameRequest newGameRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createRealmWithHttpInfo(newGameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRealm request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NewGameRequest newGameRequest = buildBodyParams();
            return createRealmWithHttpInfo(newGameRequest);
        }

        /**
         * Execute createRealm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NewGameRequest newGameRequest = buildBodyParams();
            return createRealmAsync(newGameRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateRealmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateRealmRequestBuilder createRealm(String gameName) throws IllegalArgumentException {
        if (gameName == null) throw new IllegalArgumentException("\"gameName\" is required but got null");
            

        return new CreateRealmRequestBuilder(gameName);
    }
    private okhttp3.Call getRealmsCall(String rootPID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/game";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rootPID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rootPID", rootPID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealmsValidateBeforeCall(String rootPID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rootPID' is set
        if (rootPID == null) {
            throw new ApiException("Missing the required parameter 'rootPID' when calling getRealms(Async)");
        }

        return getRealmsCall(rootPID, _callback);

    }


    private ApiResponse<GetGameResponse> getRealmsWithHttpInfo(String rootPID) throws ApiException {
        okhttp3.Call localVarCall = getRealmsValidateBeforeCall(rootPID, null);
        Type localVarReturnType = new TypeToken<GetGameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRealmsAsync(String rootPID, final ApiCallback<GetGameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealmsValidateBeforeCall(rootPID, _callback);
        Type localVarReturnType = new TypeToken<GetGameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRealmsRequestBuilder {
        private final String rootPID;

        private GetRealmsRequestBuilder(String rootPID) {
            this.rootPID = rootPID;
        }

        /**
         * Build call for getRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRealmsCall(rootPID, _callback);
        }


        /**
         * Execute getRealms request
         * @return GetGameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetGameResponse execute() throws ApiException {
            ApiResponse<GetGameResponse> localVarResp = getRealmsWithHttpInfo(rootPID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRealms request with HTTP info returned
         * @return ApiResponse&lt;GetGameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGameResponse> executeWithHttpInfo() throws ApiException {
            return getRealmsWithHttpInfo(rootPID);
        }

        /**
         * Execute getRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGameResponse> _callback) throws ApiException {
            return getRealmsAsync(rootPID, _callback);
        }
    }

    /**
     * 
     * 
     * @param rootPID  (required)
     * @return GetRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetRealmsRequestBuilder getRealms(String rootPID) throws IllegalArgumentException {
        if (rootPID == null) throw new IllegalArgumentException("\"rootPID\" is required but got null");
            

        return new GetRealmsRequestBuilder(rootPID);
    }
    private okhttp3.Call getRealmsGamesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealmsGamesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRealmsGamesCall(_callback);

    }


    private ApiResponse<GetGameResponse> getRealmsGamesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRealmsGamesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetGameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRealmsGamesAsync(final ApiCallback<GetGameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealmsGamesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetGameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRealmsGamesRequestBuilder {

        private GetRealmsGamesRequestBuilder() {
        }

        /**
         * Build call for getRealmsGames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRealmsGamesCall(_callback);
        }


        /**
         * Execute getRealmsGames request
         * @return GetGameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetGameResponse execute() throws ApiException {
            ApiResponse<GetGameResponse> localVarResp = getRealmsGamesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRealmsGames request with HTTP info returned
         * @return ApiResponse&lt;GetGameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGameResponse> executeWithHttpInfo() throws ApiException {
            return getRealmsGamesWithHttpInfo();
        }

        /**
         * Execute getRealmsGames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGameResponse> _callback) throws ApiException {
            return getRealmsGamesAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetRealmsGamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetRealmsGamesRequestBuilder getRealmsGames() throws IllegalArgumentException {
        return new GetRealmsGamesRequestBuilder();
    }
    private okhttp3.Call postNotificationCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/basic/notification/game";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNotificationValidateBeforeCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        return postNotificationCall(notificationRequest, _callback);

    }


    private ApiResponse<CommonResponse> postNotificationWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postNotificationValidateBeforeCall(notificationRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postNotificationAsync(NotificationRequest notificationRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNotificationValidateBeforeCall(notificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostNotificationRequestBuilder {
        private NotificationRequestData payload;
        private Integer dbid;
        private String customChannelSuffix;
        private List<Integer> dbids;

        private PostNotificationRequestBuilder() {
        }

        /**
         * Set payload
         * @param payload  (optional)
         * @return PostNotificationRequestBuilder
         */
        public PostNotificationRequestBuilder payload(NotificationRequestData payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set dbid
         * @param dbid  (optional)
         * @return PostNotificationRequestBuilder
         */
        public PostNotificationRequestBuilder dbid(Integer dbid) {
            this.dbid = dbid;
            return this;
        }
        
        /**
         * Set customChannelSuffix
         * @param customChannelSuffix  (optional)
         * @return PostNotificationRequestBuilder
         */
        public PostNotificationRequestBuilder customChannelSuffix(String customChannelSuffix) {
            this.customChannelSuffix = customChannelSuffix;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return PostNotificationRequestBuilder
         */
        public PostNotificationRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for postNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return postNotificationCall(notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.payload(this.payload);
            notificationRequest.dbid(this.dbid);
            notificationRequest.customChannelSuffix(this.customChannelSuffix);
            notificationRequest.dbids(this.dbids);
            return notificationRequest;
        }

        /**
         * Execute postNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = postNotificationWithHttpInfo(notificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return postNotificationWithHttpInfo(notificationRequest);
        }

        /**
         * Execute postNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return postNotificationAsync(notificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return PostNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostNotificationRequestBuilder postNotification() throws IllegalArgumentException {
        return new PostNotificationRequestBuilder();
    }
    private okhttp3.Call relayObjectPostCall(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRoomRequest;

        // create path and map variables
        String localVarPath = "/object/gamerelay/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relayObjectPostValidateBeforeCall(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling relayObjectPost(Async)");
        }

        return relayObjectPostCall(objectId, createRoomRequest, _callback);

    }


    private ApiResponse<CommonResponse> relayObjectPostWithHttpInfo(String objectId, CreateRoomRequest createRoomRequest) throws ApiException {
        okhttp3.Call localVarCall = relayObjectPostValidateBeforeCall(objectId, createRoomRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call relayObjectPostAsync(String objectId, CreateRoomRequest createRoomRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = relayObjectPostValidateBeforeCall(objectId, createRoomRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RelayObjectPostRequestBuilder {
        private final Boolean keepSubscribed;
        private final String objectId;
        private String roomName;
        private List<Integer> players;
        private String gameType;
        private List<Integer> dbids;

        private RelayObjectPostRequestBuilder(Boolean keepSubscribed, String objectId) {
            this.keepSubscribed = keepSubscribed;
            this.objectId = objectId;
        }

        /**
         * Set roomName
         * @param roomName  (optional)
         * @return RelayObjectPostRequestBuilder
         */
        public RelayObjectPostRequestBuilder roomName(String roomName) {
            this.roomName = roomName;
            return this;
        }
        
        /**
         * Set players
         * @param players  (optional)
         * @return RelayObjectPostRequestBuilder
         */
        public RelayObjectPostRequestBuilder players(List<Integer> players) {
            this.players = players;
            return this;
        }
        
        /**
         * Set gameType
         * @param gameType  (optional)
         * @return RelayObjectPostRequestBuilder
         */
        public RelayObjectPostRequestBuilder gameType(String gameType) {
            this.gameType = gameType;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return RelayObjectPostRequestBuilder
         */
        public RelayObjectPostRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for relayObjectPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return relayObjectPostCall(objectId, createRoomRequest, _callback);
        }

        private CreateRoomRequest buildBodyParams() {
            CreateRoomRequest createRoomRequest = new CreateRoomRequest();
            createRoomRequest.roomName(this.roomName);
            createRoomRequest.keepSubscribed(this.keepSubscribed);
            createRoomRequest.players(this.players);
            createRoomRequest.gameType(this.gameType);
            createRoomRequest.dbids(this.dbids);
            return createRoomRequest;
        }

        /**
         * Execute relayObjectPost request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = relayObjectPostWithHttpInfo(objectId, createRoomRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute relayObjectPost request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return relayObjectPostWithHttpInfo(objectId, createRoomRequest);
        }

        /**
         * Execute relayObjectPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            CreateRoomRequest createRoomRequest = buildBodyParams();
            return relayObjectPostAsync(objectId, createRoomRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RelayObjectPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RelayObjectPostRequestBuilder relayObjectPost(Boolean keepSubscribed, String objectId) throws IllegalArgumentException {
        if (keepSubscribed == null) throw new IllegalArgumentException("\"keepSubscribed\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RelayObjectPostRequestBuilder(keepSubscribed, objectId);
    }
    private okhttp3.Call relayObjectResultsCall(String objectId, ResultsRequest resultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resultsRequest;

        // create path and map variables
        String localVarPath = "/object/gamerelay/{objectId}/results"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relayObjectResultsValidateBeforeCall(String objectId, ResultsRequest resultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling relayObjectResults(Async)");
        }

        return relayObjectResultsCall(objectId, resultsRequest, _callback);

    }


    private ApiResponse<GameResultsMessage> relayObjectResultsWithHttpInfo(String objectId, ResultsRequest resultsRequest) throws ApiException {
        okhttp3.Call localVarCall = relayObjectResultsValidateBeforeCall(objectId, resultsRequest, null);
        Type localVarReturnType = new TypeToken<GameResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call relayObjectResultsAsync(String objectId, ResultsRequest resultsRequest, final ApiCallback<GameResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = relayObjectResultsValidateBeforeCall(objectId, resultsRequest, _callback);
        Type localVarReturnType = new TypeToken<GameResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RelayObjectResultsRequestBuilder {
        private final String objectId;
        private List<PlayerResult> results;

        private RelayObjectResultsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set results
         * @param results  (optional)
         * @return RelayObjectResultsRequestBuilder
         */
        public RelayObjectResultsRequestBuilder results(List<PlayerResult> results) {
            this.results = results;
            return this;
        }
        
        /**
         * Build call for relayObjectResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ResultsRequest resultsRequest = buildBodyParams();
            return relayObjectResultsCall(objectId, resultsRequest, _callback);
        }

        private ResultsRequest buildBodyParams() {
            ResultsRequest resultsRequest = new ResultsRequest();
            resultsRequest.results(this.results);
            return resultsRequest;
        }

        /**
         * Execute relayObjectResults request
         * @return GameResultsMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GameResultsMessage execute() throws ApiException {
            ResultsRequest resultsRequest = buildBodyParams();
            ApiResponse<GameResultsMessage> localVarResp = relayObjectResultsWithHttpInfo(objectId, resultsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute relayObjectResults request with HTTP info returned
         * @return ApiResponse&lt;GameResultsMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GameResultsMessage> executeWithHttpInfo() throws ApiException {
            ResultsRequest resultsRequest = buildBodyParams();
            return relayObjectResultsWithHttpInfo(objectId, resultsRequest);
        }

        /**
         * Execute relayObjectResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GameResultsMessage> _callback) throws ApiException {
            ResultsRequest resultsRequest = buildBodyParams();
            return relayObjectResultsAsync(objectId, resultsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RelayObjectResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RelayObjectResultsRequestBuilder relayObjectResults(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RelayObjectResultsRequestBuilder(objectId);
    }
    private okhttp3.Call relayObjectSyncCall(String objectId, SyncReq syncReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = syncReq;

        // create path and map variables
        String localVarPath = "/object/gamerelay/{objectId}/sync"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relayObjectSyncValidateBeforeCall(String objectId, SyncReq syncReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling relayObjectSync(Async)");
        }

        return relayObjectSyncCall(objectId, syncReq, _callback);

    }


    private ApiResponse<SyncRsp> relayObjectSyncWithHttpInfo(String objectId, SyncReq syncReq) throws ApiException {
        okhttp3.Call localVarCall = relayObjectSyncValidateBeforeCall(objectId, syncReq, null);
        Type localVarReturnType = new TypeToken<SyncRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call relayObjectSyncAsync(String objectId, SyncReq syncReq, final ApiCallback<SyncRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = relayObjectSyncValidateBeforeCall(objectId, syncReq, _callback);
        Type localVarReturnType = new TypeToken<SyncRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RelayObjectSyncRequestBuilder {
        private final Integer t;
        private final String objectId;
        private List<SimEvent> events;

        private RelayObjectSyncRequestBuilder(Integer t, String objectId) {
            this.t = t;
            this.objectId = objectId;
        }

        /**
         * Set events
         * @param events  (optional)
         * @return RelayObjectSyncRequestBuilder
         */
        public RelayObjectSyncRequestBuilder events(List<SimEvent> events) {
            this.events = events;
            return this;
        }
        
        /**
         * Build call for relayObjectSync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SyncReq syncReq = buildBodyParams();
            return relayObjectSyncCall(objectId, syncReq, _callback);
        }

        private SyncReq buildBodyParams() {
            SyncReq syncReq = new SyncReq();
            syncReq.t(this.t);
            syncReq.events(this.events);
            return syncReq;
        }

        /**
         * Execute relayObjectSync request
         * @return SyncRsp
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SyncRsp execute() throws ApiException {
            SyncReq syncReq = buildBodyParams();
            ApiResponse<SyncRsp> localVarResp = relayObjectSyncWithHttpInfo(objectId, syncReq);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute relayObjectSync request with HTTP info returned
         * @return ApiResponse&lt;SyncRsp&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncRsp> executeWithHttpInfo() throws ApiException {
            SyncReq syncReq = buildBodyParams();
            return relayObjectSyncWithHttpInfo(objectId, syncReq);
        }

        /**
         * Execute relayObjectSync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncRsp> _callback) throws ApiException {
            SyncReq syncReq = buildBodyParams();
            return relayObjectSyncAsync(objectId, syncReq, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RelayObjectSyncRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RelayObjectSyncRequestBuilder relayObjectSync(Integer t, String objectId) throws IllegalArgumentException {
        if (t == null) throw new IllegalArgumentException("\"t\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RelayObjectSyncRequestBuilder(t, objectId);
    }
    private okhttp3.Call updateRealmCall(UpdateGameHierarchyRequest updateGameHierarchyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGameHierarchyRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/game";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRealmValidateBeforeCall(UpdateGameHierarchyRequest updateGameHierarchyRequest, final ApiCallback _callback) throws ApiException {
        return updateRealmCall(updateGameHierarchyRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateRealmWithHttpInfo(UpdateGameHierarchyRequest updateGameHierarchyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRealmValidateBeforeCall(updateGameHierarchyRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRealmAsync(UpdateGameHierarchyRequest updateGameHierarchyRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRealmValidateBeforeCall(updateGameHierarchyRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRealmRequestBuilder {
        private final String rootPID;
        private final List<ProjectView> projects;

        private UpdateRealmRequestBuilder(String rootPID, List<ProjectView> projects) {
            this.rootPID = rootPID;
            this.projects = projects;
        }

        /**
         * Build call for updateRealm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateGameHierarchyRequest updateGameHierarchyRequest = buildBodyParams();
            return updateRealmCall(updateGameHierarchyRequest, _callback);
        }

        private UpdateGameHierarchyRequest buildBodyParams() {
            UpdateGameHierarchyRequest updateGameHierarchyRequest = new UpdateGameHierarchyRequest();
            updateGameHierarchyRequest.rootPID(this.rootPID);
            updateGameHierarchyRequest.projects(this.projects);
            return updateGameHierarchyRequest;
        }

        /**
         * Execute updateRealm request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            UpdateGameHierarchyRequest updateGameHierarchyRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateRealmWithHttpInfo(updateGameHierarchyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRealm request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            UpdateGameHierarchyRequest updateGameHierarchyRequest = buildBodyParams();
            return updateRealmWithHttpInfo(updateGameHierarchyRequest);
        }

        /**
         * Execute updateRealm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            UpdateGameHierarchyRequest updateGameHierarchyRequest = buildBodyParams();
            return updateRealmAsync(updateGameHierarchyRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateRealmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRealmRequestBuilder updateRealm(String rootPID, List<ProjectView> projects) throws IllegalArgumentException {
        if (rootPID == null) throw new IllegalArgumentException("\"rootPID\" is required but got null");
            

        if (projects == null) throw new IllegalArgumentException("\"projects\" is required but got null");
        return new UpdateRealmRequestBuilder(rootPID, projects);
    }
}
