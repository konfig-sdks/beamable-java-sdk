/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClaimEntitlementRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.EntitlementDefRequest;
import com.konfigthis.client.model.EntitlementGenerator;
import com.konfigthis.client.model.EntitlementGrantMultiRequest;
import com.konfigthis.client.model.EntitlementListResponse;
import com.konfigthis.client.model.EntitlementResponse;
import com.konfigthis.client.model.ModifyEntitlementDefinitionRequest;
import com.konfigthis.client.model.RevokeEntitlementRequest;
import com.konfigthis.client.model.UploadEntitlementDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EntitlementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EntitlementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EntitlementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLegacyEntitlementDefsCall(EntitlementGrantMultiRequest entitlementGrantMultiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entitlementGrantMultiRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs/grant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLegacyEntitlementDefsValidateBeforeCall(EntitlementGrantMultiRequest entitlementGrantMultiRequest, final ApiCallback _callback) throws ApiException {
        return createLegacyEntitlementDefsCall(entitlementGrantMultiRequest, _callback);

    }


    private ApiResponse<EmptyResponse> createLegacyEntitlementDefsWithHttpInfo(EntitlementGrantMultiRequest entitlementGrantMultiRequest) throws ApiException {
        okhttp3.Call localVarCall = createLegacyEntitlementDefsValidateBeforeCall(entitlementGrantMultiRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLegacyEntitlementDefsAsync(EntitlementGrantMultiRequest entitlementGrantMultiRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLegacyEntitlementDefsValidateBeforeCall(entitlementGrantMultiRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLegacyEntitlementDefsRequestBuilder {
        private List<Integer> gamerTags;
        private List<EntitlementGenerator> generators;

        private CreateLegacyEntitlementDefsRequestBuilder() {
        }

        /**
         * Set gamerTags
         * @param gamerTags  (optional)
         * @return CreateLegacyEntitlementDefsRequestBuilder
         */
        public CreateLegacyEntitlementDefsRequestBuilder gamerTags(List<Integer> gamerTags) {
            this.gamerTags = gamerTags;
            return this;
        }
        
        /**
         * Set generators
         * @param generators  (optional)
         * @return CreateLegacyEntitlementDefsRequestBuilder
         */
        public CreateLegacyEntitlementDefsRequestBuilder generators(List<EntitlementGenerator> generators) {
            this.generators = generators;
            return this;
        }
        
        /**
         * Build call for createLegacyEntitlementDefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EntitlementGrantMultiRequest entitlementGrantMultiRequest = buildBodyParams();
            return createLegacyEntitlementDefsCall(entitlementGrantMultiRequest, _callback);
        }

        private EntitlementGrantMultiRequest buildBodyParams() {
            EntitlementGrantMultiRequest entitlementGrantMultiRequest = new EntitlementGrantMultiRequest();
            entitlementGrantMultiRequest.gamerTags(this.gamerTags);
            entitlementGrantMultiRequest.generators(this.generators);
            return entitlementGrantMultiRequest;
        }

        /**
         * Execute createLegacyEntitlementDefs request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            EntitlementGrantMultiRequest entitlementGrantMultiRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createLegacyEntitlementDefsWithHttpInfo(entitlementGrantMultiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLegacyEntitlementDefs request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            EntitlementGrantMultiRequest entitlementGrantMultiRequest = buildBodyParams();
            return createLegacyEntitlementDefsWithHttpInfo(entitlementGrantMultiRequest);
        }

        /**
         * Execute createLegacyEntitlementDefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            EntitlementGrantMultiRequest entitlementGrantMultiRequest = buildBodyParams();
            return createLegacyEntitlementDefsAsync(entitlementGrantMultiRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateLegacyEntitlementDefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateLegacyEntitlementDefsRequestBuilder createLegacyEntitlementDefs() throws IllegalArgumentException {
        return new CreateLegacyEntitlementDefsRequestBuilder();
    }
    private okhttp3.Call createLegacyEntitlementDefs_0Call(ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyEntitlementDefinitionRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLegacyEntitlementDefs_0ValidateBeforeCall(ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createLegacyEntitlementDefs_0Call(modifyEntitlementDefinitionRequest, _callback);

    }


    private ApiResponse<EmptyResponse> createLegacyEntitlementDefs_0WithHttpInfo(ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createLegacyEntitlementDefs_0ValidateBeforeCall(modifyEntitlementDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLegacyEntitlementDefs_0Async(ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLegacyEntitlementDefs_0ValidateBeforeCall(modifyEntitlementDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLegacyEntitlementDefs0RequestBuilder {
        private String symbol;
        private EntitlementDefRequest request;

        private CreateLegacyEntitlementDefs0RequestBuilder() {
        }

        /**
         * Set symbol
         * @param symbol  (optional)
         * @return CreateLegacyEntitlementDefs0RequestBuilder
         */
        public CreateLegacyEntitlementDefs0RequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Set request
         * @param request  (optional)
         * @return CreateLegacyEntitlementDefs0RequestBuilder
         */
        public CreateLegacyEntitlementDefs0RequestBuilder request(EntitlementDefRequest request) {
            this.request = request;
            return this;
        }
        
        /**
         * Build call for createLegacyEntitlementDefs_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest = buildBodyParams();
            return createLegacyEntitlementDefs_0Call(modifyEntitlementDefinitionRequest, _callback);
        }

        private ModifyEntitlementDefinitionRequest buildBodyParams() {
            ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest = new ModifyEntitlementDefinitionRequest();
            modifyEntitlementDefinitionRequest.symbol(this.symbol);
            modifyEntitlementDefinitionRequest.request(this.request);
            return modifyEntitlementDefinitionRequest;
        }

        /**
         * Execute createLegacyEntitlementDefs_0 request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createLegacyEntitlementDefs_0WithHttpInfo(modifyEntitlementDefinitionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLegacyEntitlementDefs_0 request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest = buildBodyParams();
            return createLegacyEntitlementDefs_0WithHttpInfo(modifyEntitlementDefinitionRequest);
        }

        /**
         * Execute createLegacyEntitlementDefs_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            ModifyEntitlementDefinitionRequest modifyEntitlementDefinitionRequest = buildBodyParams();
            return createLegacyEntitlementDefs_0Async(modifyEntitlementDefinitionRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateLegacyEntitlementDefs0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateLegacyEntitlementDefs0RequestBuilder createLegacyEntitlementDefs_0() throws IllegalArgumentException {
        return new CreateLegacyEntitlementDefs0RequestBuilder();
    }
    private okhttp3.Call defineEntitlementLegacyCall(ClaimEntitlementRequest claimEntitlementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimEntitlementRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs/claim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call defineEntitlementLegacyValidateBeforeCall(ClaimEntitlementRequest claimEntitlementRequest, final ApiCallback _callback) throws ApiException {
        return defineEntitlementLegacyCall(claimEntitlementRequest, _callback);

    }


    private ApiResponse<EntitlementResponse> defineEntitlementLegacyWithHttpInfo(ClaimEntitlementRequest claimEntitlementRequest) throws ApiException {
        okhttp3.Call localVarCall = defineEntitlementLegacyValidateBeforeCall(claimEntitlementRequest, null);
        Type localVarReturnType = new TypeToken<EntitlementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call defineEntitlementLegacyAsync(ClaimEntitlementRequest claimEntitlementRequest, final ApiCallback<EntitlementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = defineEntitlementLegacyValidateBeforeCall(claimEntitlementRequest, _callback);
        Type localVarReturnType = new TypeToken<EntitlementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DefineEntitlementLegacyRequestBuilder {
        private final Integer gt;
        private String symbol;
        private String spec;
        private String uuid;

        private DefineEntitlementLegacyRequestBuilder(Integer gt) {
            this.gt = gt;
        }

        /**
         * Set symbol
         * @param symbol  (optional)
         * @return DefineEntitlementLegacyRequestBuilder
         */
        public DefineEntitlementLegacyRequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Set spec
         * @param spec  (optional)
         * @return DefineEntitlementLegacyRequestBuilder
         */
        public DefineEntitlementLegacyRequestBuilder spec(String spec) {
            this.spec = spec;
            return this;
        }
        
        /**
         * Set uuid
         * @param uuid  (optional)
         * @return DefineEntitlementLegacyRequestBuilder
         */
        public DefineEntitlementLegacyRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Build call for defineEntitlementLegacy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClaimEntitlementRequest claimEntitlementRequest = buildBodyParams();
            return defineEntitlementLegacyCall(claimEntitlementRequest, _callback);
        }

        private ClaimEntitlementRequest buildBodyParams() {
            ClaimEntitlementRequest claimEntitlementRequest = new ClaimEntitlementRequest();
            claimEntitlementRequest.gt(this.gt);
            claimEntitlementRequest.symbol(this.symbol);
            claimEntitlementRequest.spec(this.spec);
            claimEntitlementRequest.uuid(this.uuid);
            return claimEntitlementRequest;
        }

        /**
         * Execute defineEntitlementLegacy request
         * @return EntitlementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EntitlementResponse execute() throws ApiException {
            ClaimEntitlementRequest claimEntitlementRequest = buildBodyParams();
            ApiResponse<EntitlementResponse> localVarResp = defineEntitlementLegacyWithHttpInfo(claimEntitlementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute defineEntitlementLegacy request with HTTP info returned
         * @return ApiResponse&lt;EntitlementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntitlementResponse> executeWithHttpInfo() throws ApiException {
            ClaimEntitlementRequest claimEntitlementRequest = buildBodyParams();
            return defineEntitlementLegacyWithHttpInfo(claimEntitlementRequest);
        }

        /**
         * Execute defineEntitlementLegacy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntitlementResponse> _callback) throws ApiException {
            ClaimEntitlementRequest claimEntitlementRequest = buildBodyParams();
            return defineEntitlementLegacyAsync(claimEntitlementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DefineEntitlementLegacyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DefineEntitlementLegacyRequestBuilder defineEntitlementLegacy(Integer gt) throws IllegalArgumentException {
        if (gt == null) throw new IllegalArgumentException("\"gt\" is required but got null");
        return new DefineEntitlementLegacyRequestBuilder(gt);
    }
    private okhttp3.Call getPlayerEntitlementsCall(Integer gt, String state, Integer skip, String symbol, Boolean icw, String spec, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (icw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icw", icw));
        }

        if (spec != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spec", spec));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (gt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gt", gt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerEntitlementsValidateBeforeCall(Integer gt, String state, Integer skip, String symbol, Boolean icw, String spec, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gt' is set
        if (gt == null) {
            throw new ApiException("Missing the required parameter 'gt' when calling getPlayerEntitlements(Async)");
        }

        return getPlayerEntitlementsCall(gt, state, skip, symbol, icw, spec, limit, _callback);

    }


    private ApiResponse<EntitlementListResponse> getPlayerEntitlementsWithHttpInfo(Integer gt, String state, Integer skip, String symbol, Boolean icw, String spec, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPlayerEntitlementsValidateBeforeCall(gt, state, skip, symbol, icw, spec, limit, null);
        Type localVarReturnType = new TypeToken<EntitlementListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlayerEntitlementsAsync(Integer gt, String state, Integer skip, String symbol, Boolean icw, String spec, Integer limit, final ApiCallback<EntitlementListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerEntitlementsValidateBeforeCall(gt, state, skip, symbol, icw, spec, limit, _callback);
        Type localVarReturnType = new TypeToken<EntitlementListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlayerEntitlementsRequestBuilder {
        private final Integer gt;
        private String state;
        private Integer skip;
        private String symbol;
        private Boolean icw;
        private String spec;
        private Integer limit;

        private GetPlayerEntitlementsRequestBuilder(Integer gt) {
            this.gt = gt;
        }

        /**
         * Set state
         * @param state  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set skip
         * @param skip  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder skip(Integer skip) {
            this.skip = skip;
            return this;
        }
        
        /**
         * Set symbol
         * @param symbol  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Set icw
         * @param icw  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder icw(Boolean icw) {
            this.icw = icw;
            return this;
        }
        
        /**
         * Set spec
         * @param spec  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder spec(String spec) {
            this.spec = spec;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetPlayerEntitlementsRequestBuilder
         */
        public GetPlayerEntitlementsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getPlayerEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlayerEntitlementsCall(gt, state, skip, symbol, icw, spec, limit, _callback);
        }


        /**
         * Execute getPlayerEntitlements request
         * @return EntitlementListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EntitlementListResponse execute() throws ApiException {
            ApiResponse<EntitlementListResponse> localVarResp = getPlayerEntitlementsWithHttpInfo(gt, state, skip, symbol, icw, spec, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlayerEntitlements request with HTTP info returned
         * @return ApiResponse&lt;EntitlementListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntitlementListResponse> executeWithHttpInfo() throws ApiException {
            return getPlayerEntitlementsWithHttpInfo(gt, state, skip, symbol, icw, spec, limit);
        }

        /**
         * Execute getPlayerEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntitlementListResponse> _callback) throws ApiException {
            return getPlayerEntitlementsAsync(gt, state, skip, symbol, icw, spec, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @param gt  (required)
     * @return GetPlayerEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPlayerEntitlementsRequestBuilder getPlayerEntitlements(Integer gt) throws IllegalArgumentException {
        if (gt == null) throw new IllegalArgumentException("\"gt\" is required but got null");
        return new GetPlayerEntitlementsRequestBuilder(gt);
    }
    private okhttp3.Call revokeLegacyEntitlementDefsCall(RevokeEntitlementRequest revokeEntitlementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeEntitlementRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeLegacyEntitlementDefsValidateBeforeCall(RevokeEntitlementRequest revokeEntitlementRequest, final ApiCallback _callback) throws ApiException {
        return revokeLegacyEntitlementDefsCall(revokeEntitlementRequest, _callback);

    }


    private ApiResponse<EntitlementResponse> revokeLegacyEntitlementDefsWithHttpInfo(RevokeEntitlementRequest revokeEntitlementRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeLegacyEntitlementDefsValidateBeforeCall(revokeEntitlementRequest, null);
        Type localVarReturnType = new TypeToken<EntitlementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokeLegacyEntitlementDefsAsync(RevokeEntitlementRequest revokeEntitlementRequest, final ApiCallback<EntitlementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeLegacyEntitlementDefsValidateBeforeCall(revokeEntitlementRequest, _callback);
        Type localVarReturnType = new TypeToken<EntitlementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokeLegacyEntitlementDefsRequestBuilder {
        private String uuid;

        private RevokeLegacyEntitlementDefsRequestBuilder() {
        }

        /**
         * Set uuid
         * @param uuid  (optional)
         * @return RevokeLegacyEntitlementDefsRequestBuilder
         */
        public RevokeLegacyEntitlementDefsRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Build call for revokeLegacyEntitlementDefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RevokeEntitlementRequest revokeEntitlementRequest = buildBodyParams();
            return revokeLegacyEntitlementDefsCall(revokeEntitlementRequest, _callback);
        }

        private RevokeEntitlementRequest buildBodyParams() {
            RevokeEntitlementRequest revokeEntitlementRequest = new RevokeEntitlementRequest();
            revokeEntitlementRequest.uuid(this.uuid);
            return revokeEntitlementRequest;
        }

        /**
         * Execute revokeLegacyEntitlementDefs request
         * @return EntitlementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EntitlementResponse execute() throws ApiException {
            RevokeEntitlementRequest revokeEntitlementRequest = buildBodyParams();
            ApiResponse<EntitlementResponse> localVarResp = revokeLegacyEntitlementDefsWithHttpInfo(revokeEntitlementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokeLegacyEntitlementDefs request with HTTP info returned
         * @return ApiResponse&lt;EntitlementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntitlementResponse> executeWithHttpInfo() throws ApiException {
            RevokeEntitlementRequest revokeEntitlementRequest = buildBodyParams();
            return revokeLegacyEntitlementDefsWithHttpInfo(revokeEntitlementRequest);
        }

        /**
         * Execute revokeLegacyEntitlementDefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntitlementResponse> _callback) throws ApiException {
            RevokeEntitlementRequest revokeEntitlementRequest = buildBodyParams();
            return revokeLegacyEntitlementDefsAsync(revokeEntitlementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return RevokeLegacyEntitlementDefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RevokeLegacyEntitlementDefsRequestBuilder revokeLegacyEntitlementDefs() throws IllegalArgumentException {
        return new RevokeLegacyEntitlementDefsRequestBuilder();
    }
    private okhttp3.Call uploadLegacyEntitlementDefsCall(UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadEntitlementDefinitionRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-entitlement-defs/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadLegacyEntitlementDefsValidateBeforeCall(UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return uploadLegacyEntitlementDefsCall(uploadEntitlementDefinitionRequest, _callback);

    }


    private ApiResponse<EmptyResponse> uploadLegacyEntitlementDefsWithHttpInfo(UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadLegacyEntitlementDefsValidateBeforeCall(uploadEntitlementDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadLegacyEntitlementDefsAsync(UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadLegacyEntitlementDefsValidateBeforeCall(uploadEntitlementDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadLegacyEntitlementDefsRequestBuilder {
        private List<ModifyEntitlementDefinitionRequest> entitlements;

        private UploadLegacyEntitlementDefsRequestBuilder() {
        }

        /**
         * Set entitlements
         * @param entitlements  (optional)
         * @return UploadLegacyEntitlementDefsRequestBuilder
         */
        public UploadLegacyEntitlementDefsRequestBuilder entitlements(List<ModifyEntitlementDefinitionRequest> entitlements) {
            this.entitlements = entitlements;
            return this;
        }
        
        /**
         * Build call for uploadLegacyEntitlementDefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest = buildBodyParams();
            return uploadLegacyEntitlementDefsCall(uploadEntitlementDefinitionRequest, _callback);
        }

        private UploadEntitlementDefinitionRequest buildBodyParams() {
            UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest = new UploadEntitlementDefinitionRequest();
            uploadEntitlementDefinitionRequest.entitlements(this.entitlements);
            return uploadEntitlementDefinitionRequest;
        }

        /**
         * Execute uploadLegacyEntitlementDefs request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = uploadLegacyEntitlementDefsWithHttpInfo(uploadEntitlementDefinitionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadLegacyEntitlementDefs request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest = buildBodyParams();
            return uploadLegacyEntitlementDefsWithHttpInfo(uploadEntitlementDefinitionRequest);
        }

        /**
         * Execute uploadLegacyEntitlementDefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            UploadEntitlementDefinitionRequest uploadEntitlementDefinitionRequest = buildBodyParams();
            return uploadLegacyEntitlementDefsAsync(uploadEntitlementDefinitionRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UploadLegacyEntitlementDefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UploadLegacyEntitlementDefsRequestBuilder uploadLegacyEntitlementDefs() throws IllegalArgumentException {
        return new UploadLegacyEntitlementDefsRequestBuilder();
    }
}
