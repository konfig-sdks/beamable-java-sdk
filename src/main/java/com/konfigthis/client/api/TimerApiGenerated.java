/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CookedTimerResponse;
import com.konfigthis.client.model.CreateTimerRequest;
import com.konfigthis.client.model.DeleteTimerRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.ListTimersResponse;
import com.konfigthis.client.model.Timer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLegacyTimerCall(CreateTimerRequest createTimerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimerRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-timers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLegacyTimerValidateBeforeCall(CreateTimerRequest createTimerRequest, final ApiCallback _callback) throws ApiException {
        return createLegacyTimerCall(createTimerRequest, _callback);

    }


    private ApiResponse<Timer> createLegacyTimerWithHttpInfo(CreateTimerRequest createTimerRequest) throws ApiException {
        okhttp3.Call localVarCall = createLegacyTimerValidateBeforeCall(createTimerRequest, null);
        Type localVarReturnType = new TypeToken<Timer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLegacyTimerAsync(CreateTimerRequest createTimerRequest, final ApiCallback<Timer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLegacyTimerValidateBeforeCall(createTimerRequest, _callback);
        Type localVarReturnType = new TypeToken<Timer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLegacyTimerRequestBuilder {
        private String name;
        private String cronish;

        private CreateLegacyTimerRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateLegacyTimerRequestBuilder
         */
        public CreateLegacyTimerRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set cronish
         * @param cronish  (optional)
         * @return CreateLegacyTimerRequestBuilder
         */
        public CreateLegacyTimerRequestBuilder cronish(String cronish) {
            this.cronish = cronish;
            return this;
        }
        
        /**
         * Build call for createLegacyTimer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTimerRequest createTimerRequest = buildBodyParams();
            return createLegacyTimerCall(createTimerRequest, _callback);
        }

        private CreateTimerRequest buildBodyParams() {
            CreateTimerRequest createTimerRequest = new CreateTimerRequest();
            createTimerRequest.name(this.name);
            createTimerRequest.cronish(this.cronish);
            return createTimerRequest;
        }

        /**
         * Execute createLegacyTimer request
         * @return Timer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Timer execute() throws ApiException {
            CreateTimerRequest createTimerRequest = buildBodyParams();
            ApiResponse<Timer> localVarResp = createLegacyTimerWithHttpInfo(createTimerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLegacyTimer request with HTTP info returned
         * @return ApiResponse&lt;Timer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timer> executeWithHttpInfo() throws ApiException {
            CreateTimerRequest createTimerRequest = buildBodyParams();
            return createLegacyTimerWithHttpInfo(createTimerRequest);
        }

        /**
         * Execute createLegacyTimer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timer> _callback) throws ApiException {
            CreateTimerRequest createTimerRequest = buildBodyParams();
            return createLegacyTimerAsync(createTimerRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateLegacyTimerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateLegacyTimerRequestBuilder createLegacyTimer() throws IllegalArgumentException {
        return new CreateLegacyTimerRequestBuilder();
    }
    private okhttp3.Call deleteLegacyTimersCall(DeleteTimerRequest deleteTimerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTimerRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-timers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLegacyTimersValidateBeforeCall(DeleteTimerRequest deleteTimerRequest, final ApiCallback _callback) throws ApiException {
        return deleteLegacyTimersCall(deleteTimerRequest, _callback);

    }


    private ApiResponse<EmptyResponse> deleteLegacyTimersWithHttpInfo(DeleteTimerRequest deleteTimerRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteLegacyTimersValidateBeforeCall(deleteTimerRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteLegacyTimersAsync(DeleteTimerRequest deleteTimerRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLegacyTimersValidateBeforeCall(deleteTimerRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteLegacyTimersRequestBuilder {
        private String name;

        private DeleteLegacyTimersRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return DeleteLegacyTimersRequestBuilder
         */
        public DeleteLegacyTimersRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for deleteLegacyTimers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteTimerRequest deleteTimerRequest = buildBodyParams();
            return deleteLegacyTimersCall(deleteTimerRequest, _callback);
        }

        private DeleteTimerRequest buildBodyParams() {
            DeleteTimerRequest deleteTimerRequest = new DeleteTimerRequest();
            deleteTimerRequest.name(this.name);
            return deleteTimerRequest;
        }

        /**
         * Execute deleteLegacyTimers request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            DeleteTimerRequest deleteTimerRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = deleteLegacyTimersWithHttpInfo(deleteTimerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteLegacyTimers request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            DeleteTimerRequest deleteTimerRequest = buildBodyParams();
            return deleteLegacyTimersWithHttpInfo(deleteTimerRequest);
        }

        /**
         * Execute deleteLegacyTimers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            DeleteTimerRequest deleteTimerRequest = buildBodyParams();
            return deleteLegacyTimersAsync(deleteTimerRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteLegacyTimersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLegacyTimersRequestBuilder deleteLegacyTimers() throws IllegalArgumentException {
        return new DeleteLegacyTimersRequestBuilder();
    }
    private okhttp3.Call getLegacyTimersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-timers/defs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyTimersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyTimersCall(_callback);

    }


    private ApiResponse<ListTimersResponse> getLegacyTimersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyTimersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListTimersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyTimersAsync(final ApiCallback<ListTimersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyTimersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListTimersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyTimersRequestBuilder {

        private GetLegacyTimersRequestBuilder() {
        }

        /**
         * Build call for getLegacyTimers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyTimersCall(_callback);
        }


        /**
         * Execute getLegacyTimers request
         * @return ListTimersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ListTimersResponse execute() throws ApiException {
            ApiResponse<ListTimersResponse> localVarResp = getLegacyTimersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyTimers request with HTTP info returned
         * @return ApiResponse&lt;ListTimersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListTimersResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyTimersWithHttpInfo();
        }

        /**
         * Execute getLegacyTimers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListTimersResponse> _callback) throws ApiException {
            return getLegacyTimersAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyTimersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyTimersRequestBuilder getLegacyTimers() throws IllegalArgumentException {
        return new GetLegacyTimersRequestBuilder();
    }
    private okhttp3.Call getLegacyTimers_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-timers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyTimers_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyTimers_0Call(_callback);

    }


    private ApiResponse<CookedTimerResponse> getLegacyTimers_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyTimers_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CookedTimerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyTimers_0Async(final ApiCallback<CookedTimerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyTimers_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CookedTimerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyTimers0RequestBuilder {

        private GetLegacyTimers0RequestBuilder() {
        }

        /**
         * Build call for getLegacyTimers_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyTimers_0Call(_callback);
        }


        /**
         * Execute getLegacyTimers_0 request
         * @return CookedTimerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CookedTimerResponse execute() throws ApiException {
            ApiResponse<CookedTimerResponse> localVarResp = getLegacyTimers_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyTimers_0 request with HTTP info returned
         * @return ApiResponse&lt;CookedTimerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CookedTimerResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyTimers_0WithHttpInfo();
        }

        /**
         * Execute getLegacyTimers_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CookedTimerResponse> _callback) throws ApiException {
            return getLegacyTimers_0Async(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyTimers0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyTimers0RequestBuilder getLegacyTimers_0() throws IllegalArgumentException {
        return new GetLegacyTimers0RequestBuilder();
    }
}
