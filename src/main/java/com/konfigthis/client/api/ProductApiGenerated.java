/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetCatalogResponse;
import com.konfigthis.client.model.GetProductResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCatalogCall(Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/commerce/catalog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCatalogValidateBeforeCall(Integer version, final ApiCallback _callback) throws ApiException {
        return getCatalogCall(version, _callback);

    }


    private ApiResponse<GetCatalogResponse> getCatalogWithHttpInfo(Integer version) throws ApiException {
        okhttp3.Call localVarCall = getCatalogValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<GetCatalogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCatalogAsync(Integer version, final ApiCallback<GetCatalogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCatalogValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<GetCatalogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCatalogRequestBuilder {
        private Integer version;

        private GetCatalogRequestBuilder() {
        }

        /**
         * Set version
         * @param version  (optional)
         * @return GetCatalogRequestBuilder
         */
        public GetCatalogRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Build call for getCatalog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCatalogCall(version, _callback);
        }


        /**
         * Execute getCatalog request
         * @return GetCatalogResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetCatalogResponse execute() throws ApiException {
            ApiResponse<GetCatalogResponse> localVarResp = getCatalogWithHttpInfo(version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCatalog request with HTTP info returned
         * @return ApiResponse&lt;GetCatalogResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCatalogResponse> executeWithHttpInfo() throws ApiException {
            return getCatalogWithHttpInfo(version);
        }

        /**
         * Execute getCatalog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCatalogResponse> _callback) throws ApiException {
            return getCatalogAsync(version, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetCatalogRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCatalogRequestBuilder getCatalog() throws IllegalArgumentException {
        return new GetCatalogRequestBuilder();
    }
    private okhttp3.Call getCouponDetailsCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponDetailsValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return getCouponDetailsCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> getCouponDetailsWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = getCouponDetailsValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCouponDetailsAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponDetailsValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCouponDetailsRequestBuilder {
        private String sku;

        private GetCouponDetailsRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return GetCouponDetailsRequestBuilder
         */
        public GetCouponDetailsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for getCouponDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCouponDetailsCall(sku, _callback);
        }


        /**
         * Execute getCouponDetails request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = getCouponDetailsWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCouponDetails request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return getCouponDetailsWithHttpInfo(sku);
        }

        /**
         * Execute getCouponDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return getCouponDetailsAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetCouponDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCouponDetailsRequestBuilder getCouponDetails() throws IllegalArgumentException {
        return new GetCouponDetailsRequestBuilder();
    }
    private okhttp3.Call getFacebookProductCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacebookProductValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return getFacebookProductCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> getFacebookProductWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = getFacebookProductValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFacebookProductAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacebookProductValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFacebookProductRequestBuilder {
        private String sku;

        private GetFacebookProductRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return GetFacebookProductRequestBuilder
         */
        public GetFacebookProductRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for getFacebookProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFacebookProductCall(sku, _callback);
        }


        /**
         * Execute getFacebookProduct request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = getFacebookProductWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFacebookProduct request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return getFacebookProductWithHttpInfo(sku);
        }

        /**
         * Execute getFacebookProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return getFacebookProductAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetFacebookProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetFacebookProductRequestBuilder getFacebookProduct() throws IllegalArgumentException {
        return new GetFacebookProductRequestBuilder();
    }
    private okhttp3.Call getGooglePlayDetailsCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGooglePlayDetailsValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return getGooglePlayDetailsCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> getGooglePlayDetailsWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = getGooglePlayDetailsValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGooglePlayDetailsAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGooglePlayDetailsValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGooglePlayDetailsRequestBuilder {
        private String sku;

        private GetGooglePlayDetailsRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return GetGooglePlayDetailsRequestBuilder
         */
        public GetGooglePlayDetailsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for getGooglePlayDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGooglePlayDetailsCall(sku, _callback);
        }


        /**
         * Execute getGooglePlayDetails request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = getGooglePlayDetailsWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGooglePlayDetails request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return getGooglePlayDetailsWithHttpInfo(sku);
        }

        /**
         * Execute getGooglePlayDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return getGooglePlayDetailsAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetGooglePlayDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetGooglePlayDetailsRequestBuilder getGooglePlayDetails() throws IllegalArgumentException {
        return new GetGooglePlayDetailsRequestBuilder();
    }
    private okhttp3.Call getItunesItemCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItunesItemValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return getItunesItemCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> getItunesItemWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = getItunesItemValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getItunesItemAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItunesItemValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetItunesItemRequestBuilder {
        private String sku;

        private GetItunesItemRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return GetItunesItemRequestBuilder
         */
        public GetItunesItemRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for getItunesItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getItunesItemCall(sku, _callback);
        }


        /**
         * Execute getItunesItem request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = getItunesItemWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getItunesItem request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return getItunesItemWithHttpInfo(sku);
        }

        /**
         * Execute getItunesItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return getItunesItemAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetItunesItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetItunesItemRequestBuilder getItunesItem() throws IllegalArgumentException {
        return new GetItunesItemRequestBuilder();
    }
    private okhttp3.Call getSteamCatalogCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSteamCatalogValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return getSteamCatalogCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> getSteamCatalogWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = getSteamCatalogValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSteamCatalogAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSteamCatalogValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSteamCatalogRequestBuilder {
        private String sku;

        private GetSteamCatalogRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return GetSteamCatalogRequestBuilder
         */
        public GetSteamCatalogRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for getSteamCatalog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSteamCatalogCall(sku, _callback);
        }


        /**
         * Execute getSteamCatalog request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = getSteamCatalogWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSteamCatalog request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return getSteamCatalogWithHttpInfo(sku);
        }

        /**
         * Execute getSteamCatalog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return getSteamCatalogAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetSteamCatalogRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetSteamCatalogRequestBuilder getSteamCatalog() throws IllegalArgumentException {
        return new GetSteamCatalogRequestBuilder();
    }
    private okhttp3.Call listWindowsPaymentsCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWindowsPaymentsValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return listWindowsPaymentsCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> listWindowsPaymentsWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = listWindowsPaymentsValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWindowsPaymentsAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWindowsPaymentsValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWindowsPaymentsRequestBuilder {
        private String sku;

        private ListWindowsPaymentsRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return ListWindowsPaymentsRequestBuilder
         */
        public ListWindowsPaymentsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for listWindowsPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWindowsPaymentsCall(sku, _callback);
        }


        /**
         * Execute listWindowsPayments request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = listWindowsPaymentsWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWindowsPayments request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return listWindowsPaymentsWithHttpInfo(sku);
        }

        /**
         * Execute listWindowsPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return listWindowsPaymentsAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return ListWindowsPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListWindowsPaymentsRequestBuilder listWindowsPayments() throws IllegalArgumentException {
        return new ListWindowsPaymentsRequestBuilder();
    }
    private okhttp3.Call testGetBasicPaymentsCall(String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/test/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetBasicPaymentsValidateBeforeCall(String sku, final ApiCallback _callback) throws ApiException {
        return testGetBasicPaymentsCall(sku, _callback);

    }


    private ApiResponse<GetProductResponse> testGetBasicPaymentsWithHttpInfo(String sku) throws ApiException {
        okhttp3.Call localVarCall = testGetBasicPaymentsValidateBeforeCall(sku, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testGetBasicPaymentsAsync(String sku, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetBasicPaymentsValidateBeforeCall(sku, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TestGetBasicPaymentsRequestBuilder {
        private String sku;

        private TestGetBasicPaymentsRequestBuilder() {
        }

        /**
         * Set sku
         * @param sku  (optional)
         * @return TestGetBasicPaymentsRequestBuilder
         */
        public TestGetBasicPaymentsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Build call for testGetBasicPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testGetBasicPaymentsCall(sku, _callback);
        }


        /**
         * Execute testGetBasicPayments request
         * @return GetProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetProductResponse execute() throws ApiException {
            ApiResponse<GetProductResponse> localVarResp = testGetBasicPaymentsWithHttpInfo(sku);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute testGetBasicPayments request with HTTP info returned
         * @return ApiResponse&lt;GetProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProductResponse> executeWithHttpInfo() throws ApiException {
            return testGetBasicPaymentsWithHttpInfo(sku);
        }

        /**
         * Execute testGetBasicPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProductResponse> _callback) throws ApiException {
            return testGetBasicPaymentsAsync(sku, _callback);
        }
    }

    /**
     * 
     * 
     * @return TestGetBasicPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TestGetBasicPaymentsRequestBuilder testGetBasicPayments() throws IllegalArgumentException {
        return new TestGetBasicPaymentsRequestBuilder();
    }
}
