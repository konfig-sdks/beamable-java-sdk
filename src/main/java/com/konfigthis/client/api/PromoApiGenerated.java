/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CodeClaimRequest;
import com.konfigthis.client.model.CodeCreateRequest;
import com.konfigthis.client.model.CodeRedemptionResponse;
import com.konfigthis.client.model.CreateRedemptionDef;
import com.konfigthis.client.model.GetAvailableCodesResponse;
import com.konfigthis.client.model.GetDefinitionsResponse;
import com.konfigthis.client.model.ImportCodesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PromoApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromoApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PromoApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call claimLegacyPromoCall(CodeClaimRequest codeClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codeClaimRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-promos/claim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimLegacyPromoValidateBeforeCall(CodeClaimRequest codeClaimRequest, final ApiCallback _callback) throws ApiException {
        return claimLegacyPromoCall(codeClaimRequest, _callback);

    }


    private ApiResponse<CodeRedemptionResponse> claimLegacyPromoWithHttpInfo(CodeClaimRequest codeClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = claimLegacyPromoValidateBeforeCall(codeClaimRequest, null);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call claimLegacyPromoAsync(CodeClaimRequest codeClaimRequest, final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimLegacyPromoValidateBeforeCall(codeClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClaimLegacyPromoRequestBuilder {
        private String code;

        private ClaimLegacyPromoRequestBuilder() {
        }

        /**
         * Set code
         * @param code  (optional)
         * @return ClaimLegacyPromoRequestBuilder
         */
        public ClaimLegacyPromoRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Build call for claimLegacyPromo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CodeClaimRequest codeClaimRequest = buildBodyParams();
            return claimLegacyPromoCall(codeClaimRequest, _callback);
        }

        private CodeClaimRequest buildBodyParams() {
            CodeClaimRequest codeClaimRequest = new CodeClaimRequest();
            codeClaimRequest.code(this.code);
            return codeClaimRequest;
        }

        /**
         * Execute claimLegacyPromo request
         * @return CodeRedemptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CodeRedemptionResponse execute() throws ApiException {
            CodeClaimRequest codeClaimRequest = buildBodyParams();
            ApiResponse<CodeRedemptionResponse> localVarResp = claimLegacyPromoWithHttpInfo(codeClaimRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute claimLegacyPromo request with HTTP info returned
         * @return ApiResponse&lt;CodeRedemptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CodeRedemptionResponse> executeWithHttpInfo() throws ApiException {
            CodeClaimRequest codeClaimRequest = buildBodyParams();
            return claimLegacyPromoWithHttpInfo(codeClaimRequest);
        }

        /**
         * Execute claimLegacyPromo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {
            CodeClaimRequest codeClaimRequest = buildBodyParams();
            return claimLegacyPromoAsync(codeClaimRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ClaimLegacyPromoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ClaimLegacyPromoRequestBuilder claimLegacyPromo() throws IllegalArgumentException {
        return new ClaimLegacyPromoRequestBuilder();
    }
    private okhttp3.Call createLegacyPromoCall(CodeCreateRequest codeCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codeCreateRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-promos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLegacyPromoValidateBeforeCall(CodeCreateRequest codeCreateRequest, final ApiCallback _callback) throws ApiException {
        return createLegacyPromoCall(codeCreateRequest, _callback);

    }


    private ApiResponse<CodeRedemptionResponse> createLegacyPromoWithHttpInfo(CodeCreateRequest codeCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createLegacyPromoValidateBeforeCall(codeCreateRequest, null);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLegacyPromoAsync(CodeCreateRequest codeCreateRequest, final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLegacyPromoValidateBeforeCall(codeCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLegacyPromoRequestBuilder {
        private final Integer codes;
        private final Integer claimsPerCode;
        private CreateRedemptionDef definition;

        private CreateLegacyPromoRequestBuilder(Integer codes, Integer claimsPerCode) {
            this.codes = codes;
            this.claimsPerCode = claimsPerCode;
        }

        /**
         * Set definition
         * @param definition  (optional)
         * @return CreateLegacyPromoRequestBuilder
         */
        public CreateLegacyPromoRequestBuilder definition(CreateRedemptionDef definition) {
            this.definition = definition;
            return this;
        }
        
        /**
         * Build call for createLegacyPromo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CodeCreateRequest codeCreateRequest = buildBodyParams();
            return createLegacyPromoCall(codeCreateRequest, _callback);
        }

        private CodeCreateRequest buildBodyParams() {
            CodeCreateRequest codeCreateRequest = new CodeCreateRequest();
            codeCreateRequest.definition(this.definition);
            codeCreateRequest.codes(this.codes);
            codeCreateRequest.claimsPerCode(this.claimsPerCode);
            return codeCreateRequest;
        }

        /**
         * Execute createLegacyPromo request
         * @return CodeRedemptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CodeRedemptionResponse execute() throws ApiException {
            CodeCreateRequest codeCreateRequest = buildBodyParams();
            ApiResponse<CodeRedemptionResponse> localVarResp = createLegacyPromoWithHttpInfo(codeCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLegacyPromo request with HTTP info returned
         * @return ApiResponse&lt;CodeRedemptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CodeRedemptionResponse> executeWithHttpInfo() throws ApiException {
            CodeCreateRequest codeCreateRequest = buildBodyParams();
            return createLegacyPromoWithHttpInfo(codeCreateRequest);
        }

        /**
         * Execute createLegacyPromo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {
            CodeCreateRequest codeCreateRequest = buildBodyParams();
            return createLegacyPromoAsync(codeCreateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateLegacyPromoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateLegacyPromoRequestBuilder createLegacyPromo(Integer codes, Integer claimsPerCode) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
        if (claimsPerCode == null) throw new IllegalArgumentException("\"claimsPerCode\" is required but got null");
        return new CreateLegacyPromoRequestBuilder(codes, claimsPerCode);
    }
    private okhttp3.Call generatePromoCodeCall(ImportCodesRequest importCodesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importCodesRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-promos/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePromoCodeValidateBeforeCall(ImportCodesRequest importCodesRequest, final ApiCallback _callback) throws ApiException {
        return generatePromoCodeCall(importCodesRequest, _callback);

    }


    private ApiResponse<CodeRedemptionResponse> generatePromoCodeWithHttpInfo(ImportCodesRequest importCodesRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePromoCodeValidateBeforeCall(importCodesRequest, null);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePromoCodeAsync(ImportCodesRequest importCodesRequest, final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePromoCodeValidateBeforeCall(importCodesRequest, _callback);
        Type localVarReturnType = new TypeToken<CodeRedemptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePromoCodeRequestBuilder {
        private final Integer definitionId;
        private final Integer claimsPerCode;
        private List<String> codes;

        private GeneratePromoCodeRequestBuilder(Integer definitionId, Integer claimsPerCode) {
            this.definitionId = definitionId;
            this.claimsPerCode = claimsPerCode;
        }

        /**
         * Set codes
         * @param codes  (optional)
         * @return GeneratePromoCodeRequestBuilder
         */
        public GeneratePromoCodeRequestBuilder codes(List<String> codes) {
            this.codes = codes;
            return this;
        }
        
        /**
         * Build call for generatePromoCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ImportCodesRequest importCodesRequest = buildBodyParams();
            return generatePromoCodeCall(importCodesRequest, _callback);
        }

        private ImportCodesRequest buildBodyParams() {
            ImportCodesRequest importCodesRequest = new ImportCodesRequest();
            importCodesRequest.definitionId(this.definitionId);
            importCodesRequest.codes(this.codes);
            importCodesRequest.claimsPerCode(this.claimsPerCode);
            return importCodesRequest;
        }

        /**
         * Execute generatePromoCode request
         * @return CodeRedemptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CodeRedemptionResponse execute() throws ApiException {
            ImportCodesRequest importCodesRequest = buildBodyParams();
            ApiResponse<CodeRedemptionResponse> localVarResp = generatePromoCodeWithHttpInfo(importCodesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePromoCode request with HTTP info returned
         * @return ApiResponse&lt;CodeRedemptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CodeRedemptionResponse> executeWithHttpInfo() throws ApiException {
            ImportCodesRequest importCodesRequest = buildBodyParams();
            return generatePromoCodeWithHttpInfo(importCodesRequest);
        }

        /**
         * Execute generatePromoCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CodeRedemptionResponse> _callback) throws ApiException {
            ImportCodesRequest importCodesRequest = buildBodyParams();
            return generatePromoCodeAsync(importCodesRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return GeneratePromoCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePromoCodeRequestBuilder generatePromoCode(Integer definitionId, Integer claimsPerCode) throws IllegalArgumentException {
        if (definitionId == null) throw new IllegalArgumentException("\"definitionId\" is required but got null");
        if (claimsPerCode == null) throw new IllegalArgumentException("\"claimsPerCode\" is required but got null");
        return new GeneratePromoCodeRequestBuilder(definitionId, claimsPerCode);
    }
    private okhttp3.Call getLegacyPromosCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-promos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyPromosValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyPromosCall(_callback);

    }


    private ApiResponse<GetDefinitionsResponse> getLegacyPromosWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyPromosValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDefinitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyPromosAsync(final ApiCallback<GetDefinitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyPromosValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDefinitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyPromosRequestBuilder {

        private GetLegacyPromosRequestBuilder() {
        }

        /**
         * Build call for getLegacyPromos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyPromosCall(_callback);
        }


        /**
         * Execute getLegacyPromos request
         * @return GetDefinitionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetDefinitionsResponse execute() throws ApiException {
            ApiResponse<GetDefinitionsResponse> localVarResp = getLegacyPromosWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyPromos request with HTTP info returned
         * @return ApiResponse&lt;GetDefinitionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDefinitionsResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyPromosWithHttpInfo();
        }

        /**
         * Execute getLegacyPromos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDefinitionsResponse> _callback) throws ApiException {
            return getLegacyPromosAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyPromosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyPromosRequestBuilder getLegacyPromos() throws IllegalArgumentException {
        return new GetLegacyPromosRequestBuilder();
    }
    private okhttp3.Call getPromoCodesCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-promos/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromoCodesValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPromoCodes(Async)");
        }

        return getPromoCodesCall(id, _callback);

    }


    private ApiResponse<GetAvailableCodesResponse> getPromoCodesWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getPromoCodesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetAvailableCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPromoCodesAsync(Integer id, final ApiCallback<GetAvailableCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromoCodesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetAvailableCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPromoCodesRequestBuilder {
        private final Integer id;

        private GetPromoCodesRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getPromoCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPromoCodesCall(id, _callback);
        }


        /**
         * Execute getPromoCodes request
         * @return GetAvailableCodesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetAvailableCodesResponse execute() throws ApiException {
            ApiResponse<GetAvailableCodesResponse> localVarResp = getPromoCodesWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPromoCodes request with HTTP info returned
         * @return ApiResponse&lt;GetAvailableCodesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAvailableCodesResponse> executeWithHttpInfo() throws ApiException {
            return getPromoCodesWithHttpInfo(id);
        }

        /**
         * Execute getPromoCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAvailableCodesResponse> _callback) throws ApiException {
            return getPromoCodesAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return GetPromoCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPromoCodesRequestBuilder getPromoCodes(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetPromoCodesRequestBuilder(id);
    }
}
