/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AvailabilityResponse;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateDonationRequest;
import com.konfigthis.client.model.DisbandRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.GroupApplication;
import com.konfigthis.client.model.GroupCreate;
import com.konfigthis.client.model.GroupCreateResponse;
import com.konfigthis.client.model.GroupInvite;
import com.konfigthis.client.model.GroupMembershipRequest;
import com.konfigthis.client.model.GroupMembershipResponse;
import com.konfigthis.client.model.GroupScoreBinding;
import com.konfigthis.client.model.GroupSearchResponse;
import com.konfigthis.client.model.GroupUpdate;
import com.konfigthis.client.model.GroupUser;
import com.konfigthis.client.model.KickRequest;
import com.konfigthis.client.model.MakeDonationRequest;
import com.konfigthis.client.model.RoleChangeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyObjectGroupsCall(String objectId, GroupApplication groupApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupApplication;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/apply"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyObjectGroupsValidateBeforeCall(String objectId, GroupApplication groupApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling applyObjectGroups(Async)");
        }

        return applyObjectGroupsCall(objectId, groupApplication, _callback);

    }


    private ApiResponse<CommonResponse> applyObjectGroupsWithHttpInfo(String objectId, GroupApplication groupApplication) throws ApiException {
        okhttp3.Call localVarCall = applyObjectGroupsValidateBeforeCall(objectId, groupApplication, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyObjectGroupsAsync(String objectId, GroupApplication groupApplication, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyObjectGroupsValidateBeforeCall(objectId, groupApplication, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyObjectGroupsRequestBuilder {
        private final String objectId;
        private Integer subGroup;

        private ApplyObjectGroupsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return ApplyObjectGroupsRequestBuilder
         */
        public ApplyObjectGroupsRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for applyObjectGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return applyObjectGroupsCall(objectId, groupApplication, _callback);
        }

        private GroupApplication buildBodyParams() {
            GroupApplication groupApplication = new GroupApplication();
            groupApplication.subGroup(this.subGroup);
            return groupApplication;
        }

        /**
         * Execute applyObjectGroups request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = applyObjectGroupsWithHttpInfo(objectId, groupApplication);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyObjectGroups request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return applyObjectGroupsWithHttpInfo(objectId, groupApplication);
        }

        /**
         * Execute applyObjectGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return applyObjectGroupsAsync(objectId, groupApplication, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return ApplyObjectGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplyObjectGroupsRequestBuilder applyObjectGroups(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new ApplyObjectGroupsRequestBuilder(objectId);
    }
    private okhttp3.Call assignObjectGroupCall(String objectId, GroupCreate groupCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupCreate;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/group"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignObjectGroupValidateBeforeCall(String objectId, GroupCreate groupCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling assignObjectGroup(Async)");
        }

        return assignObjectGroupCall(objectId, groupCreate, _callback);

    }


    private ApiResponse<GroupCreateResponse> assignObjectGroupWithHttpInfo(String objectId, GroupCreate groupCreate) throws ApiException {
        okhttp3.Call localVarCall = assignObjectGroupValidateBeforeCall(objectId, groupCreate, null);
        Type localVarReturnType = new TypeToken<GroupCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignObjectGroupAsync(String objectId, GroupCreate groupCreate, final ApiCallback<GroupCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignObjectGroupValidateBeforeCall(objectId, groupCreate, _callback);
        Type localVarReturnType = new TypeToken<GroupCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignObjectGroupRequestBuilder {
        private final Integer requirement;
        private final Integer maxSize;
        private final String objectId;
        private String name;
        private String enrollmentType;
        private String tag;
        private String clientData;
        private List<GroupScoreBinding> scores;
        private Integer time;
        private String type;
        private Integer group;

        private AssignObjectGroupRequestBuilder(Integer requirement, Integer maxSize, String objectId) {
            this.requirement = requirement;
            this.maxSize = maxSize;
            this.objectId = objectId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set enrollmentType
         * @param enrollmentType  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder enrollmentType(String enrollmentType) {
            this.enrollmentType = enrollmentType;
            return this;
        }
        
        /**
         * Set tag
         * @param tag  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set clientData
         * @param clientData  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder clientData(String clientData) {
            this.clientData = clientData;
            return this;
        }
        
        /**
         * Set scores
         * @param scores  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder scores(List<GroupScoreBinding> scores) {
            this.scores = scores;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder time(Integer time) {
            this.time = time;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set group
         * @param group  (optional)
         * @return AssignObjectGroupRequestBuilder
         */
        public AssignObjectGroupRequestBuilder group(Integer group) {
            this.group = group;
            return this;
        }
        
        /**
         * Build call for assignObjectGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupCreate groupCreate = buildBodyParams();
            return assignObjectGroupCall(objectId, groupCreate, _callback);
        }

        private GroupCreate buildBodyParams() {
            GroupCreate groupCreate = new GroupCreate();
            groupCreate.name(this.name);
            groupCreate.enrollmentType(this.enrollmentType);
            groupCreate.tag(this.tag);
            groupCreate.requirement(this.requirement);
            groupCreate.clientData(this.clientData);
            groupCreate.scores(this.scores);
            groupCreate.time(this.time);
            if (this.type != null)
            groupCreate.type(GroupCreate.TypeEnum.fromValue(this.type));
            groupCreate.maxSize(this.maxSize);
            groupCreate.group(this.group);
            return groupCreate;
        }

        /**
         * Execute assignObjectGroup request
         * @return GroupCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupCreateResponse execute() throws ApiException {
            GroupCreate groupCreate = buildBodyParams();
            ApiResponse<GroupCreateResponse> localVarResp = assignObjectGroupWithHttpInfo(objectId, groupCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignObjectGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupCreateResponse> executeWithHttpInfo() throws ApiException {
            GroupCreate groupCreate = buildBodyParams();
            return assignObjectGroupWithHttpInfo(objectId, groupCreate);
        }

        /**
         * Execute assignObjectGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupCreateResponse> _callback) throws ApiException {
            GroupCreate groupCreate = buildBodyParams();
            return assignObjectGroupAsync(objectId, groupCreate, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return AssignObjectGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AssignObjectGroupRequestBuilder assignObjectGroup(Integer requirement, Integer maxSize, String objectId) throws IllegalArgumentException {
        if (requirement == null) throw new IllegalArgumentException("\"requirement\" is required but got null");
        if (maxSize == null) throw new IllegalArgumentException("\"maxSize\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new AssignObjectGroupRequestBuilder(requirement, maxSize, objectId);
    }
    private okhttp3.Call createDonationCall(String objectId, CreateDonationRequest createDonationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDonationRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/donations"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDonationValidateBeforeCall(String objectId, CreateDonationRequest createDonationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createDonation(Async)");
        }

        return createDonationCall(objectId, createDonationRequest, _callback);

    }


    private ApiResponse<EmptyResponse> createDonationWithHttpInfo(String objectId, CreateDonationRequest createDonationRequest) throws ApiException {
        okhttp3.Call localVarCall = createDonationValidateBeforeCall(objectId, createDonationRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDonationAsync(String objectId, CreateDonationRequest createDonationRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDonationValidateBeforeCall(objectId, createDonationRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDonationRequestBuilder {
        private final Integer amount;
        private final String objectId;
        private String currencyId;
        private String config;

        private CreateDonationRequestBuilder(Integer amount, String objectId) {
            this.amount = amount;
            this.objectId = objectId;
        }

        /**
         * Set currencyId
         * @param currencyId  (optional)
         * @return CreateDonationRequestBuilder
         */
        public CreateDonationRequestBuilder currencyId(String currencyId) {
            this.currencyId = currencyId;
            return this;
        }
        
        /**
         * Set config
         * @param config  (optional)
         * @return CreateDonationRequestBuilder
         */
        public CreateDonationRequestBuilder config(String config) {
            this.config = config;
            return this;
        }
        
        /**
         * Build call for createDonation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDonationRequest createDonationRequest = buildBodyParams();
            return createDonationCall(objectId, createDonationRequest, _callback);
        }

        private CreateDonationRequest buildBodyParams() {
            CreateDonationRequest createDonationRequest = new CreateDonationRequest();
            createDonationRequest.currencyId(this.currencyId);
            createDonationRequest.amount(this.amount);
            createDonationRequest.config(this.config);
            return createDonationRequest;
        }

        /**
         * Execute createDonation request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            CreateDonationRequest createDonationRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createDonationWithHttpInfo(objectId, createDonationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDonation request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            CreateDonationRequest createDonationRequest = buildBodyParams();
            return createDonationWithHttpInfo(objectId, createDonationRequest);
        }

        /**
         * Execute createDonation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            CreateDonationRequest createDonationRequest = buildBodyParams();
            return createDonationAsync(objectId, createDonationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateDonationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateDonationRequestBuilder createDonation(Integer amount, String objectId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateDonationRequestBuilder(amount, objectId);
    }
    private okhttp3.Call createPetitionCall(String objectId, GroupApplication groupApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupApplication;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/petition"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPetitionValidateBeforeCall(String objectId, GroupApplication groupApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createPetition(Async)");
        }

        return createPetitionCall(objectId, groupApplication, _callback);

    }


    private ApiResponse<CommonResponse> createPetitionWithHttpInfo(String objectId, GroupApplication groupApplication) throws ApiException {
        okhttp3.Call localVarCall = createPetitionValidateBeforeCall(objectId, groupApplication, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPetitionAsync(String objectId, GroupApplication groupApplication, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPetitionValidateBeforeCall(objectId, groupApplication, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePetitionRequestBuilder {
        private final String objectId;
        private Integer subGroup;

        private CreatePetitionRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return CreatePetitionRequestBuilder
         */
        public CreatePetitionRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for createPetition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return createPetitionCall(objectId, groupApplication, _callback);
        }

        private GroupApplication buildBodyParams() {
            GroupApplication groupApplication = new GroupApplication();
            groupApplication.subGroup(this.subGroup);
            return groupApplication;
        }

        /**
         * Execute createPetition request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createPetitionWithHttpInfo(objectId, groupApplication);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPetition request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return createPetitionWithHttpInfo(objectId, groupApplication);
        }

        /**
         * Execute createPetition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            GroupApplication groupApplication = buildBodyParams();
            return createPetitionAsync(objectId, groupApplication, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreatePetitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreatePetitionRequestBuilder createPetition(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreatePetitionRequestBuilder(objectId);
    }
    private okhttp3.Call deleteObjectGroupCall(String objectId, DisbandRequest disbandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disbandRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectGroupValidateBeforeCall(String objectId, DisbandRequest disbandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteObjectGroup(Async)");
        }

        return deleteObjectGroupCall(objectId, disbandRequest, _callback);

    }


    private ApiResponse<CommonResponse> deleteObjectGroupWithHttpInfo(String objectId, DisbandRequest disbandRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectGroupValidateBeforeCall(objectId, disbandRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteObjectGroupAsync(String objectId, DisbandRequest disbandRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectGroupValidateBeforeCall(objectId, disbandRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteObjectGroupRequestBuilder {
        private final String objectId;
        private Integer subGroup;

        private DeleteObjectGroupRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return DeleteObjectGroupRequestBuilder
         */
        public DeleteObjectGroupRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for deleteObjectGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DisbandRequest disbandRequest = buildBodyParams();
            return deleteObjectGroupCall(objectId, disbandRequest, _callback);
        }

        private DisbandRequest buildBodyParams() {
            DisbandRequest disbandRequest = new DisbandRequest();
            disbandRequest.subGroup(this.subGroup);
            return disbandRequest;
        }

        /**
         * Execute deleteObjectGroup request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            DisbandRequest disbandRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = deleteObjectGroupWithHttpInfo(objectId, disbandRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteObjectGroup request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            DisbandRequest disbandRequest = buildBodyParams();
            return deleteObjectGroupWithHttpInfo(objectId, disbandRequest);
        }

        /**
         * Execute deleteObjectGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            DisbandRequest disbandRequest = buildBodyParams();
            return deleteObjectGroupAsync(objectId, disbandRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteObjectGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteObjectGroupRequestBuilder deleteObjectGroup(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteObjectGroupRequestBuilder(objectId);
    }
    private okhttp3.Call getGroupUsersCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupUsersValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getGroupUsers(Async)");
        }

        return getGroupUsersCall(objectId, _callback);

    }


    private ApiResponse<GroupUser> getGroupUsersWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getGroupUsersValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<GroupUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupUsersAsync(String objectId, final ApiCallback<GroupUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupUsersValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<GroupUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupUsersRequestBuilder {
        private final String objectId;

        private GetGroupUsersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getGroupUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupUsersCall(objectId, _callback);
        }


        /**
         * Execute getGroupUsers request
         * @return GroupUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupUser execute() throws ApiException {
            ApiResponse<GroupUser> localVarResp = getGroupUsersWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupUsers request with HTTP info returned
         * @return ApiResponse&lt;GroupUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupUser> executeWithHttpInfo() throws ApiException {
            return getGroupUsersWithHttpInfo(objectId);
        }

        /**
         * Execute getGroupUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupUser> _callback) throws ApiException {
            return getGroupUsersAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetGroupUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupUsersRequestBuilder getGroupUsers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetGroupUsersRequestBuilder(objectId);
    }
    private okhttp3.Call getObjectGroupsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectGroupsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectGroups(Async)");
        }

        return getObjectGroupsCall(objectId, _callback);

    }


    private ApiResponse<Group> getObjectGroupsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectGroupsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectGroupsAsync(String objectId, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectGroupsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectGroupsRequestBuilder {
        private final String objectId;

        private GetObjectGroupsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectGroupsCall(objectId, _callback);
        }


        /**
         * Execute getObjectGroups request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            ApiResponse<Group> localVarResp = getObjectGroupsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectGroups request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            return getObjectGroupsWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            return getObjectGroupsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectGroupsRequestBuilder getObjectGroups(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectGroupsRequestBuilder(objectId);
    }
    private okhttp3.Call getRecommendedUsersCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/recommended"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendedUsersValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getRecommendedUsers(Async)");
        }

        return getRecommendedUsersCall(objectId, _callback);

    }


    private ApiResponse<GroupSearchResponse> getRecommendedUsersWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getRecommendedUsersValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecommendedUsersAsync(String objectId, final ApiCallback<GroupSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendedUsersValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecommendedUsersRequestBuilder {
        private final String objectId;

        private GetRecommendedUsersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getRecommendedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecommendedUsersCall(objectId, _callback);
        }


        /**
         * Execute getRecommendedUsers request
         * @return GroupSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupSearchResponse execute() throws ApiException {
            ApiResponse<GroupSearchResponse> localVarResp = getRecommendedUsersWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecommendedUsers request with HTTP info returned
         * @return ApiResponse&lt;GroupSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupSearchResponse> executeWithHttpInfo() throws ApiException {
            return getRecommendedUsersWithHttpInfo(objectId);
        }

        /**
         * Execute getRecommendedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupSearchResponse> _callback) throws ApiException {
            return getRecommendedUsersAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetRecommendedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetRecommendedUsersRequestBuilder getRecommendedUsers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetRecommendedUsersRequestBuilder(objectId);
    }
    private okhttp3.Call getUserAvailabilityCall(String objectId, String name, String tag, String type, Boolean subGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/availability"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (subGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subGroup", subGroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAvailabilityValidateBeforeCall(String objectId, String name, String tag, String type, Boolean subGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getUserAvailability(Async)");
        }

        return getUserAvailabilityCall(objectId, name, tag, type, subGroup, _callback);

    }


    private ApiResponse<AvailabilityResponse> getUserAvailabilityWithHttpInfo(String objectId, String name, String tag, String type, Boolean subGroup) throws ApiException {
        okhttp3.Call localVarCall = getUserAvailabilityValidateBeforeCall(objectId, name, tag, type, subGroup, null);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAvailabilityAsync(String objectId, String name, String tag, String type, Boolean subGroup, final ApiCallback<AvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAvailabilityValidateBeforeCall(objectId, name, tag, type, subGroup, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserAvailabilityRequestBuilder {
        private final String objectId;
        private String name;
        private String tag;
        private String type;
        private Boolean subGroup;

        private GetUserAvailabilityRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return GetUserAvailabilityRequestBuilder
         */
        public GetUserAvailabilityRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set tag
         * @param tag  (optional)
         * @return GetUserAvailabilityRequestBuilder
         */
        public GetUserAvailabilityRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return GetUserAvailabilityRequestBuilder
         */
        public GetUserAvailabilityRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return GetUserAvailabilityRequestBuilder
         */
        public GetUserAvailabilityRequestBuilder subGroup(Boolean subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for getUserAvailability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserAvailabilityCall(objectId, name, tag, type, subGroup, _callback);
        }


        /**
         * Execute getUserAvailability request
         * @return AvailabilityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityResponse execute() throws ApiException {
            ApiResponse<AvailabilityResponse> localVarResp = getUserAvailabilityWithHttpInfo(objectId, name, tag, type, subGroup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserAvailability request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityResponse> executeWithHttpInfo() throws ApiException {
            return getUserAvailabilityWithHttpInfo(objectId, name, tag, type, subGroup);
        }

        /**
         * Execute getUserAvailability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityResponse> _callback) throws ApiException {
            return getUserAvailabilityAsync(objectId, name, tag, type, subGroup, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetUserAvailabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAvailabilityRequestBuilder getUserAvailability(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetUserAvailabilityRequestBuilder(objectId);
    }
    private okhttp3.Call inviteObjectGroupCall(String objectId, GroupInvite groupInvite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupInvite;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/invite"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteObjectGroupValidateBeforeCall(String objectId, GroupInvite groupInvite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling inviteObjectGroup(Async)");
        }

        return inviteObjectGroupCall(objectId, groupInvite, _callback);

    }


    private ApiResponse<CommonResponse> inviteObjectGroupWithHttpInfo(String objectId, GroupInvite groupInvite) throws ApiException {
        okhttp3.Call localVarCall = inviteObjectGroupValidateBeforeCall(objectId, groupInvite, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteObjectGroupAsync(String objectId, GroupInvite groupInvite, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteObjectGroupValidateBeforeCall(objectId, groupInvite, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteObjectGroupRequestBuilder {
        private final Integer gamerTag;
        private final String objectId;
        private Integer subGroup;

        private InviteObjectGroupRequestBuilder(Integer gamerTag, String objectId) {
            this.gamerTag = gamerTag;
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return InviteObjectGroupRequestBuilder
         */
        public InviteObjectGroupRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for inviteObjectGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupInvite groupInvite = buildBodyParams();
            return inviteObjectGroupCall(objectId, groupInvite, _callback);
        }

        private GroupInvite buildBodyParams() {
            GroupInvite groupInvite = new GroupInvite();
            groupInvite.gamerTag(this.gamerTag);
            groupInvite.subGroup(this.subGroup);
            return groupInvite;
        }

        /**
         * Execute inviteObjectGroup request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            GroupInvite groupInvite = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = inviteObjectGroupWithHttpInfo(objectId, groupInvite);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteObjectGroup request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            GroupInvite groupInvite = buildBodyParams();
            return inviteObjectGroupWithHttpInfo(objectId, groupInvite);
        }

        /**
         * Execute inviteObjectGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            GroupInvite groupInvite = buildBodyParams();
            return inviteObjectGroupAsync(objectId, groupInvite, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return InviteObjectGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public InviteObjectGroupRequestBuilder inviteObjectGroup(Integer gamerTag, String objectId) throws IllegalArgumentException {
        if (gamerTag == null) throw new IllegalArgumentException("\"gamerTag\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new InviteObjectGroupRequestBuilder(gamerTag, objectId);
    }
    private okhttp3.Call joinUserDeleteCall(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupMembershipRequest;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/join"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinUserDeleteValidateBeforeCall(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling joinUserDelete(Async)");
        }

        return joinUserDeleteCall(objectId, groupMembershipRequest, _callback);

    }


    private ApiResponse<GroupMembershipResponse> joinUserDeleteWithHttpInfo(String objectId, GroupMembershipRequest groupMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = joinUserDeleteValidateBeforeCall(objectId, groupMembershipRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call joinUserDeleteAsync(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinUserDeleteValidateBeforeCall(objectId, groupMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JoinUserDeleteRequestBuilder {
        private final Integer group;
        private final String objectId;
        private Integer successor;
        private Integer score;
        private Integer subGroup;
        private String type;

        private JoinUserDeleteRequestBuilder(Integer group, String objectId) {
            this.group = group;
            this.objectId = objectId;
        }

        /**
         * Set successor
         * @param successor  (optional)
         * @return JoinUserDeleteRequestBuilder
         */
        public JoinUserDeleteRequestBuilder successor(Integer successor) {
            this.successor = successor;
            return this;
        }
        
        /**
         * Set score
         * @param score  (optional)
         * @return JoinUserDeleteRequestBuilder
         */
        public JoinUserDeleteRequestBuilder score(Integer score) {
            this.score = score;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return JoinUserDeleteRequestBuilder
         */
        public JoinUserDeleteRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return JoinUserDeleteRequestBuilder
         */
        public JoinUserDeleteRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for joinUserDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserDeleteCall(objectId, groupMembershipRequest, _callback);
        }

        private GroupMembershipRequest buildBodyParams() {
            GroupMembershipRequest groupMembershipRequest = new GroupMembershipRequest();
            groupMembershipRequest.successor(this.successor);
            groupMembershipRequest.score(this.score);
            groupMembershipRequest.subGroup(this.subGroup);
            if (this.type != null)
            groupMembershipRequest.type(GroupMembershipRequest.TypeEnum.fromValue(this.type));
            groupMembershipRequest.group(this.group);
            return groupMembershipRequest;
        }

        /**
         * Execute joinUserDelete request
         * @return GroupMembershipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembershipResponse execute() throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            ApiResponse<GroupMembershipResponse> localVarResp = joinUserDeleteWithHttpInfo(objectId, groupMembershipRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute joinUserDelete request with HTTP info returned
         * @return ApiResponse&lt;GroupMembershipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembershipResponse> executeWithHttpInfo() throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserDeleteWithHttpInfo(objectId, groupMembershipRequest);
        }

        /**
         * Execute joinUserDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserDeleteAsync(objectId, groupMembershipRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return JoinUserDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public JoinUserDeleteRequestBuilder joinUserDelete(Integer group, String objectId) throws IllegalArgumentException {
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new JoinUserDeleteRequestBuilder(group, objectId);
    }
    private okhttp3.Call joinUserToGroupCall(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupMembershipRequest;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/join"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinUserToGroupValidateBeforeCall(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling joinUserToGroup(Async)");
        }

        return joinUserToGroupCall(objectId, groupMembershipRequest, _callback);

    }


    private ApiResponse<GroupMembershipResponse> joinUserToGroupWithHttpInfo(String objectId, GroupMembershipRequest groupMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = joinUserToGroupValidateBeforeCall(objectId, groupMembershipRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call joinUserToGroupAsync(String objectId, GroupMembershipRequest groupMembershipRequest, final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinUserToGroupValidateBeforeCall(objectId, groupMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JoinUserToGroupRequestBuilder {
        private final Integer group;
        private final String objectId;
        private Integer successor;
        private Integer score;
        private Integer subGroup;
        private String type;

        private JoinUserToGroupRequestBuilder(Integer group, String objectId) {
            this.group = group;
            this.objectId = objectId;
        }

        /**
         * Set successor
         * @param successor  (optional)
         * @return JoinUserToGroupRequestBuilder
         */
        public JoinUserToGroupRequestBuilder successor(Integer successor) {
            this.successor = successor;
            return this;
        }
        
        /**
         * Set score
         * @param score  (optional)
         * @return JoinUserToGroupRequestBuilder
         */
        public JoinUserToGroupRequestBuilder score(Integer score) {
            this.score = score;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return JoinUserToGroupRequestBuilder
         */
        public JoinUserToGroupRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return JoinUserToGroupRequestBuilder
         */
        public JoinUserToGroupRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for joinUserToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserToGroupCall(objectId, groupMembershipRequest, _callback);
        }

        private GroupMembershipRequest buildBodyParams() {
            GroupMembershipRequest groupMembershipRequest = new GroupMembershipRequest();
            groupMembershipRequest.successor(this.successor);
            groupMembershipRequest.score(this.score);
            groupMembershipRequest.subGroup(this.subGroup);
            if (this.type != null)
            groupMembershipRequest.type(GroupMembershipRequest.TypeEnum.fromValue(this.type));
            groupMembershipRequest.group(this.group);
            return groupMembershipRequest;
        }

        /**
         * Execute joinUserToGroup request
         * @return GroupMembershipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembershipResponse execute() throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            ApiResponse<GroupMembershipResponse> localVarResp = joinUserToGroupWithHttpInfo(objectId, groupMembershipRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute joinUserToGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupMembershipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembershipResponse> executeWithHttpInfo() throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserToGroupWithHttpInfo(objectId, groupMembershipRequest);
        }

        /**
         * Execute joinUserToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {
            GroupMembershipRequest groupMembershipRequest = buildBodyParams();
            return joinUserToGroupAsync(objectId, groupMembershipRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return JoinUserToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public JoinUserToGroupRequestBuilder joinUserToGroup(Integer group, String objectId) throws IllegalArgumentException {
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new JoinUserToGroupRequestBuilder(group, objectId);
    }
    private okhttp3.Call kickObjectGroupCall(String objectId, KickRequest kickRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kickRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/kick"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kickObjectGroupValidateBeforeCall(String objectId, KickRequest kickRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling kickObjectGroup(Async)");
        }

        return kickObjectGroupCall(objectId, kickRequest, _callback);

    }


    private ApiResponse<GroupMembershipResponse> kickObjectGroupWithHttpInfo(String objectId, KickRequest kickRequest) throws ApiException {
        okhttp3.Call localVarCall = kickObjectGroupValidateBeforeCall(objectId, kickRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call kickObjectGroupAsync(String objectId, KickRequest kickRequest, final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kickObjectGroupValidateBeforeCall(objectId, kickRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class KickObjectGroupRequestBuilder {
        private final Integer gamerTag;
        private final String objectId;
        private Integer subGroup;

        private KickObjectGroupRequestBuilder(Integer gamerTag, String objectId) {
            this.gamerTag = gamerTag;
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return KickObjectGroupRequestBuilder
         */
        public KickObjectGroupRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for kickObjectGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return kickObjectGroupCall(objectId, kickRequest, _callback);
        }

        private KickRequest buildBodyParams() {
            KickRequest kickRequest = new KickRequest();
            kickRequest.gamerTag(this.gamerTag);
            kickRequest.subGroup(this.subGroup);
            return kickRequest;
        }

        /**
         * Execute kickObjectGroup request
         * @return GroupMembershipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembershipResponse execute() throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            ApiResponse<GroupMembershipResponse> localVarResp = kickObjectGroupWithHttpInfo(objectId, kickRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute kickObjectGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupMembershipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembershipResponse> executeWithHttpInfo() throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return kickObjectGroupWithHttpInfo(objectId, kickRequest);
        }

        /**
         * Execute kickObjectGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return kickObjectGroupAsync(objectId, kickRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return KickObjectGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KickObjectGroupRequestBuilder kickObjectGroup(Integer gamerTag, String objectId) throws IllegalArgumentException {
        if (gamerTag == null) throw new IllegalArgumentException("\"gamerTag\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new KickObjectGroupRequestBuilder(gamerTag, objectId);
    }
    private okhttp3.Call removeMemberCall(String objectId, KickRequest kickRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kickRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/member"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberValidateBeforeCall(String objectId, KickRequest kickRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeMember(Async)");
        }

        return removeMemberCall(objectId, kickRequest, _callback);

    }


    private ApiResponse<GroupMembershipResponse> removeMemberWithHttpInfo(String objectId, KickRequest kickRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(objectId, kickRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMemberAsync(String objectId, KickRequest kickRequest, final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(objectId, kickRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMemberRequestBuilder {
        private final Integer gamerTag;
        private final String objectId;
        private Integer subGroup;

        private RemoveMemberRequestBuilder(Integer gamerTag, String objectId) {
            this.gamerTag = gamerTag;
            this.objectId = objectId;
        }

        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return RemoveMemberRequestBuilder
         */
        public RemoveMemberRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for removeMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return removeMemberCall(objectId, kickRequest, _callback);
        }

        private KickRequest buildBodyParams() {
            KickRequest kickRequest = new KickRequest();
            kickRequest.gamerTag(this.gamerTag);
            kickRequest.subGroup(this.subGroup);
            return kickRequest;
        }

        /**
         * Execute removeMember request
         * @return GroupMembershipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembershipResponse execute() throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            ApiResponse<GroupMembershipResponse> localVarResp = removeMemberWithHttpInfo(objectId, kickRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMember request with HTTP info returned
         * @return ApiResponse&lt;GroupMembershipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembershipResponse> executeWithHttpInfo() throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return removeMemberWithHttpInfo(objectId, kickRequest);
        }

        /**
         * Execute removeMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembershipResponse> _callback) throws ApiException {
            KickRequest kickRequest = buildBodyParams();
            return removeMemberAsync(objectId, kickRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberRequestBuilder removeMember(Integer gamerTag, String objectId) throws IllegalArgumentException {
        if (gamerTag == null) throw new IllegalArgumentException("\"gamerTag\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveMemberRequestBuilder(gamerTag, objectId);
    }
    private okhttp3.Call searchGroupsCall(String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/groups/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (scoreMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreMin", scoreMin));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (userScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userScore", userScore));
        }

        if (hasSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSlots", hasSlots));
        }

        if (enrollmentTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrollmentTypes", enrollmentTypes));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (scoreMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreMax", scoreMax));
        }

        if (subGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subGroup", subGroup));
        }

        if (sortValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortValue", sortValue));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroupsValidateBeforeCall(String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback _callback) throws ApiException {
        return searchGroupsCall(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);

    }


    private ApiResponse<GroupSearchResponse> searchGroupsWithHttpInfo(String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, null);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchGroupsAsync(String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback<GroupSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchGroupsRequestBuilder {
        private String name;
        private Integer scoreMin;
        private String sortField;
        private Integer userScore;
        private Boolean hasSlots;
        private String enrollmentTypes;
        private Integer offset;
        private Integer scoreMax;
        private Boolean subGroup;
        private Integer sortValue;
        private String type;
        private Integer limit;

        private SearchGroupsRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set scoreMin
         * @param scoreMin  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder scoreMin(Integer scoreMin) {
            this.scoreMin = scoreMin;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set userScore
         * @param userScore  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder userScore(Integer userScore) {
            this.userScore = userScore;
            return this;
        }
        
        /**
         * Set hasSlots
         * @param hasSlots  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder hasSlots(Boolean hasSlots) {
            this.hasSlots = hasSlots;
            return this;
        }
        
        /**
         * Set enrollmentTypes
         * @param enrollmentTypes  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder enrollmentTypes(String enrollmentTypes) {
            this.enrollmentTypes = enrollmentTypes;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set scoreMax
         * @param scoreMax  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder scoreMax(Integer scoreMax) {
            this.scoreMax = scoreMax;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder subGroup(Boolean subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Set sortValue
         * @param sortValue  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder sortValue(Integer sortValue) {
            this.sortValue = sortValue;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return SearchGroupsRequestBuilder
         */
        public SearchGroupsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for searchGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchGroupsCall(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        }


        /**
         * Execute searchGroups request
         * @return GroupSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupSearchResponse execute() throws ApiException {
            ApiResponse<GroupSearchResponse> localVarResp = searchGroupsWithHttpInfo(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchGroups request with HTTP info returned
         * @return ApiResponse&lt;GroupSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchGroupsWithHttpInfo(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit);
        }

        /**
         * Execute searchGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupSearchResponse> _callback) throws ApiException {
            return searchGroupsAsync(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @return SearchGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchGroupsRequestBuilder searchGroups() throws IllegalArgumentException {
        return new SearchGroupsRequestBuilder();
    }
    private okhttp3.Call searchUsersCall(String objectId, String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/group-users/{objectId}/search"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (scoreMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreMin", scoreMin));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (userScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userScore", userScore));
        }

        if (hasSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSlots", hasSlots));
        }

        if (enrollmentTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrollmentTypes", enrollmentTypes));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (scoreMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreMax", scoreMax));
        }

        if (subGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subGroup", subGroup));
        }

        if (sortValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortValue", sortValue));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUsersValidateBeforeCall(String objectId, String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling searchUsers(Async)");
        }

        return searchUsersCall(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);

    }


    private ApiResponse<GroupSearchResponse> searchUsersWithHttpInfo(String objectId, String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, null);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchUsersAsync(String objectId, String name, Integer scoreMin, String sortField, Integer userScore, Boolean hasSlots, String enrollmentTypes, Integer offset, Integer scoreMax, Boolean subGroup, Integer sortValue, String type, Integer limit, final ApiCallback<GroupSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        Type localVarReturnType = new TypeToken<GroupSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchUsersRequestBuilder {
        private final String objectId;
        private String name;
        private Integer scoreMin;
        private String sortField;
        private Integer userScore;
        private Boolean hasSlots;
        private String enrollmentTypes;
        private Integer offset;
        private Integer scoreMax;
        private Boolean subGroup;
        private Integer sortValue;
        private String type;
        private Integer limit;

        private SearchUsersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set scoreMin
         * @param scoreMin  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder scoreMin(Integer scoreMin) {
            this.scoreMin = scoreMin;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set userScore
         * @param userScore  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder userScore(Integer userScore) {
            this.userScore = userScore;
            return this;
        }
        
        /**
         * Set hasSlots
         * @param hasSlots  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder hasSlots(Boolean hasSlots) {
            this.hasSlots = hasSlots;
            return this;
        }
        
        /**
         * Set enrollmentTypes
         * @param enrollmentTypes  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder enrollmentTypes(String enrollmentTypes) {
            this.enrollmentTypes = enrollmentTypes;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set scoreMax
         * @param scoreMax  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder scoreMax(Integer scoreMax) {
            this.scoreMax = scoreMax;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder subGroup(Boolean subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Set sortValue
         * @param sortValue  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder sortValue(Integer sortValue) {
            this.sortValue = sortValue;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return SearchUsersRequestBuilder
         */
        public SearchUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for searchUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchUsersCall(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        }


        /**
         * Execute searchUsers request
         * @return GroupSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GroupSearchResponse execute() throws ApiException {
            ApiResponse<GroupSearchResponse> localVarResp = searchUsersWithHttpInfo(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchUsers request with HTTP info returned
         * @return ApiResponse&lt;GroupSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchUsersWithHttpInfo(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit);
        }

        /**
         * Execute searchUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupSearchResponse> _callback) throws ApiException {
            return searchUsersAsync(objectId, name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SearchUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchUsersRequestBuilder searchUsers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SearchUsersRequestBuilder(objectId);
    }
    private okhttp3.Call updateDonationCall(String objectId, MakeDonationRequest makeDonationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = makeDonationRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/donations"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDonationValidateBeforeCall(String objectId, MakeDonationRequest makeDonationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateDonation(Async)");
        }

        return updateDonationCall(objectId, makeDonationRequest, _callback);

    }


    private ApiResponse<EmptyResponse> updateDonationWithHttpInfo(String objectId, MakeDonationRequest makeDonationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDonationValidateBeforeCall(objectId, makeDonationRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDonationAsync(String objectId, MakeDonationRequest makeDonationRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDonationValidateBeforeCall(objectId, makeDonationRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDonationRequestBuilder {
        private final Integer recipientId;
        private final Integer amount;
        private final String objectId;

        private UpdateDonationRequestBuilder(Integer recipientId, Integer amount, String objectId) {
            this.recipientId = recipientId;
            this.amount = amount;
            this.objectId = objectId;
        }

        /**
         * Build call for updateDonation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MakeDonationRequest makeDonationRequest = buildBodyParams();
            return updateDonationCall(objectId, makeDonationRequest, _callback);
        }

        private MakeDonationRequest buildBodyParams() {
            MakeDonationRequest makeDonationRequest = new MakeDonationRequest();
            makeDonationRequest.recipientId(this.recipientId);
            makeDonationRequest.amount(this.amount);
            return makeDonationRequest;
        }

        /**
         * Execute updateDonation request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            MakeDonationRequest makeDonationRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateDonationWithHttpInfo(objectId, makeDonationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDonation request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            MakeDonationRequest makeDonationRequest = buildBodyParams();
            return updateDonationWithHttpInfo(objectId, makeDonationRequest);
        }

        /**
         * Execute updateDonation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            MakeDonationRequest makeDonationRequest = buildBodyParams();
            return updateDonationAsync(objectId, makeDonationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateDonationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDonationRequestBuilder updateDonation(Integer recipientId, Integer amount, String objectId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateDonationRequestBuilder(recipientId, amount, objectId);
    }
    private okhttp3.Call updateObjectGroupCall(String objectId, GroupUpdate groupUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupUpdate;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectGroupValidateBeforeCall(String objectId, GroupUpdate groupUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectGroup(Async)");
        }

        return updateObjectGroupCall(objectId, groupUpdate, _callback);

    }


    private ApiResponse<CommonResponse> updateObjectGroupWithHttpInfo(String objectId, GroupUpdate groupUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateObjectGroupValidateBeforeCall(objectId, groupUpdate, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectGroupAsync(String objectId, GroupUpdate groupUpdate, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectGroupValidateBeforeCall(objectId, groupUpdate, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectGroupRequestBuilder {
        private final String objectId;
        private String name;
        private String enrollmentType;
        private String tag;
        private String slogan;
        private Integer requirement;
        private String motd;
        private String clientData;
        private Integer subGroup;

        private UpdateObjectGroupRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set enrollmentType
         * @param enrollmentType  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder enrollmentType(String enrollmentType) {
            this.enrollmentType = enrollmentType;
            return this;
        }
        
        /**
         * Set tag
         * @param tag  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set slogan
         * @param slogan  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder slogan(String slogan) {
            this.slogan = slogan;
            return this;
        }
        
        /**
         * Set requirement
         * @param requirement  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder requirement(Integer requirement) {
            this.requirement = requirement;
            return this;
        }
        
        /**
         * Set motd
         * @param motd  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder motd(String motd) {
            this.motd = motd;
            return this;
        }
        
        /**
         * Set clientData
         * @param clientData  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder clientData(String clientData) {
            this.clientData = clientData;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return UpdateObjectGroupRequestBuilder
         */
        public UpdateObjectGroupRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for updateObjectGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupUpdate groupUpdate = buildBodyParams();
            return updateObjectGroupCall(objectId, groupUpdate, _callback);
        }

        private GroupUpdate buildBodyParams() {
            GroupUpdate groupUpdate = new GroupUpdate();
            groupUpdate.name(this.name);
            groupUpdate.enrollmentType(this.enrollmentType);
            groupUpdate.tag(this.tag);
            groupUpdate.slogan(this.slogan);
            groupUpdate.requirement(this.requirement);
            groupUpdate.motd(this.motd);
            groupUpdate.clientData(this.clientData);
            groupUpdate.subGroup(this.subGroup);
            return groupUpdate;
        }

        /**
         * Execute updateObjectGroup request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            GroupUpdate groupUpdate = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateObjectGroupWithHttpInfo(objectId, groupUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObjectGroup request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            GroupUpdate groupUpdate = buildBodyParams();
            return updateObjectGroupWithHttpInfo(objectId, groupUpdate);
        }

        /**
         * Execute updateObjectGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            GroupUpdate groupUpdate = buildBodyParams();
            return updateObjectGroupAsync(objectId, groupUpdate, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateObjectGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectGroupRequestBuilder updateObjectGroup(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateObjectGroupRequestBuilder(objectId);
    }
    private okhttp3.Call updateRoleCall(String objectId, RoleChangeRequest roleChangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleChangeRequest;

        // create path and map variables
        String localVarPath = "/object/groups/{objectId}/role"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String objectId, RoleChangeRequest roleChangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateRole(Async)");
        }

        return updateRoleCall(objectId, roleChangeRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateRoleWithHttpInfo(String objectId, RoleChangeRequest roleChangeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(objectId, roleChangeRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRoleAsync(String objectId, RoleChangeRequest roleChangeRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(objectId, roleChangeRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRoleRequestBuilder {
        private final Integer gamerTag;
        private final String objectId;
        private String role;
        private Integer subGroup;

        private UpdateRoleRequestBuilder(Integer gamerTag, String objectId) {
            this.gamerTag = gamerTag;
            this.objectId = objectId;
        }

        /**
         * Set role
         * @param role  (optional)
         * @return UpdateRoleRequestBuilder
         */
        public UpdateRoleRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set subGroup
         * @param subGroup  (optional)
         * @return UpdateRoleRequestBuilder
         */
        public UpdateRoleRequestBuilder subGroup(Integer subGroup) {
            this.subGroup = subGroup;
            return this;
        }
        
        /**
         * Build call for updateRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RoleChangeRequest roleChangeRequest = buildBodyParams();
            return updateRoleCall(objectId, roleChangeRequest, _callback);
        }

        private RoleChangeRequest buildBodyParams() {
            RoleChangeRequest roleChangeRequest = new RoleChangeRequest();
            roleChangeRequest.gamerTag(this.gamerTag);
            roleChangeRequest.role(this.role);
            roleChangeRequest.subGroup(this.subGroup);
            return roleChangeRequest;
        }

        /**
         * Execute updateRole request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            RoleChangeRequest roleChangeRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateRoleWithHttpInfo(objectId, roleChangeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRole request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            RoleChangeRequest roleChangeRequest = buildBodyParams();
            return updateRoleWithHttpInfo(objectId, roleChangeRequest);
        }

        /**
         * Execute updateRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            RoleChangeRequest roleChangeRequest = buildBodyParams();
            return updateRoleAsync(objectId, roleChangeRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleRequestBuilder updateRole(Integer gamerTag, String objectId) throws IllegalArgumentException {
        if (gamerTag == null) throw new IllegalArgumentException("\"gamerTag\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateRoleRequestBuilder(gamerTag, objectId);
    }
}
