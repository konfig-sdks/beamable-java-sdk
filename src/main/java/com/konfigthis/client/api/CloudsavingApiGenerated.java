/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.Manifest;
import com.konfigthis.client.model.ObjectRequest;
import com.konfigthis.client.model.ObjectRequests;
import com.konfigthis.client.model.ObjectsMetadataResponse;
import com.konfigthis.client.model.PlayerBasicCloudDataRequest;
import com.konfigthis.client.model.ReplaceObjectsRequest;
import com.konfigthis.client.model.URLSResponse;
import com.konfigthis.client.model.UploadRequest;
import com.konfigthis.client.model.UploadRequestFromPortal;
import com.konfigthis.client.model.UploadRequests;
import com.konfigthis.client.model.UploadRequestsFromPortal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CloudsavingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CloudsavingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CloudsavingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call commitManifestPutCall(UploadRequests uploadRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadRequests;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/commitManifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitManifestPutValidateBeforeCall(UploadRequests uploadRequests, final ApiCallback _callback) throws ApiException {
        return commitManifestPutCall(uploadRequests, _callback);

    }


    private ApiResponse<Manifest> commitManifestPutWithHttpInfo(UploadRequests uploadRequests) throws ApiException {
        okhttp3.Call localVarCall = commitManifestPutValidateBeforeCall(uploadRequests, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call commitManifestPutAsync(UploadRequests uploadRequests, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitManifestPutValidateBeforeCall(uploadRequests, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CommitManifestPutRequestBuilder {
        private List<UploadRequest> request;
        private Integer playerId;

        private CommitManifestPutRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return CommitManifestPutRequestBuilder
         */
        public CommitManifestPutRequestBuilder request(List<UploadRequest> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return CommitManifestPutRequestBuilder
         */
        public CommitManifestPutRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for commitManifestPut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return commitManifestPutCall(uploadRequests, _callback);
        }

        private UploadRequests buildBodyParams() {
            UploadRequests uploadRequests = new UploadRequests();
            uploadRequests.request(this.request);
            uploadRequests.playerId(this.playerId);
            return uploadRequests;
        }

        /**
         * Execute commitManifestPut request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            ApiResponse<Manifest> localVarResp = commitManifestPutWithHttpInfo(uploadRequests);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute commitManifestPut request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return commitManifestPutWithHttpInfo(uploadRequests);
        }

        /**
         * Execute commitManifestPut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return commitManifestPutAsync(uploadRequests, _callback);
        }
    }

    /**
     * 
     * 
     * @return CommitManifestPutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CommitManifestPutRequestBuilder commitManifestPut() throws IllegalArgumentException {
        return new CommitManifestPutRequestBuilder();
    }
    private okhttp3.Call deleteDataCall(ObjectRequests objectRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectRequests;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataValidateBeforeCall(ObjectRequests objectRequests, final ApiCallback _callback) throws ApiException {
        return deleteDataCall(objectRequests, _callback);

    }


    private ApiResponse<EmptyResponse> deleteDataWithHttpInfo(ObjectRequests objectRequests) throws ApiException {
        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(objectRequests, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDataAsync(ObjectRequests objectRequests, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(objectRequests, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDataRequestBuilder {
        private List<ObjectRequest> request;
        private Integer playerId;

        private DeleteDataRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return DeleteDataRequestBuilder
         */
        public DeleteDataRequestBuilder request(List<ObjectRequest> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return DeleteDataRequestBuilder
         */
        public DeleteDataRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for deleteData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return deleteDataCall(objectRequests, _callback);
        }

        private ObjectRequests buildBodyParams() {
            ObjectRequests objectRequests = new ObjectRequests();
            objectRequests.request(this.request);
            objectRequests.playerId(this.playerId);
            return objectRequests;
        }

        /**
         * Execute deleteData request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = deleteDataWithHttpInfo(objectRequests);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteData request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return deleteDataWithHttpInfo(objectRequests);
        }

        /**
         * Execute deleteData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return deleteDataAsync(objectRequests, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDataRequestBuilder deleteData() throws IllegalArgumentException {
        return new DeleteDataRequestBuilder();
    }
    private okhttp3.Call getDataCall(Integer playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataValidateBeforeCall(Integer playerId, final ApiCallback _callback) throws ApiException {
        return getDataCall(playerId, _callback);

    }


    private ApiResponse<Manifest> getDataWithHttpInfo(Integer playerId) throws ApiException {
        okhttp3.Call localVarCall = getDataValidateBeforeCall(playerId, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataAsync(Integer playerId, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataValidateBeforeCall(playerId, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataRequestBuilder {
        private Integer playerId;

        private GetDataRequestBuilder() {
        }

        /**
         * Set playerId
         * @param playerId  (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for getData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataCall(playerId, _callback);
        }


        /**
         * Execute getData request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            ApiResponse<Manifest> localVarResp = getDataWithHttpInfo(playerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getData request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            return getDataWithHttpInfo(playerId);
        }

        /**
         * Execute getData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            return getDataAsync(playerId, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetDataRequestBuilder getData() throws IllegalArgumentException {
        return new GetDataRequestBuilder();
    }
    private okhttp3.Call getDataDownloadUrlCall(ObjectRequests objectRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectRequests;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/downloadURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataDownloadUrlValidateBeforeCall(ObjectRequests objectRequests, final ApiCallback _callback) throws ApiException {
        return getDataDownloadUrlCall(objectRequests, _callback);

    }


    private ApiResponse<URLSResponse> getDataDownloadUrlWithHttpInfo(ObjectRequests objectRequests) throws ApiException {
        okhttp3.Call localVarCall = getDataDownloadUrlValidateBeforeCall(objectRequests, null);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataDownloadUrlAsync(ObjectRequests objectRequests, final ApiCallback<URLSResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataDownloadUrlValidateBeforeCall(objectRequests, _callback);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataDownloadUrlRequestBuilder {
        private List<ObjectRequest> request;
        private Integer playerId;

        private GetDataDownloadUrlRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return GetDataDownloadUrlRequestBuilder
         */
        public GetDataDownloadUrlRequestBuilder request(List<ObjectRequest> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return GetDataDownloadUrlRequestBuilder
         */
        public GetDataDownloadUrlRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for getDataDownloadUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return getDataDownloadUrlCall(objectRequests, _callback);
        }

        private ObjectRequests buildBodyParams() {
            ObjectRequests objectRequests = new ObjectRequests();
            objectRequests.request(this.request);
            objectRequests.playerId(this.playerId);
            return objectRequests;
        }

        /**
         * Execute getDataDownloadUrl request
         * @return URLSResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public URLSResponse execute() throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            ApiResponse<URLSResponse> localVarResp = getDataDownloadUrlWithHttpInfo(objectRequests);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataDownloadUrl request with HTTP info returned
         * @return ApiResponse&lt;URLSResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<URLSResponse> executeWithHttpInfo() throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return getDataDownloadUrlWithHttpInfo(objectRequests);
        }

        /**
         * Execute getDataDownloadUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<URLSResponse> _callback) throws ApiException {
            ObjectRequests objectRequests = buildBodyParams();
            return getDataDownloadUrlAsync(objectRequests, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetDataDownloadUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetDataDownloadUrlRequestBuilder getDataDownloadUrl() throws IllegalArgumentException {
        return new GetDataDownloadUrlRequestBuilder();
    }
    private okhttp3.Call getDataMetadataCall(List<Object> request, Integer playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (request != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "request", request));
        }

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataMetadataValidateBeforeCall(List<Object> request, Integer playerId, final ApiCallback _callback) throws ApiException {
        return getDataMetadataCall(request, playerId, _callback);

    }


    private ApiResponse<ObjectsMetadataResponse> getDataMetadataWithHttpInfo(List<Object> request, Integer playerId) throws ApiException {
        okhttp3.Call localVarCall = getDataMetadataValidateBeforeCall(request, playerId, null);
        Type localVarReturnType = new TypeToken<ObjectsMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataMetadataAsync(List<Object> request, Integer playerId, final ApiCallback<ObjectsMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataMetadataValidateBeforeCall(request, playerId, _callback);
        Type localVarReturnType = new TypeToken<ObjectsMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataMetadataRequestBuilder {
        private List<Object> request;
        private Integer playerId;

        private GetDataMetadataRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return GetDataMetadataRequestBuilder
         */
        public GetDataMetadataRequestBuilder request(List<Object> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return GetDataMetadataRequestBuilder
         */
        public GetDataMetadataRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for getDataMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataMetadataCall(request, playerId, _callback);
        }


        /**
         * Execute getDataMetadata request
         * @return ObjectsMetadataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ObjectsMetadataResponse execute() throws ApiException {
            ApiResponse<ObjectsMetadataResponse> localVarResp = getDataMetadataWithHttpInfo(request, playerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataMetadata request with HTTP info returned
         * @return ApiResponse&lt;ObjectsMetadataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObjectsMetadataResponse> executeWithHttpInfo() throws ApiException {
            return getDataMetadataWithHttpInfo(request, playerId);
        }

        /**
         * Execute getDataMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObjectsMetadataResponse> _callback) throws ApiException {
            return getDataMetadataAsync(request, playerId, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetDataMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetDataMetadataRequestBuilder getDataMetadata() throws IllegalArgumentException {
        return new GetDataMetadataRequestBuilder();
    }
    private okhttp3.Call moveDataPutCall(PlayerBasicCloudDataRequest playerBasicCloudDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playerBasicCloudDataRequest;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/move";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveDataPutValidateBeforeCall(PlayerBasicCloudDataRequest playerBasicCloudDataRequest, final ApiCallback _callback) throws ApiException {
        return moveDataPutCall(playerBasicCloudDataRequest, _callback);

    }


    private ApiResponse<Manifest> moveDataPutWithHttpInfo(PlayerBasicCloudDataRequest playerBasicCloudDataRequest) throws ApiException {
        okhttp3.Call localVarCall = moveDataPutValidateBeforeCall(playerBasicCloudDataRequest, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveDataPutAsync(PlayerBasicCloudDataRequest playerBasicCloudDataRequest, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveDataPutValidateBeforeCall(playerBasicCloudDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MoveDataPutRequestBuilder {
        private Integer playerId;

        private MoveDataPutRequestBuilder() {
        }

        /**
         * Set playerId
         * @param playerId  (optional)
         * @return MoveDataPutRequestBuilder
         */
        public MoveDataPutRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for moveDataPut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlayerBasicCloudDataRequest playerBasicCloudDataRequest = buildBodyParams();
            return moveDataPutCall(playerBasicCloudDataRequest, _callback);
        }

        private PlayerBasicCloudDataRequest buildBodyParams() {
            PlayerBasicCloudDataRequest playerBasicCloudDataRequest = new PlayerBasicCloudDataRequest();
            playerBasicCloudDataRequest.playerId(this.playerId);
            return playerBasicCloudDataRequest;
        }

        /**
         * Execute moveDataPut request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            PlayerBasicCloudDataRequest playerBasicCloudDataRequest = buildBodyParams();
            ApiResponse<Manifest> localVarResp = moveDataPutWithHttpInfo(playerBasicCloudDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute moveDataPut request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            PlayerBasicCloudDataRequest playerBasicCloudDataRequest = buildBodyParams();
            return moveDataPutWithHttpInfo(playerBasicCloudDataRequest);
        }

        /**
         * Execute moveDataPut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            PlayerBasicCloudDataRequest playerBasicCloudDataRequest = buildBodyParams();
            return moveDataPutAsync(playerBasicCloudDataRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return MoveDataPutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MoveDataPutRequestBuilder moveDataPut() throws IllegalArgumentException {
        return new MoveDataPutRequestBuilder();
    }
    private okhttp3.Call replaceDataCall(ReplaceObjectsRequest replaceObjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceObjectsRequest;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDataValidateBeforeCall(ReplaceObjectsRequest replaceObjectsRequest, final ApiCallback _callback) throws ApiException {
        return replaceDataCall(replaceObjectsRequest, _callback);

    }


    private ApiResponse<Manifest> replaceDataWithHttpInfo(ReplaceObjectsRequest replaceObjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceDataValidateBeforeCall(replaceObjectsRequest, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceDataAsync(ReplaceObjectsRequest replaceObjectsRequest, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDataValidateBeforeCall(replaceObjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceDataRequestBuilder {
        private final Integer sourcePlayerId;
        private final Integer targetPlayerId;

        private ReplaceDataRequestBuilder(Integer sourcePlayerId, Integer targetPlayerId) {
            this.sourcePlayerId = sourcePlayerId;
            this.targetPlayerId = targetPlayerId;
        }

        /**
         * Build call for replaceData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplaceObjectsRequest replaceObjectsRequest = buildBodyParams();
            return replaceDataCall(replaceObjectsRequest, _callback);
        }

        private ReplaceObjectsRequest buildBodyParams() {
            ReplaceObjectsRequest replaceObjectsRequest = new ReplaceObjectsRequest();
            replaceObjectsRequest.sourcePlayerId(this.sourcePlayerId);
            replaceObjectsRequest.targetPlayerId(this.targetPlayerId);
            return replaceObjectsRequest;
        }

        /**
         * Execute replaceData request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            ReplaceObjectsRequest replaceObjectsRequest = buildBodyParams();
            ApiResponse<Manifest> localVarResp = replaceDataWithHttpInfo(replaceObjectsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceData request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            ReplaceObjectsRequest replaceObjectsRequest = buildBodyParams();
            return replaceDataWithHttpInfo(replaceObjectsRequest);
        }

        /**
         * Execute replaceData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            ReplaceObjectsRequest replaceObjectsRequest = buildBodyParams();
            return replaceDataAsync(replaceObjectsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ReplaceDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceDataRequestBuilder replaceData(Integer sourcePlayerId, Integer targetPlayerId) throws IllegalArgumentException {
        if (sourcePlayerId == null) throw new IllegalArgumentException("\"sourcePlayerId\" is required but got null");
        if (targetPlayerId == null) throw new IllegalArgumentException("\"targetPlayerId\" is required but got null");
        return new ReplaceDataRequestBuilder(sourcePlayerId, targetPlayerId);
    }
    private okhttp3.Call uploadDataUrlCall(UploadRequests uploadRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadRequests;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/uploadURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDataUrlValidateBeforeCall(UploadRequests uploadRequests, final ApiCallback _callback) throws ApiException {
        return uploadDataUrlCall(uploadRequests, _callback);

    }


    private ApiResponse<URLSResponse> uploadDataUrlWithHttpInfo(UploadRequests uploadRequests) throws ApiException {
        okhttp3.Call localVarCall = uploadDataUrlValidateBeforeCall(uploadRequests, null);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadDataUrlAsync(UploadRequests uploadRequests, final ApiCallback<URLSResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDataUrlValidateBeforeCall(uploadRequests, _callback);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadDataUrlRequestBuilder {
        private List<UploadRequest> request;
        private Integer playerId;

        private UploadDataUrlRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return UploadDataUrlRequestBuilder
         */
        public UploadDataUrlRequestBuilder request(List<UploadRequest> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return UploadDataUrlRequestBuilder
         */
        public UploadDataUrlRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for uploadDataUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return uploadDataUrlCall(uploadRequests, _callback);
        }

        private UploadRequests buildBodyParams() {
            UploadRequests uploadRequests = new UploadRequests();
            uploadRequests.request(this.request);
            uploadRequests.playerId(this.playerId);
            return uploadRequests;
        }

        /**
         * Execute uploadDataUrl request
         * @return URLSResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public URLSResponse execute() throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            ApiResponse<URLSResponse> localVarResp = uploadDataUrlWithHttpInfo(uploadRequests);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadDataUrl request with HTTP info returned
         * @return ApiResponse&lt;URLSResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<URLSResponse> executeWithHttpInfo() throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return uploadDataUrlWithHttpInfo(uploadRequests);
        }

        /**
         * Execute uploadDataUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<URLSResponse> _callback) throws ApiException {
            UploadRequests uploadRequests = buildBodyParams();
            return uploadDataUrlAsync(uploadRequests, _callback);
        }
    }

    /**
     * 
     * 
     * @return UploadDataUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UploadDataUrlRequestBuilder uploadDataUrl() throws IllegalArgumentException {
        return new UploadDataUrlRequestBuilder();
    }
    private okhttp3.Call uploadUrlFromPortalCall(UploadRequestsFromPortal uploadRequestsFromPortal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadRequestsFromPortal;

        // create path and map variables
        String localVarPath = "/basic/cloudsaving/data/uploadURLFromPortal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadUrlFromPortalValidateBeforeCall(UploadRequestsFromPortal uploadRequestsFromPortal, final ApiCallback _callback) throws ApiException {
        return uploadUrlFromPortalCall(uploadRequestsFromPortal, _callback);

    }


    private ApiResponse<URLSResponse> uploadUrlFromPortalWithHttpInfo(UploadRequestsFromPortal uploadRequestsFromPortal) throws ApiException {
        okhttp3.Call localVarCall = uploadUrlFromPortalValidateBeforeCall(uploadRequestsFromPortal, null);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadUrlFromPortalAsync(UploadRequestsFromPortal uploadRequestsFromPortal, final ApiCallback<URLSResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadUrlFromPortalValidateBeforeCall(uploadRequestsFromPortal, _callback);
        Type localVarReturnType = new TypeToken<URLSResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadUrlFromPortalRequestBuilder {
        private List<UploadRequestFromPortal> request;
        private Integer playerId;

        private UploadUrlFromPortalRequestBuilder() {
        }

        /**
         * Set request
         * @param request  (optional)
         * @return UploadUrlFromPortalRequestBuilder
         */
        public UploadUrlFromPortalRequestBuilder request(List<UploadRequestFromPortal> request) {
            this.request = request;
            return this;
        }
        
        /**
         * Set playerId
         * @param playerId  (optional)
         * @return UploadUrlFromPortalRequestBuilder
         */
        public UploadUrlFromPortalRequestBuilder playerId(Integer playerId) {
            this.playerId = playerId;
            return this;
        }
        
        /**
         * Build call for uploadUrlFromPortal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadRequestsFromPortal uploadRequestsFromPortal = buildBodyParams();
            return uploadUrlFromPortalCall(uploadRequestsFromPortal, _callback);
        }

        private UploadRequestsFromPortal buildBodyParams() {
            UploadRequestsFromPortal uploadRequestsFromPortal = new UploadRequestsFromPortal();
            uploadRequestsFromPortal.request(this.request);
            uploadRequestsFromPortal.playerId(this.playerId);
            return uploadRequestsFromPortal;
        }

        /**
         * Execute uploadUrlFromPortal request
         * @return URLSResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public URLSResponse execute() throws ApiException {
            UploadRequestsFromPortal uploadRequestsFromPortal = buildBodyParams();
            ApiResponse<URLSResponse> localVarResp = uploadUrlFromPortalWithHttpInfo(uploadRequestsFromPortal);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadUrlFromPortal request with HTTP info returned
         * @return ApiResponse&lt;URLSResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<URLSResponse> executeWithHttpInfo() throws ApiException {
            UploadRequestsFromPortal uploadRequestsFromPortal = buildBodyParams();
            return uploadUrlFromPortalWithHttpInfo(uploadRequestsFromPortal);
        }

        /**
         * Execute uploadUrlFromPortal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<URLSResponse> _callback) throws ApiException {
            UploadRequestsFromPortal uploadRequestsFromPortal = buildBodyParams();
            return uploadUrlFromPortalAsync(uploadRequestsFromPortal, _callback);
        }
    }

    /**
     * 
     * 
     * @return UploadUrlFromPortalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UploadUrlFromPortalRequestBuilder uploadUrlFromPortal() throws IllegalArgumentException {
        return new UploadUrlFromPortalRequestBuilder();
    }
}
