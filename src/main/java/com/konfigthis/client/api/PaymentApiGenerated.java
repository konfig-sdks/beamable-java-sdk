/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BeginPurchaseRequest;
import com.konfigthis.client.model.BeginPurchaseResponse;
import com.konfigthis.client.model.CancelPurchaseRequest;
import com.konfigthis.client.model.CompletePurchaseRequest;
import com.konfigthis.client.model.CurrencyChange;
import com.konfigthis.client.model.FailPurchaseRequest;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.PaymentResultResponse;
import com.konfigthis.client.model.TrackPurchaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelPurchaseCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/test/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPurchaseValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return cancelPurchaseCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> cancelPurchaseWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelPurchaseValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPurchaseAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPurchaseValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelPurchaseRequestBuilder {
        private final Integer txid;

        private CancelPurchaseRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for cancelPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute cancelPurchase request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = cancelPurchaseWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelPurchase request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute cancelPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CancelPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CancelPurchaseRequestBuilder cancelPurchase(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CancelPurchaseRequestBuilder(txid);
    }
    private okhttp3.Call cancelPurchaseProcessCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPurchaseProcessValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return cancelPurchaseProcessCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> cancelPurchaseProcessWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelPurchaseProcessValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPurchaseProcessAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPurchaseProcessValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelPurchaseProcessRequestBuilder {
        private final Integer txid;

        private CancelPurchaseProcessRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for cancelPurchaseProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseProcessCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute cancelPurchaseProcess request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = cancelPurchaseProcessWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelPurchaseProcess request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseProcessWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute cancelPurchaseProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return cancelPurchaseProcessAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CancelPurchaseProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CancelPurchaseProcessRequestBuilder cancelPurchaseProcess(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CancelPurchaseProcessRequestBuilder(txid);
    }
    private okhttp3.Call completeItunesPurchaseCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeItunesPurchaseValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return completeItunesPurchaseCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> completeItunesPurchaseWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = completeItunesPurchaseValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeItunesPurchaseAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeItunesPurchaseValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteItunesPurchaseRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private CompleteItunesPurchaseRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return CompleteItunesPurchaseRequestBuilder
         */
        public CompleteItunesPurchaseRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return CompleteItunesPurchaseRequestBuilder
         */
        public CompleteItunesPurchaseRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return CompleteItunesPurchaseRequestBuilder
         */
        public CompleteItunesPurchaseRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for completeItunesPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completeItunesPurchaseCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute completeItunesPurchase request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = completeItunesPurchaseWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeItunesPurchase request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completeItunesPurchaseWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute completeItunesPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completeItunesPurchaseAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CompleteItunesPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CompleteItunesPurchaseRequestBuilder completeItunesPurchase(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CompleteItunesPurchaseRequestBuilder(txid);
    }
    private okhttp3.Call completePurchaseCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/test/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePurchaseValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return completePurchaseCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> completePurchaseWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = completePurchaseValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completePurchaseAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePurchaseValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompletePurchaseRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private CompletePurchaseRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return CompletePurchaseRequestBuilder
         */
        public CompletePurchaseRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return CompletePurchaseRequestBuilder
         */
        public CompletePurchaseRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return CompletePurchaseRequestBuilder
         */
        public CompletePurchaseRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for completePurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute completePurchase request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = completePurchaseWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completePurchase request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute completePurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CompletePurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CompletePurchaseRequestBuilder completePurchase(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CompletePurchaseRequestBuilder(txid);
    }
    private okhttp3.Call completePurchaseProcessCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePurchaseProcessValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return completePurchaseProcessCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> completePurchaseProcessWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = completePurchaseProcessValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completePurchaseProcessAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePurchaseProcessValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompletePurchaseProcessRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private CompletePurchaseProcessRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return CompletePurchaseProcessRequestBuilder
         */
        public CompletePurchaseProcessRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return CompletePurchaseProcessRequestBuilder
         */
        public CompletePurchaseProcessRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return CompletePurchaseProcessRequestBuilder
         */
        public CompletePurchaseProcessRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for completePurchaseProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseProcessCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute completePurchaseProcess request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = completePurchaseProcessWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completePurchaseProcess request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseProcessWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute completePurchaseProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchaseProcessAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CompletePurchaseProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CompletePurchaseProcessRequestBuilder completePurchaseProcess(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CompletePurchaseProcessRequestBuilder(txid);
    }
    private okhttp3.Call completePurchase_0Call(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePurchase_0ValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return completePurchase_0Call(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> completePurchase_0WithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = completePurchase_0ValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completePurchase_0Async(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePurchase_0ValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompletePurchase0RequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private CompletePurchase0RequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return CompletePurchase0RequestBuilder
         */
        public CompletePurchase0RequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return CompletePurchase0RequestBuilder
         */
        public CompletePurchase0RequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return CompletePurchase0RequestBuilder
         */
        public CompletePurchase0RequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for completePurchase_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchase_0Call(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute completePurchase_0 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = completePurchase_0WithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completePurchase_0 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchase_0WithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute completePurchase_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return completePurchase_0Async(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CompletePurchase0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CompletePurchase0RequestBuilder completePurchase_0(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CompletePurchase0RequestBuilder(txid);
    }
    private okhttp3.Call couponPurchaseBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponPurchaseBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return couponPurchaseBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> couponPurchaseBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = couponPurchaseBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call couponPurchaseBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponPurchaseBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CouponPurchaseBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private CouponPurchaseBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return CouponPurchaseBeginRequestBuilder
         */
        public CouponPurchaseBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return CouponPurchaseBeginRequestBuilder
         */
        public CouponPurchaseBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return CouponPurchaseBeginRequestBuilder
         */
        public CouponPurchaseBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for couponPurchaseBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return couponPurchaseBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute couponPurchaseBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = couponPurchaseBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute couponPurchaseBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return couponPurchaseBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute couponPurchaseBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return couponPurchaseBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CouponPurchaseBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CouponPurchaseBeginRequestBuilder couponPurchaseBegin() throws IllegalArgumentException {
        return new CouponPurchaseBeginRequestBuilder();
    }
    private okhttp3.Call couponPurchaseCancelCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponPurchaseCancelValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return couponPurchaseCancelCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> couponPurchaseCancelWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = couponPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call couponPurchaseCancelAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CouponPurchaseCancelRequestBuilder {
        private final Integer txid;

        private CouponPurchaseCancelRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for couponPurchaseCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return couponPurchaseCancelCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute couponPurchaseCancel request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = couponPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute couponPurchaseCancel request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return couponPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute couponPurchaseCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return couponPurchaseCancelAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CouponPurchaseCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CouponPurchaseCancelRequestBuilder couponPurchaseCancel(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new CouponPurchaseCancelRequestBuilder(txid);
    }
    private okhttp3.Call facebookPurchaseBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPurchaseBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return facebookPurchaseBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> facebookPurchaseBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = facebookPurchaseBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPurchaseBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPurchaseBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPurchaseBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private FacebookPurchaseBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return FacebookPurchaseBeginRequestBuilder
         */
        public FacebookPurchaseBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return FacebookPurchaseBeginRequestBuilder
         */
        public FacebookPurchaseBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return FacebookPurchaseBeginRequestBuilder
         */
        public FacebookPurchaseBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for facebookPurchaseBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return facebookPurchaseBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute facebookPurchaseBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = facebookPurchaseBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPurchaseBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return facebookPurchaseBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute facebookPurchaseBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return facebookPurchaseBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPurchaseBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPurchaseBeginRequestBuilder facebookPurchaseBegin() throws IllegalArgumentException {
        return new FacebookPurchaseBeginRequestBuilder();
    }
    private okhttp3.Call facebookPurchaseCancelCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPurchaseCancelValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return facebookPurchaseCancelCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> facebookPurchaseCancelWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = facebookPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPurchaseCancelAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPurchaseCancelRequestBuilder {
        private final Integer txid;

        private FacebookPurchaseCancelRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for facebookPurchaseCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return facebookPurchaseCancelCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute facebookPurchaseCancel request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = facebookPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPurchaseCancel request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return facebookPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute facebookPurchaseCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return facebookPurchaseCancelAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPurchaseCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPurchaseCancelRequestBuilder facebookPurchaseCancel(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new FacebookPurchaseCancelRequestBuilder(txid);
    }
    private okhttp3.Call facebookPurchaseCompleteCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPurchaseCompleteValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return facebookPurchaseCompleteCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> facebookPurchaseCompleteWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = facebookPurchaseCompleteValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPurchaseCompleteAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPurchaseCompleteValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPurchaseCompleteRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private FacebookPurchaseCompleteRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return FacebookPurchaseCompleteRequestBuilder
         */
        public FacebookPurchaseCompleteRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return FacebookPurchaseCompleteRequestBuilder
         */
        public FacebookPurchaseCompleteRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return FacebookPurchaseCompleteRequestBuilder
         */
        public FacebookPurchaseCompleteRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for facebookPurchaseComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return facebookPurchaseCompleteCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute facebookPurchaseComplete request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = facebookPurchaseCompleteWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPurchaseComplete request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return facebookPurchaseCompleteWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute facebookPurchaseComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return facebookPurchaseCompleteAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPurchaseCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPurchaseCompleteRequestBuilder facebookPurchaseComplete(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new FacebookPurchaseCompleteRequestBuilder(txid);
    }
    private okhttp3.Call facebookPurchaseFailureCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPurchaseFailureValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return facebookPurchaseFailureCall(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> facebookPurchaseFailureWithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = facebookPurchaseFailureValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPurchaseFailureAsync(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPurchaseFailureValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPurchaseFailureRequestBuilder {
        private final Integer txid;
        private String reason;

        private FacebookPurchaseFailureRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return FacebookPurchaseFailureRequestBuilder
         */
        public FacebookPurchaseFailureRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for facebookPurchaseFailure
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return facebookPurchaseFailureCall(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute facebookPurchaseFailure request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = facebookPurchaseFailureWithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPurchaseFailure request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return facebookPurchaseFailureWithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute facebookPurchaseFailure request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return facebookPurchaseFailureAsync(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPurchaseFailureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPurchaseFailureRequestBuilder facebookPurchaseFailure(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new FacebookPurchaseFailureRequestBuilder(txid);
    }
    private okhttp3.Call failPurchaseCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call failPurchaseValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return failPurchaseCall(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> failPurchaseWithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = failPurchaseValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call failPurchaseAsync(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = failPurchaseValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FailPurchaseRequestBuilder {
        private final Integer txid;
        private String reason;

        private FailPurchaseRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return FailPurchaseRequestBuilder
         */
        public FailPurchaseRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for failPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return failPurchaseCall(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute failPurchase request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = failPurchaseWithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute failPurchase request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return failPurchaseWithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute failPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return failPurchaseAsync(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FailPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FailPurchaseRequestBuilder failPurchase(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new FailPurchaseRequestBuilder(txid);
    }
    private okhttp3.Call googlePlayPurchaseBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googlePlayPurchaseBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return googlePlayPurchaseBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> googlePlayPurchaseBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = googlePlayPurchaseBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call googlePlayPurchaseBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = googlePlayPurchaseBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GooglePlayPurchaseBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private GooglePlayPurchaseBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return GooglePlayPurchaseBeginRequestBuilder
         */
        public GooglePlayPurchaseBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return GooglePlayPurchaseBeginRequestBuilder
         */
        public GooglePlayPurchaseBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return GooglePlayPurchaseBeginRequestBuilder
         */
        public GooglePlayPurchaseBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for googlePlayPurchaseBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute googlePlayPurchaseBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = googlePlayPurchaseBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute googlePlayPurchaseBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute googlePlayPurchaseBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return GooglePlayPurchaseBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayPurchaseBeginRequestBuilder googlePlayPurchaseBegin() throws IllegalArgumentException {
        return new GooglePlayPurchaseBeginRequestBuilder();
    }
    private okhttp3.Call googlePlayPurchaseCancelCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googlePlayPurchaseCancelValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return googlePlayPurchaseCancelCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> googlePlayPurchaseCancelWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = googlePlayPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call googlePlayPurchaseCancelAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = googlePlayPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GooglePlayPurchaseCancelRequestBuilder {
        private final Integer txid;

        private GooglePlayPurchaseCancelRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for googlePlayPurchaseCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseCancelCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute googlePlayPurchaseCancel request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = googlePlayPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute googlePlayPurchaseCancel request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute googlePlayPurchaseCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return googlePlayPurchaseCancelAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return GooglePlayPurchaseCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayPurchaseCancelRequestBuilder googlePlayPurchaseCancel(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new GooglePlayPurchaseCancelRequestBuilder(txid);
    }
    private okhttp3.Call initializePurchaseProcessCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializePurchaseProcessValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return initializePurchaseProcessCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> initializePurchaseProcessWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = initializePurchaseProcessValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initializePurchaseProcessAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializePurchaseProcessValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitializePurchaseProcessRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private InitializePurchaseProcessRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return InitializePurchaseProcessRequestBuilder
         */
        public InitializePurchaseProcessRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return InitializePurchaseProcessRequestBuilder
         */
        public InitializePurchaseProcessRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return InitializePurchaseProcessRequestBuilder
         */
        public InitializePurchaseProcessRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for initializePurchaseProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return initializePurchaseProcessCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute initializePurchaseProcess request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = initializePurchaseProcessWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initializePurchaseProcess request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return initializePurchaseProcessWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute initializePurchaseProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return initializePurchaseProcessAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return InitializePurchaseProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public InitializePurchaseProcessRequestBuilder initializePurchaseProcess() throws IllegalArgumentException {
        return new InitializePurchaseProcessRequestBuilder();
    }
    private okhttp3.Call itunesPurchaseBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itunesPurchaseBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return itunesPurchaseBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> itunesPurchaseBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = itunesPurchaseBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call itunesPurchaseBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itunesPurchaseBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ItunesPurchaseBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private ItunesPurchaseBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return ItunesPurchaseBeginRequestBuilder
         */
        public ItunesPurchaseBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return ItunesPurchaseBeginRequestBuilder
         */
        public ItunesPurchaseBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return ItunesPurchaseBeginRequestBuilder
         */
        public ItunesPurchaseBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for itunesPurchaseBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return itunesPurchaseBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute itunesPurchaseBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = itunesPurchaseBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute itunesPurchaseBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return itunesPurchaseBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute itunesPurchaseBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return itunesPurchaseBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ItunesPurchaseBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ItunesPurchaseBeginRequestBuilder itunesPurchaseBegin() throws IllegalArgumentException {
        return new ItunesPurchaseBeginRequestBuilder();
    }
    private okhttp3.Call itunesPurchaseTrackCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itunesPurchaseTrackValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return itunesPurchaseTrackCall(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> itunesPurchaseTrackWithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = itunesPurchaseTrackValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call itunesPurchaseTrackAsync(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itunesPurchaseTrackValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ItunesPurchaseTrackRequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private ItunesPurchaseTrackRequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return ItunesPurchaseTrackRequestBuilder
         */
        public ItunesPurchaseTrackRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for itunesPurchaseTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return itunesPurchaseTrackCall(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute itunesPurchaseTrack request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = itunesPurchaseTrackWithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute itunesPurchaseTrack request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return itunesPurchaseTrackWithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute itunesPurchaseTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return itunesPurchaseTrackAsync(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ItunesPurchaseTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ItunesPurchaseTrackRequestBuilder itunesPurchaseTrack(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new ItunesPurchaseTrackRequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call processBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/test/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> processBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private ProcessBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return ProcessBeginRequestBuilder
         */
        public ProcessBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return ProcessBeginRequestBuilder
         */
        public ProcessBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return ProcessBeginRequestBuilder
         */
        public ProcessBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for processBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return processBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute processBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = processBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return processBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute processBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return processBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessBeginRequestBuilder processBegin() throws IllegalArgumentException {
        return new ProcessBeginRequestBuilder();
    }
    private okhttp3.Call processCompleteCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processCompleteValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processCompleteCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> processCompleteWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processCompleteValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processCompleteAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processCompleteValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessCompleteRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private ProcessCompleteRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return ProcessCompleteRequestBuilder
         */
        public ProcessCompleteRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return ProcessCompleteRequestBuilder
         */
        public ProcessCompleteRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return ProcessCompleteRequestBuilder
         */
        public ProcessCompleteRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for processComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return processCompleteCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute processComplete request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = processCompleteWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processComplete request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return processCompleteWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute processComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return processCompleteAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessCompleteRequestBuilder processComplete(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new ProcessCompleteRequestBuilder(txid);
    }
    private okhttp3.Call processFailureCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/itunes/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processFailureValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processFailureCall(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> processFailureWithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processFailureValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processFailureAsync(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processFailureValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessFailureRequestBuilder {
        private final Integer txid;
        private String reason;

        private ProcessFailureRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return ProcessFailureRequestBuilder
         */
        public ProcessFailureRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for processFailure
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailureCall(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute processFailure request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = processFailureWithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processFailure request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailureWithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute processFailure request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailureAsync(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessFailureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessFailureRequestBuilder processFailure(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new ProcessFailureRequestBuilder(txid);
    }
    private okhttp3.Call processFailure_0Call(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/test/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processFailure_0ValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processFailure_0Call(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> processFailure_0WithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processFailure_0ValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processFailure_0Async(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processFailure_0ValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessFailure0RequestBuilder {
        private final Integer txid;
        private String reason;

        private ProcessFailure0RequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return ProcessFailure0RequestBuilder
         */
        public ProcessFailure0RequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for processFailure_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_0Call(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute processFailure_0 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = processFailure_0WithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processFailure_0 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_0WithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute processFailure_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_0Async(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessFailure0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessFailure0RequestBuilder processFailure_0(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new ProcessFailure0RequestBuilder(txid);
    }
    private okhttp3.Call processFailure_1Call(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processFailure_1ValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processFailure_1Call(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> processFailure_1WithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processFailure_1ValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processFailure_1Async(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processFailure_1ValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessFailure1RequestBuilder {
        private final Integer txid;
        private String reason;

        private ProcessFailure1RequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return ProcessFailure1RequestBuilder
         */
        public ProcessFailure1RequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for processFailure_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_1Call(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute processFailure_1 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = processFailure_1WithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processFailure_1 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_1WithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute processFailure_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_1Async(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessFailure1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessFailure1RequestBuilder processFailure_1(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new ProcessFailure1RequestBuilder(txid);
    }
    private okhttp3.Call processFailure_2Call(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processFailure_2ValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return processFailure_2Call(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> processFailure_2WithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processFailure_2ValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processFailure_2Async(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processFailure_2ValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessFailure2RequestBuilder {
        private final Integer txid;
        private String reason;

        private ProcessFailure2RequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return ProcessFailure2RequestBuilder
         */
        public ProcessFailure2RequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for processFailure_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_2Call(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute processFailure_2 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = processFailure_2WithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processFailure_2 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_2WithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute processFailure_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return processFailure_2Async(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProcessFailure2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProcessFailure2RequestBuilder processFailure_2(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new ProcessFailure2RequestBuilder(txid);
    }
    private okhttp3.Call steamPurchaseBeginCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beginPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/purchase/begin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call steamPurchaseBeginValidateBeforeCall(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return steamPurchaseBeginCall(beginPurchaseRequest, _callback);

    }


    private ApiResponse<BeginPurchaseResponse> steamPurchaseBeginWithHttpInfo(BeginPurchaseRequest beginPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = steamPurchaseBeginValidateBeforeCall(beginPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call steamPurchaseBeginAsync(BeginPurchaseRequest beginPurchaseRequest, final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = steamPurchaseBeginValidateBeforeCall(beginPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<BeginPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SteamPurchaseBeginRequestBuilder {
        private String purchaseId;
        private String language;
        private String time;

        private SteamPurchaseBeginRequestBuilder() {
        }

        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return SteamPurchaseBeginRequestBuilder
         */
        public SteamPurchaseBeginRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return SteamPurchaseBeginRequestBuilder
         */
        public SteamPurchaseBeginRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return SteamPurchaseBeginRequestBuilder
         */
        public SteamPurchaseBeginRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for steamPurchaseBegin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return steamPurchaseBeginCall(beginPurchaseRequest, _callback);
        }

        private BeginPurchaseRequest buildBodyParams() {
            BeginPurchaseRequest beginPurchaseRequest = new BeginPurchaseRequest();
            beginPurchaseRequest.purchaseId(this.purchaseId);
            beginPurchaseRequest.language(this.language);
            beginPurchaseRequest.time(this.time);
            return beginPurchaseRequest;
        }

        /**
         * Execute steamPurchaseBegin request
         * @return BeginPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public BeginPurchaseResponse execute() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            ApiResponse<BeginPurchaseResponse> localVarResp = steamPurchaseBeginWithHttpInfo(beginPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute steamPurchaseBegin request with HTTP info returned
         * @return ApiResponse&lt;BeginPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BeginPurchaseResponse> executeWithHttpInfo() throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return steamPurchaseBeginWithHttpInfo(beginPurchaseRequest);
        }

        /**
         * Execute steamPurchaseBegin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BeginPurchaseResponse> _callback) throws ApiException {
            BeginPurchaseRequest beginPurchaseRequest = buildBodyParams();
            return steamPurchaseBeginAsync(beginPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SteamPurchaseBeginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SteamPurchaseBeginRequestBuilder steamPurchaseBegin() throws IllegalArgumentException {
        return new SteamPurchaseBeginRequestBuilder();
    }
    private okhttp3.Call steamPurchaseCancelCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call steamPurchaseCancelValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return steamPurchaseCancelCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> steamPurchaseCancelWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = steamPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call steamPurchaseCancelAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = steamPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SteamPurchaseCancelRequestBuilder {
        private final Integer txid;

        private SteamPurchaseCancelRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for steamPurchaseCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return steamPurchaseCancelCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute steamPurchaseCancel request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = steamPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute steamPurchaseCancel request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return steamPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute steamPurchaseCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return steamPurchaseCancelAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SteamPurchaseCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SteamPurchaseCancelRequestBuilder steamPurchaseCancel(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new SteamPurchaseCancelRequestBuilder(txid);
    }
    private okhttp3.Call steamPurchaseCompleteCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completePurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/purchase/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call steamPurchaseCompleteValidateBeforeCall(CompletePurchaseRequest completePurchaseRequest, final ApiCallback _callback) throws ApiException {
        return steamPurchaseCompleteCall(completePurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> steamPurchaseCompleteWithHttpInfo(CompletePurchaseRequest completePurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = steamPurchaseCompleteValidateBeforeCall(completePurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call steamPurchaseCompleteAsync(CompletePurchaseRequest completePurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = steamPurchaseCompleteValidateBeforeCall(completePurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SteamPurchaseCompleteRequestBuilder {
        private final Integer txid;
        private String receipt;
        private String priceInLocalCurrency;
        private String isoCurrencySymbol;

        private SteamPurchaseCompleteRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set receipt
         * @param receipt  (optional)
         * @return SteamPurchaseCompleteRequestBuilder
         */
        public SteamPurchaseCompleteRequestBuilder receipt(String receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set priceInLocalCurrency
         * @param priceInLocalCurrency  (optional)
         * @return SteamPurchaseCompleteRequestBuilder
         */
        public SteamPurchaseCompleteRequestBuilder priceInLocalCurrency(String priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return SteamPurchaseCompleteRequestBuilder
         */
        public SteamPurchaseCompleteRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for steamPurchaseComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return steamPurchaseCompleteCall(completePurchaseRequest, _callback);
        }

        private CompletePurchaseRequest buildBodyParams() {
            CompletePurchaseRequest completePurchaseRequest = new CompletePurchaseRequest();
            completePurchaseRequest.txid(this.txid);
            completePurchaseRequest.receipt(this.receipt);
            completePurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            completePurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return completePurchaseRequest;
        }

        /**
         * Execute steamPurchaseComplete request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = steamPurchaseCompleteWithHttpInfo(completePurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute steamPurchaseComplete request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return steamPurchaseCompleteWithHttpInfo(completePurchaseRequest);
        }

        /**
         * Execute steamPurchaseComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CompletePurchaseRequest completePurchaseRequest = buildBodyParams();
            return steamPurchaseCompleteAsync(completePurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SteamPurchaseCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SteamPurchaseCompleteRequestBuilder steamPurchaseComplete(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new SteamPurchaseCompleteRequestBuilder(txid);
    }
    private okhttp3.Call steamPurchaseFailCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/purchase/fail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call steamPurchaseFailValidateBeforeCall(FailPurchaseRequest failPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return steamPurchaseFailCall(failPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> steamPurchaseFailWithHttpInfo(FailPurchaseRequest failPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = steamPurchaseFailValidateBeforeCall(failPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call steamPurchaseFailAsync(FailPurchaseRequest failPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = steamPurchaseFailValidateBeforeCall(failPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SteamPurchaseFailRequestBuilder {
        private final Integer txid;
        private String reason;

        private SteamPurchaseFailRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return SteamPurchaseFailRequestBuilder
         */
        public SteamPurchaseFailRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for steamPurchaseFail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return steamPurchaseFailCall(failPurchaseRequest, _callback);
        }

        private FailPurchaseRequest buildBodyParams() {
            FailPurchaseRequest failPurchaseRequest = new FailPurchaseRequest();
            failPurchaseRequest.txid(this.txid);
            failPurchaseRequest.reason(this.reason);
            return failPurchaseRequest;
        }

        /**
         * Execute steamPurchaseFail request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = steamPurchaseFailWithHttpInfo(failPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute steamPurchaseFail request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return steamPurchaseFailWithHttpInfo(failPurchaseRequest);
        }

        /**
         * Execute steamPurchaseFail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            FailPurchaseRequest failPurchaseRequest = buildBodyParams();
            return steamPurchaseFailAsync(failPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SteamPurchaseFailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SteamPurchaseFailRequestBuilder steamPurchaseFail(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new SteamPurchaseFailRequestBuilder(txid);
    }
    private okhttp3.Call trackPurchasePostCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/test/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPurchasePostValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return trackPurchasePostCall(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> trackPurchasePostWithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPurchasePostValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trackPurchasePostAsync(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPurchasePostValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrackPurchasePostRequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private TrackPurchasePostRequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return TrackPurchasePostRequestBuilder
         */
        public TrackPurchasePostRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for trackPurchasePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePostCall(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute trackPurchasePost request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = trackPurchasePostWithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trackPurchasePost request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePostWithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute trackPurchasePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePostAsync(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return TrackPurchasePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TrackPurchasePostRequestBuilder trackPurchasePost(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new TrackPurchasePostRequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call trackPurchasePost_0Call(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/coupon/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPurchasePost_0ValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return trackPurchasePost_0Call(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> trackPurchasePost_0WithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPurchasePost_0ValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trackPurchasePost_0Async(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPurchasePost_0ValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrackPurchasePost0RequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private TrackPurchasePost0RequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return TrackPurchasePost0RequestBuilder
         */
        public TrackPurchasePost0RequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for trackPurchasePost_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_0Call(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute trackPurchasePost_0 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = trackPurchasePost_0WithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trackPurchasePost_0 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_0WithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute trackPurchasePost_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_0Async(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return TrackPurchasePost0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TrackPurchasePost0RequestBuilder trackPurchasePost_0(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new TrackPurchasePost0RequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call trackPurchasePost_1Call(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPurchasePost_1ValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return trackPurchasePost_1Call(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> trackPurchasePost_1WithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPurchasePost_1ValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trackPurchasePost_1Async(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPurchasePost_1ValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrackPurchasePost1RequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private TrackPurchasePost1RequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return TrackPurchasePost1RequestBuilder
         */
        public TrackPurchasePost1RequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for trackPurchasePost_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_1Call(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute trackPurchasePost_1 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = trackPurchasePost_1WithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trackPurchasePost_1 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_1WithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute trackPurchasePost_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_1Async(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return TrackPurchasePost1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TrackPurchasePost1RequestBuilder trackPurchasePost_1(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new TrackPurchasePost1RequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call trackPurchasePost_2Call(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/googleplay/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPurchasePost_2ValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return trackPurchasePost_2Call(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> trackPurchasePost_2WithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPurchasePost_2ValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trackPurchasePost_2Async(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPurchasePost_2ValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrackPurchasePost2RequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private TrackPurchasePost2RequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return TrackPurchasePost2RequestBuilder
         */
        public TrackPurchasePost2RequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for trackPurchasePost_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_2Call(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute trackPurchasePost_2 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = trackPurchasePost_2WithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trackPurchasePost_2 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_2WithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute trackPurchasePost_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_2Async(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return TrackPurchasePost2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TrackPurchasePost2RequestBuilder trackPurchasePost_2(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new TrackPurchasePost2RequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call trackPurchasePost_3Call(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/steam/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPurchasePost_3ValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return trackPurchasePost_3Call(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> trackPurchasePost_3WithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPurchasePost_3ValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trackPurchasePost_3Async(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPurchasePost_3ValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrackPurchasePost3RequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private TrackPurchasePost3RequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return TrackPurchasePost3RequestBuilder
         */
        public TrackPurchasePost3RequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for trackPurchasePost_3
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_3Call(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute trackPurchasePost_3 request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = trackPurchasePost_3WithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trackPurchasePost_3 request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_3WithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute trackPurchasePost_3 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return trackPurchasePost_3Async(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return TrackPurchasePost3RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TrackPurchasePost3RequestBuilder trackPurchasePost_3(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new TrackPurchasePost3RequestBuilder(priceInLocalCurrency);
    }
    private okhttp3.Call windowsPurchaseCancelCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/purchase/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call windowsPurchaseCancelValidateBeforeCall(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return windowsPurchaseCancelCall(cancelPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> windowsPurchaseCancelWithHttpInfo(CancelPurchaseRequest cancelPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = windowsPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call windowsPurchaseCancelAsync(CancelPurchaseRequest cancelPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = windowsPurchaseCancelValidateBeforeCall(cancelPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WindowsPurchaseCancelRequestBuilder {
        private final Integer txid;

        private WindowsPurchaseCancelRequestBuilder(Integer txid) {
            this.txid = txid;
        }

        /**
         * Build call for windowsPurchaseCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return windowsPurchaseCancelCall(cancelPurchaseRequest, _callback);
        }

        private CancelPurchaseRequest buildBodyParams() {
            CancelPurchaseRequest cancelPurchaseRequest = new CancelPurchaseRequest();
            cancelPurchaseRequest.txid(this.txid);
            return cancelPurchaseRequest;
        }

        /**
         * Execute windowsPurchaseCancel request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = windowsPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute windowsPurchaseCancel request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return windowsPurchaseCancelWithHttpInfo(cancelPurchaseRequest);
        }

        /**
         * Execute windowsPurchaseCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            CancelPurchaseRequest cancelPurchaseRequest = buildBodyParams();
            return windowsPurchaseCancelAsync(cancelPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return WindowsPurchaseCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public WindowsPurchaseCancelRequestBuilder windowsPurchaseCancel(Integer txid) throws IllegalArgumentException {
        if (txid == null) throw new IllegalArgumentException("\"txid\" is required but got null");
        return new WindowsPurchaseCancelRequestBuilder(txid);
    }
    private okhttp3.Call windowsPurchaseTrackCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPurchaseRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/windows/purchase/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call windowsPurchaseTrackValidateBeforeCall(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback _callback) throws ApiException {
        return windowsPurchaseTrackCall(trackPurchaseRequest, _callback);

    }


    private ApiResponse<PaymentResultResponse> windowsPurchaseTrackWithHttpInfo(TrackPurchaseRequest trackPurchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = windowsPurchaseTrackValidateBeforeCall(trackPurchaseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call windowsPurchaseTrackAsync(TrackPurchaseRequest trackPurchaseRequest, final ApiCallback<PaymentResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = windowsPurchaseTrackValidateBeforeCall(trackPurchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WindowsPurchaseTrackRequestBuilder {
        private final Double priceInLocalCurrency;
        private String skuName;
        private String skuProductId;
        private String store;
        private List<ItemCreateRequest> obtainItems;
        private List<CurrencyChange> obtainCurrency;
        private String purchaseId;
        private String isoCurrencySymbol;

        private WindowsPurchaseTrackRequestBuilder(double priceInLocalCurrency) {
            this.priceInLocalCurrency = priceInLocalCurrency;
        }

        /**
         * Set skuName
         * @param skuName  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }
        
        /**
         * Set skuProductId
         * @param skuProductId  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder skuProductId(String skuProductId) {
            this.skuProductId = skuProductId;
            return this;
        }
        
        /**
         * Set store
         * @param store  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder store(String store) {
            this.store = store;
            return this;
        }
        
        /**
         * Set obtainItems
         * @param obtainItems  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder obtainItems(List<ItemCreateRequest> obtainItems) {
            this.obtainItems = obtainItems;
            return this;
        }
        
        /**
         * Set obtainCurrency
         * @param obtainCurrency  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder obtainCurrency(List<CurrencyChange> obtainCurrency) {
            this.obtainCurrency = obtainCurrency;
            return this;
        }
        
        /**
         * Set purchaseId
         * @param purchaseId  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder purchaseId(String purchaseId) {
            this.purchaseId = purchaseId;
            return this;
        }
        
        /**
         * Set isoCurrencySymbol
         * @param isoCurrencySymbol  (optional)
         * @return WindowsPurchaseTrackRequestBuilder
         */
        public WindowsPurchaseTrackRequestBuilder isoCurrencySymbol(String isoCurrencySymbol) {
            this.isoCurrencySymbol = isoCurrencySymbol;
            return this;
        }
        
        /**
         * Build call for windowsPurchaseTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return windowsPurchaseTrackCall(trackPurchaseRequest, _callback);
        }

        private TrackPurchaseRequest buildBodyParams() {
            TrackPurchaseRequest trackPurchaseRequest = new TrackPurchaseRequest();
            trackPurchaseRequest.priceInLocalCurrency(this.priceInLocalCurrency);
            trackPurchaseRequest.skuName(this.skuName);
            trackPurchaseRequest.skuProductId(this.skuProductId);
            trackPurchaseRequest.store(this.store);
            trackPurchaseRequest.obtainItems(this.obtainItems);
            trackPurchaseRequest.obtainCurrency(this.obtainCurrency);
            trackPurchaseRequest.purchaseId(this.purchaseId);
            trackPurchaseRequest.isoCurrencySymbol(this.isoCurrencySymbol);
            return trackPurchaseRequest;
        }

        /**
         * Execute windowsPurchaseTrack request
         * @return PaymentResultResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResultResponse execute() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            ApiResponse<PaymentResultResponse> localVarResp = windowsPurchaseTrackWithHttpInfo(trackPurchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute windowsPurchaseTrack request with HTTP info returned
         * @return ApiResponse&lt;PaymentResultResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResultResponse> executeWithHttpInfo() throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return windowsPurchaseTrackWithHttpInfo(trackPurchaseRequest);
        }

        /**
         * Execute windowsPurchaseTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResultResponse> _callback) throws ApiException {
            TrackPurchaseRequest trackPurchaseRequest = buildBodyParams();
            return windowsPurchaseTrackAsync(trackPurchaseRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return WindowsPurchaseTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public WindowsPurchaseTrackRequestBuilder windowsPurchaseTrack(double priceInLocalCurrency) throws IllegalArgumentException {
        
        return new WindowsPurchaseTrackRequestBuilder(priceInLocalCurrency);
    }
}
