/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.EventClaimRequest;
import com.konfigthis.client.model.EventClaimResponse;
import com.konfigthis.client.model.EventObjectData;
import com.konfigthis.client.model.EventPhaseEndRequest;
import com.konfigthis.client.model.EventPlayerView;
import com.konfigthis.client.model.EventScoreRequest;
import com.konfigthis.client.model.EventsInDateRangeResponse;
import com.konfigthis.client.model.PingRsp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call claimObjectEventPlayersCall(String objectId, EventClaimRequest eventClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventClaimRequest;

        // create path and map variables
        String localVarPath = "/object/event-players/{objectId}/claim"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimObjectEventPlayersValidateBeforeCall(String objectId, EventClaimRequest eventClaimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling claimObjectEventPlayers(Async)");
        }

        return claimObjectEventPlayersCall(objectId, eventClaimRequest, _callback);

    }


    private ApiResponse<EventClaimResponse> claimObjectEventPlayersWithHttpInfo(String objectId, EventClaimRequest eventClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = claimObjectEventPlayersValidateBeforeCall(objectId, eventClaimRequest, null);
        Type localVarReturnType = new TypeToken<EventClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call claimObjectEventPlayersAsync(String objectId, EventClaimRequest eventClaimRequest, final ApiCallback<EventClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimObjectEventPlayersValidateBeforeCall(objectId, eventClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<EventClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClaimObjectEventPlayersRequestBuilder {
        private final String objectId;
        private String eventId;

        private ClaimObjectEventPlayersRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set eventId
         * @param eventId  (optional)
         * @return ClaimObjectEventPlayersRequestBuilder
         */
        public ClaimObjectEventPlayersRequestBuilder eventId(String eventId) {
            this.eventId = eventId;
            return this;
        }
        
        /**
         * Build call for claimObjectEventPlayers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventClaimRequest eventClaimRequest = buildBodyParams();
            return claimObjectEventPlayersCall(objectId, eventClaimRequest, _callback);
        }

        private EventClaimRequest buildBodyParams() {
            EventClaimRequest eventClaimRequest = new EventClaimRequest();
            eventClaimRequest.eventId(this.eventId);
            return eventClaimRequest;
        }

        /**
         * Execute claimObjectEventPlayers request
         * @return EventClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EventClaimResponse execute() throws ApiException {
            EventClaimRequest eventClaimRequest = buildBodyParams();
            ApiResponse<EventClaimResponse> localVarResp = claimObjectEventPlayersWithHttpInfo(objectId, eventClaimRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute claimObjectEventPlayers request with HTTP info returned
         * @return ApiResponse&lt;EventClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventClaimResponse> executeWithHttpInfo() throws ApiException {
            EventClaimRequest eventClaimRequest = buildBodyParams();
            return claimObjectEventPlayersWithHttpInfo(objectId, eventClaimRequest);
        }

        /**
         * Execute claimObjectEventPlayers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventClaimResponse> _callback) throws ApiException {
            EventClaimRequest eventClaimRequest = buildBodyParams();
            return claimObjectEventPlayersAsync(objectId, eventClaimRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return ClaimObjectEventPlayersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ClaimObjectEventPlayersRequestBuilder claimObjectEventPlayers(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new ClaimObjectEventPlayersRequestBuilder(objectId);
    }
    private okhttp3.Call getCalendarEventsCall(String from, String to, String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/events/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarEventsValidateBeforeCall(String from, String to, String query, Integer limit, final ApiCallback _callback) throws ApiException {
        return getCalendarEventsCall(from, to, query, limit, _callback);

    }


    private ApiResponse<EventsInDateRangeResponse> getCalendarEventsWithHttpInfo(String from, String to, String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCalendarEventsValidateBeforeCall(from, to, query, limit, null);
        Type localVarReturnType = new TypeToken<EventsInDateRangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalendarEventsAsync(String from, String to, String query, Integer limit, final ApiCallback<EventsInDateRangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarEventsValidateBeforeCall(from, to, query, limit, _callback);
        Type localVarReturnType = new TypeToken<EventsInDateRangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCalendarEventsRequestBuilder {
        private String from;
        private String to;
        private String query;
        private Integer limit;

        private GetCalendarEventsRequestBuilder() {
        }

        /**
         * Set from
         * @param from  (optional)
         * @return GetCalendarEventsRequestBuilder
         */
        public GetCalendarEventsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return GetCalendarEventsRequestBuilder
         */
        public GetCalendarEventsRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set query
         * @param query  (optional)
         * @return GetCalendarEventsRequestBuilder
         */
        public GetCalendarEventsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetCalendarEventsRequestBuilder
         */
        public GetCalendarEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getCalendarEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalendarEventsCall(from, to, query, limit, _callback);
        }


        /**
         * Execute getCalendarEvents request
         * @return EventsInDateRangeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EventsInDateRangeResponse execute() throws ApiException {
            ApiResponse<EventsInDateRangeResponse> localVarResp = getCalendarEventsWithHttpInfo(from, to, query, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCalendarEvents request with HTTP info returned
         * @return ApiResponse&lt;EventsInDateRangeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventsInDateRangeResponse> executeWithHttpInfo() throws ApiException {
            return getCalendarEventsWithHttpInfo(from, to, query, limit);
        }

        /**
         * Execute getCalendarEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventsInDateRangeResponse> _callback) throws ApiException {
            return getCalendarEventsAsync(from, to, query, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetCalendarEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCalendarEventsRequestBuilder getCalendarEvents() throws IllegalArgumentException {
        return new GetCalendarEventsRequestBuilder();
    }
    private okhttp3.Call getObjectEventsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectEventsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectEvents(Async)");
        }

        return getObjectEventsCall(objectId, _callback);

    }


    private ApiResponse<EventObjectData> getObjectEventsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectEventsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EventObjectData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectEventsAsync(String objectId, final ApiCallback<EventObjectData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectEventsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EventObjectData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectEventsRequestBuilder {
        private final String objectId;

        private GetObjectEventsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectEventsCall(objectId, _callback);
        }


        /**
         * Execute getObjectEvents request
         * @return EventObjectData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EventObjectData execute() throws ApiException {
            ApiResponse<EventObjectData> localVarResp = getObjectEventsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectEvents request with HTTP info returned
         * @return ApiResponse&lt;EventObjectData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventObjectData> executeWithHttpInfo() throws ApiException {
            return getObjectEventsWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventObjectData> _callback) throws ApiException {
            return getObjectEventsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectEventsRequestBuilder getObjectEvents(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectEventsRequestBuilder(objectId);
    }
    private okhttp3.Call getPlayersDataCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/event-players/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayersDataValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getPlayersData(Async)");
        }

        return getPlayersDataCall(objectId, _callback);

    }


    private ApiResponse<EventPlayerView> getPlayersDataWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getPlayersDataValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EventPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlayersDataAsync(String objectId, final ApiCallback<EventPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayersDataValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EventPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlayersDataRequestBuilder {
        private final String objectId;

        private GetPlayersDataRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getPlayersData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlayersDataCall(objectId, _callback);
        }


        /**
         * Execute getPlayersData request
         * @return EventPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EventPlayerView execute() throws ApiException {
            ApiResponse<EventPlayerView> localVarResp = getPlayersDataWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlayersData request with HTTP info returned
         * @return ApiResponse&lt;EventPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventPlayerView> executeWithHttpInfo() throws ApiException {
            return getPlayersDataWithHttpInfo(objectId);
        }

        /**
         * Execute getPlayersData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventPlayerView> _callback) throws ApiException {
            return getPlayersDataAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetPlayersDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPlayersDataRequestBuilder getPlayersData(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetPlayersDataRequestBuilder(objectId);
    }
    private okhttp3.Call pingObjectEventsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}/ping"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingObjectEventsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling pingObjectEvents(Async)");
        }

        return pingObjectEventsCall(objectId, _callback);

    }


    private ApiResponse<PingRsp> pingObjectEventsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = pingObjectEventsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<PingRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pingObjectEventsAsync(String objectId, final ApiCallback<PingRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingObjectEventsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<PingRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PingObjectEventsRequestBuilder {
        private final String objectId;

        private PingObjectEventsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for pingObjectEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pingObjectEventsCall(objectId, _callback);
        }


        /**
         * Execute pingObjectEvents request
         * @return PingRsp
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PingRsp execute() throws ApiException {
            ApiResponse<PingRsp> localVarResp = pingObjectEventsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pingObjectEvents request with HTTP info returned
         * @return ApiResponse&lt;PingRsp&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PingRsp> executeWithHttpInfo() throws ApiException {
            return pingObjectEventsWithHttpInfo(objectId);
        }

        /**
         * Execute pingObjectEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PingRsp> _callback) throws ApiException {
            return pingObjectEventsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return PingObjectEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PingObjectEventsRequestBuilder pingObjectEvents(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new PingObjectEventsRequestBuilder(objectId);
    }
    private okhttp3.Call refreshObjectEventsCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}/refresh"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshObjectEventsValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling refreshObjectEvents(Async)");
        }

        return refreshObjectEventsCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> refreshObjectEventsWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = refreshObjectEventsValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshObjectEventsAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshObjectEventsValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshObjectEventsRequestBuilder {
        private final String objectId;

        private RefreshObjectEventsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for refreshObjectEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshObjectEventsCall(objectId, _callback);
        }


        /**
         * Execute refreshObjectEvents request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = refreshObjectEventsWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshObjectEvents request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return refreshObjectEventsWithHttpInfo(objectId);
        }

        /**
         * Execute refreshObjectEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return refreshObjectEventsAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RefreshObjectEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RefreshObjectEventsRequestBuilder refreshObjectEvents(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RefreshObjectEventsRequestBuilder(objectId);
    }
    private okhttp3.Call updateObjectEndPhaseCall(String objectId, EventPhaseEndRequest eventPhaseEndRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventPhaseEndRequest;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}/endPhase"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectEndPhaseValidateBeforeCall(String objectId, EventPhaseEndRequest eventPhaseEndRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectEndPhase(Async)");
        }

        return updateObjectEndPhaseCall(objectId, eventPhaseEndRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateObjectEndPhaseWithHttpInfo(String objectId, EventPhaseEndRequest eventPhaseEndRequest) throws ApiException {
        okhttp3.Call localVarCall = updateObjectEndPhaseValidateBeforeCall(objectId, eventPhaseEndRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectEndPhaseAsync(String objectId, EventPhaseEndRequest eventPhaseEndRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectEndPhaseValidateBeforeCall(objectId, eventPhaseEndRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectEndPhaseRequestBuilder {
        private final String objectId;
        private String time;

        private UpdateObjectEndPhaseRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set time
         * @param time  (optional)
         * @return UpdateObjectEndPhaseRequestBuilder
         */
        public UpdateObjectEndPhaseRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for updateObjectEndPhase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventPhaseEndRequest eventPhaseEndRequest = buildBodyParams();
            return updateObjectEndPhaseCall(objectId, eventPhaseEndRequest, _callback);
        }

        private EventPhaseEndRequest buildBodyParams() {
            EventPhaseEndRequest eventPhaseEndRequest = new EventPhaseEndRequest();
            eventPhaseEndRequest.time(this.time);
            return eventPhaseEndRequest;
        }

        /**
         * Execute updateObjectEndPhase request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            EventPhaseEndRequest eventPhaseEndRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateObjectEndPhaseWithHttpInfo(objectId, eventPhaseEndRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObjectEndPhase request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            EventPhaseEndRequest eventPhaseEndRequest = buildBodyParams();
            return updateObjectEndPhaseWithHttpInfo(objectId, eventPhaseEndRequest);
        }

        /**
         * Execute updateObjectEndPhase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            EventPhaseEndRequest eventPhaseEndRequest = buildBodyParams();
            return updateObjectEndPhaseAsync(objectId, eventPhaseEndRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateObjectEndPhaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectEndPhaseRequestBuilder updateObjectEndPhase(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateObjectEndPhaseRequestBuilder(objectId);
    }
    private okhttp3.Call updatePlayerScoreCall(String objectId, EventScoreRequest eventScoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventScoreRequest;

        // create path and map variables
        String localVarPath = "/object/event-players/{objectId}/score"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlayerScoreValidateBeforeCall(String objectId, EventScoreRequest eventScoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updatePlayerScore(Async)");
        }

        return updatePlayerScoreCall(objectId, eventScoreRequest, _callback);

    }


    private ApiResponse<CommonResponse> updatePlayerScoreWithHttpInfo(String objectId, EventScoreRequest eventScoreRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlayerScoreValidateBeforeCall(objectId, eventScoreRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlayerScoreAsync(String objectId, EventScoreRequest eventScoreRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlayerScoreValidateBeforeCall(objectId, eventScoreRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlayerScoreRequestBuilder {
        private final Double score;
        private final String objectId;
        private String eventId;
        private Boolean increment;
        private Map<String, Object> stats;

        private UpdatePlayerScoreRequestBuilder(double score, String objectId) {
            this.score = score;
            this.objectId = objectId;
        }

        /**
         * Set eventId
         * @param eventId  (optional)
         * @return UpdatePlayerScoreRequestBuilder
         */
        public UpdatePlayerScoreRequestBuilder eventId(String eventId) {
            this.eventId = eventId;
            return this;
        }
        
        /**
         * Set increment
         * @param increment  (optional)
         * @return UpdatePlayerScoreRequestBuilder
         */
        public UpdatePlayerScoreRequestBuilder increment(Boolean increment) {
            this.increment = increment;
            return this;
        }
        
        /**
         * Set stats
         * @param stats  (optional)
         * @return UpdatePlayerScoreRequestBuilder
         */
        public UpdatePlayerScoreRequestBuilder stats(Map<String, Object> stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Build call for updatePlayerScore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventScoreRequest eventScoreRequest = buildBodyParams();
            return updatePlayerScoreCall(objectId, eventScoreRequest, _callback);
        }

        private EventScoreRequest buildBodyParams() {
            EventScoreRequest eventScoreRequest = new EventScoreRequest();
            eventScoreRequest.eventId(this.eventId);
            eventScoreRequest.score(this.score);
            eventScoreRequest.increment(this.increment);
            eventScoreRequest.stats(this.stats);
            return eventScoreRequest;
        }

        /**
         * Execute updatePlayerScore request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            EventScoreRequest eventScoreRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updatePlayerScoreWithHttpInfo(objectId, eventScoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlayerScore request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            EventScoreRequest eventScoreRequest = buildBodyParams();
            return updatePlayerScoreWithHttpInfo(objectId, eventScoreRequest);
        }

        /**
         * Execute updatePlayerScore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            EventScoreRequest eventScoreRequest = buildBodyParams();
            return updatePlayerScoreAsync(objectId, eventScoreRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdatePlayerScoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlayerScoreRequestBuilder updatePlayerScore(double score, String objectId) throws IllegalArgumentException {
        
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdatePlayerScoreRequestBuilder(score, objectId);
    }
}
