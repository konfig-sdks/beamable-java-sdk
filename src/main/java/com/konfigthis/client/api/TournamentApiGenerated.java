/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminGetPlayerStatusResponse;
import com.konfigthis.client.model.AdminPlayerStatus;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.GetChampionsResponse;
import com.konfigthis.client.model.GetPlayerStatusResponse;
import com.konfigthis.client.model.GetStandingsResponse;
import com.konfigthis.client.model.JoinRequest;
import com.konfigthis.client.model.PlayerStatus;
import com.konfigthis.client.model.PlayerStatusUpdate;
import com.konfigthis.client.model.RewardsRequest;
import com.konfigthis.client.model.RewardsResponse;
import com.konfigthis.client.model.ScoreRequest;
import com.konfigthis.client.model.TournamentClientView;
import com.konfigthis.client.model.TournamentQueryResponse;
import com.konfigthis.client.model.UpdatePlayerStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TournamentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TournamentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TournamentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call adminPlayerDataGetCall(Integer playerId, String tournamentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/admin/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminPlayerDataGetValidateBeforeCall(Integer playerId, String tournamentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling adminPlayerDataGet(Async)");
        }

        return adminPlayerDataGetCall(playerId, tournamentId, _callback);

    }


    private ApiResponse<AdminGetPlayerStatusResponse> adminPlayerDataGetWithHttpInfo(Integer playerId, String tournamentId) throws ApiException {
        okhttp3.Call localVarCall = adminPlayerDataGetValidateBeforeCall(playerId, tournamentId, null);
        Type localVarReturnType = new TypeToken<AdminGetPlayerStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call adminPlayerDataGetAsync(Integer playerId, String tournamentId, final ApiCallback<AdminGetPlayerStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminPlayerDataGetValidateBeforeCall(playerId, tournamentId, _callback);
        Type localVarReturnType = new TypeToken<AdminGetPlayerStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AdminPlayerDataGetRequestBuilder {
        private final Integer playerId;
        private String tournamentId;

        private AdminPlayerDataGetRequestBuilder(Integer playerId) {
            this.playerId = playerId;
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return AdminPlayerDataGetRequestBuilder
         */
        public AdminPlayerDataGetRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for adminPlayerDataGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return adminPlayerDataGetCall(playerId, tournamentId, _callback);
        }


        /**
         * Execute adminPlayerDataGet request
         * @return AdminGetPlayerStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AdminGetPlayerStatusResponse execute() throws ApiException {
            ApiResponse<AdminGetPlayerStatusResponse> localVarResp = adminPlayerDataGetWithHttpInfo(playerId, tournamentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute adminPlayerDataGet request with HTTP info returned
         * @return ApiResponse&lt;AdminGetPlayerStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminGetPlayerStatusResponse> executeWithHttpInfo() throws ApiException {
            return adminPlayerDataGetWithHttpInfo(playerId, tournamentId);
        }

        /**
         * Execute adminPlayerDataGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminGetPlayerStatusResponse> _callback) throws ApiException {
            return adminPlayerDataGetAsync(playerId, tournamentId, _callback);
        }
    }

    /**
     * 
     * 
     * @param playerId  (required)
     * @return AdminPlayerDataGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AdminPlayerDataGetRequestBuilder adminPlayerDataGet(Integer playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        return new AdminPlayerDataGetRequestBuilder(playerId);
    }
    private okhttp3.Call createNewTournamentCall(JoinRequest joinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = joinRequest;

        // create path and map variables
        String localVarPath = "/basic/tournaments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTournamentValidateBeforeCall(JoinRequest joinRequest, final ApiCallback _callback) throws ApiException {
        return createNewTournamentCall(joinRequest, _callback);

    }


    private ApiResponse<PlayerStatus> createNewTournamentWithHttpInfo(JoinRequest joinRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTournamentValidateBeforeCall(joinRequest, null);
        Type localVarReturnType = new TypeToken<PlayerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTournamentAsync(JoinRequest joinRequest, final ApiCallback<PlayerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTournamentValidateBeforeCall(joinRequest, _callback);
        Type localVarReturnType = new TypeToken<PlayerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTournamentRequestBuilder {
        private String tournamentId;

        private CreateNewTournamentRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return CreateNewTournamentRequestBuilder
         */
        public CreateNewTournamentRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for createNewTournament
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JoinRequest joinRequest = buildBodyParams();
            return createNewTournamentCall(joinRequest, _callback);
        }

        private JoinRequest buildBodyParams() {
            JoinRequest joinRequest = new JoinRequest();
            joinRequest.tournamentId(this.tournamentId);
            return joinRequest;
        }

        /**
         * Execute createNewTournament request
         * @return PlayerStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PlayerStatus execute() throws ApiException {
            JoinRequest joinRequest = buildBodyParams();
            ApiResponse<PlayerStatus> localVarResp = createNewTournamentWithHttpInfo(joinRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTournament request with HTTP info returned
         * @return ApiResponse&lt;PlayerStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerStatus> executeWithHttpInfo() throws ApiException {
            JoinRequest joinRequest = buildBodyParams();
            return createNewTournamentWithHttpInfo(joinRequest);
        }

        /**
         * Execute createNewTournament request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerStatus> _callback) throws ApiException {
            JoinRequest joinRequest = buildBodyParams();
            return createNewTournamentAsync(joinRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewTournamentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTournamentRequestBuilder createNewTournament() throws IllegalArgumentException {
        return new CreateNewTournamentRequestBuilder();
    }
    private okhttp3.Call createRewardCall(RewardsRequest rewardsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rewardsRequest;

        // create path and map variables
        String localVarPath = "/basic/tournaments/rewards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRewardValidateBeforeCall(RewardsRequest rewardsRequest, final ApiCallback _callback) throws ApiException {
        return createRewardCall(rewardsRequest, _callback);

    }


    private ApiResponse<RewardsResponse> createRewardWithHttpInfo(RewardsRequest rewardsRequest) throws ApiException {
        okhttp3.Call localVarCall = createRewardValidateBeforeCall(rewardsRequest, null);
        Type localVarReturnType = new TypeToken<RewardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRewardAsync(RewardsRequest rewardsRequest, final ApiCallback<RewardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRewardValidateBeforeCall(rewardsRequest, _callback);
        Type localVarReturnType = new TypeToken<RewardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRewardRequestBuilder {
        private String tournamentId;

        private CreateRewardRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return CreateRewardRequestBuilder
         */
        public CreateRewardRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for createReward
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RewardsRequest rewardsRequest = buildBodyParams();
            return createRewardCall(rewardsRequest, _callback);
        }

        private RewardsRequest buildBodyParams() {
            RewardsRequest rewardsRequest = new RewardsRequest();
            rewardsRequest.tournamentId(this.tournamentId);
            return rewardsRequest;
        }

        /**
         * Execute createReward request
         * @return RewardsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public RewardsResponse execute() throws ApiException {
            RewardsRequest rewardsRequest = buildBodyParams();
            ApiResponse<RewardsResponse> localVarResp = createRewardWithHttpInfo(rewardsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReward request with HTTP info returned
         * @return ApiResponse&lt;RewardsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsResponse> executeWithHttpInfo() throws ApiException {
            RewardsRequest rewardsRequest = buildBodyParams();
            return createRewardWithHttpInfo(rewardsRequest);
        }

        /**
         * Execute createReward request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsResponse> _callback) throws ApiException {
            RewardsRequest rewardsRequest = buildBodyParams();
            return createRewardAsync(rewardsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateRewardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateRewardRequestBuilder createReward() throws IllegalArgumentException {
        return new CreateRewardRequestBuilder();
    }
    private okhttp3.Call getChampionsCall(Integer cycles, String tournamentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/champions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        if (cycles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycles", cycles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChampionsValidateBeforeCall(Integer cycles, String tournamentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cycles' is set
        if (cycles == null) {
            throw new ApiException("Missing the required parameter 'cycles' when calling getChampions(Async)");
        }

        return getChampionsCall(cycles, tournamentId, _callback);

    }


    private ApiResponse<GetChampionsResponse> getChampionsWithHttpInfo(Integer cycles, String tournamentId) throws ApiException {
        okhttp3.Call localVarCall = getChampionsValidateBeforeCall(cycles, tournamentId, null);
        Type localVarReturnType = new TypeToken<GetChampionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChampionsAsync(Integer cycles, String tournamentId, final ApiCallback<GetChampionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChampionsValidateBeforeCall(cycles, tournamentId, _callback);
        Type localVarReturnType = new TypeToken<GetChampionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChampionsRequestBuilder {
        private final Integer cycles;
        private String tournamentId;

        private GetChampionsRequestBuilder(Integer cycles) {
            this.cycles = cycles;
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return GetChampionsRequestBuilder
         */
        public GetChampionsRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for getChampions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChampionsCall(cycles, tournamentId, _callback);
        }


        /**
         * Execute getChampions request
         * @return GetChampionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetChampionsResponse execute() throws ApiException {
            ApiResponse<GetChampionsResponse> localVarResp = getChampionsWithHttpInfo(cycles, tournamentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChampions request with HTTP info returned
         * @return ApiResponse&lt;GetChampionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetChampionsResponse> executeWithHttpInfo() throws ApiException {
            return getChampionsWithHttpInfo(cycles, tournamentId);
        }

        /**
         * Execute getChampions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetChampionsResponse> _callback) throws ApiException {
            return getChampionsAsync(cycles, tournamentId, _callback);
        }
    }

    /**
     * 
     * 
     * @param cycles  (required)
     * @return GetChampionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetChampionsRequestBuilder getChampions(Integer cycles) throws IllegalArgumentException {
        if (cycles == null) throw new IllegalArgumentException("\"cycles\" is required but got null");
        return new GetChampionsRequestBuilder(cycles);
    }
    private okhttp3.Call getGlobalTournamentsCall(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (focus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focus", focus));
        }

        if (cycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycle", cycle));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalTournamentsValidateBeforeCall(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback _callback) throws ApiException {
        return getGlobalTournamentsCall(tournamentId, max, focus, cycle, from, _callback);

    }


    private ApiResponse<GetStandingsResponse> getGlobalTournamentsWithHttpInfo(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from) throws ApiException {
        okhttp3.Call localVarCall = getGlobalTournamentsValidateBeforeCall(tournamentId, max, focus, cycle, from, null);
        Type localVarReturnType = new TypeToken<GetStandingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGlobalTournamentsAsync(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback<GetStandingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalTournamentsValidateBeforeCall(tournamentId, max, focus, cycle, from, _callback);
        Type localVarReturnType = new TypeToken<GetStandingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGlobalTournamentsRequestBuilder {
        private String tournamentId;
        private Integer max;
        private Integer focus;
        private Integer cycle;
        private Integer from;

        private GetGlobalTournamentsRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return GetGlobalTournamentsRequestBuilder
         */
        public GetGlobalTournamentsRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Set max
         * @param max  (optional)
         * @return GetGlobalTournamentsRequestBuilder
         */
        public GetGlobalTournamentsRequestBuilder max(Integer max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set focus
         * @param focus  (optional)
         * @return GetGlobalTournamentsRequestBuilder
         */
        public GetGlobalTournamentsRequestBuilder focus(Integer focus) {
            this.focus = focus;
            return this;
        }
        
        /**
         * Set cycle
         * @param cycle  (optional)
         * @return GetGlobalTournamentsRequestBuilder
         */
        public GetGlobalTournamentsRequestBuilder cycle(Integer cycle) {
            this.cycle = cycle;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return GetGlobalTournamentsRequestBuilder
         */
        public GetGlobalTournamentsRequestBuilder from(Integer from) {
            this.from = from;
            return this;
        }
        
        /**
         * Build call for getGlobalTournaments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGlobalTournamentsCall(tournamentId, max, focus, cycle, from, _callback);
        }


        /**
         * Execute getGlobalTournaments request
         * @return GetStandingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetStandingsResponse execute() throws ApiException {
            ApiResponse<GetStandingsResponse> localVarResp = getGlobalTournamentsWithHttpInfo(tournamentId, max, focus, cycle, from);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGlobalTournaments request with HTTP info returned
         * @return ApiResponse&lt;GetStandingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetStandingsResponse> executeWithHttpInfo() throws ApiException {
            return getGlobalTournamentsWithHttpInfo(tournamentId, max, focus, cycle, from);
        }

        /**
         * Execute getGlobalTournaments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetStandingsResponse> _callback) throws ApiException {
            return getGlobalTournamentsAsync(tournamentId, max, focus, cycle, from, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetGlobalTournamentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetGlobalTournamentsRequestBuilder getGlobalTournaments() throws IllegalArgumentException {
        return new GetGlobalTournamentsRequestBuilder();
    }
    private okhttp3.Call getMyTournamentCall(String tournamentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyTournamentValidateBeforeCall(String tournamentId, final ApiCallback _callback) throws ApiException {
        return getMyTournamentCall(tournamentId, _callback);

    }


    private ApiResponse<GetPlayerStatusResponse> getMyTournamentWithHttpInfo(String tournamentId) throws ApiException {
        okhttp3.Call localVarCall = getMyTournamentValidateBeforeCall(tournamentId, null);
        Type localVarReturnType = new TypeToken<GetPlayerStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMyTournamentAsync(String tournamentId, final ApiCallback<GetPlayerStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyTournamentValidateBeforeCall(tournamentId, _callback);
        Type localVarReturnType = new TypeToken<GetPlayerStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMyTournamentRequestBuilder {
        private String tournamentId;

        private GetMyTournamentRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return GetMyTournamentRequestBuilder
         */
        public GetMyTournamentRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for getMyTournament
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMyTournamentCall(tournamentId, _callback);
        }


        /**
         * Execute getMyTournament request
         * @return GetPlayerStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetPlayerStatusResponse execute() throws ApiException {
            ApiResponse<GetPlayerStatusResponse> localVarResp = getMyTournamentWithHttpInfo(tournamentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMyTournament request with HTTP info returned
         * @return ApiResponse&lt;GetPlayerStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPlayerStatusResponse> executeWithHttpInfo() throws ApiException {
            return getMyTournamentWithHttpInfo(tournamentId);
        }

        /**
         * Execute getMyTournament request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPlayerStatusResponse> _callback) throws ApiException {
            return getMyTournamentAsync(tournamentId, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetMyTournamentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMyTournamentRequestBuilder getMyTournament() throws IllegalArgumentException {
        return new GetMyTournamentRequestBuilder();
    }
    private okhttp3.Call getRewardsCall(String tournamentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/rewards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardsValidateBeforeCall(String tournamentId, final ApiCallback _callback) throws ApiException {
        return getRewardsCall(tournamentId, _callback);

    }


    private ApiResponse<RewardsResponse> getRewardsWithHttpInfo(String tournamentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardsValidateBeforeCall(tournamentId, null);
        Type localVarReturnType = new TypeToken<RewardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRewardsAsync(String tournamentId, final ApiCallback<RewardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardsValidateBeforeCall(tournamentId, _callback);
        Type localVarReturnType = new TypeToken<RewardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRewardsRequestBuilder {
        private String tournamentId;

        private GetRewardsRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return GetRewardsRequestBuilder
         */
        public GetRewardsRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Build call for getRewards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRewardsCall(tournamentId, _callback);
        }


        /**
         * Execute getRewards request
         * @return RewardsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public RewardsResponse execute() throws ApiException {
            ApiResponse<RewardsResponse> localVarResp = getRewardsWithHttpInfo(tournamentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRewards request with HTTP info returned
         * @return ApiResponse&lt;RewardsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsResponse> executeWithHttpInfo() throws ApiException {
            return getRewardsWithHttpInfo(tournamentId);
        }

        /**
         * Execute getRewards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsResponse> _callback) throws ApiException {
            return getRewardsAsync(tournamentId, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetRewardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetRewardsRequestBuilder getRewards() throws IllegalArgumentException {
        return new GetRewardsRequestBuilder();
    }
    private okhttp3.Call getStandingsCall(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments/standings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (focus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focus", focus));
        }

        if (cycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycle", cycle));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStandingsValidateBeforeCall(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback _callback) throws ApiException {
        return getStandingsCall(tournamentId, max, focus, cycle, from, _callback);

    }


    private ApiResponse<GetStandingsResponse> getStandingsWithHttpInfo(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from) throws ApiException {
        okhttp3.Call localVarCall = getStandingsValidateBeforeCall(tournamentId, max, focus, cycle, from, null);
        Type localVarReturnType = new TypeToken<GetStandingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStandingsAsync(String tournamentId, Integer max, Integer focus, Integer cycle, Integer from, final ApiCallback<GetStandingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStandingsValidateBeforeCall(tournamentId, max, focus, cycle, from, _callback);
        Type localVarReturnType = new TypeToken<GetStandingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStandingsRequestBuilder {
        private String tournamentId;
        private Integer max;
        private Integer focus;
        private Integer cycle;
        private Integer from;

        private GetStandingsRequestBuilder() {
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return GetStandingsRequestBuilder
         */
        public GetStandingsRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Set max
         * @param max  (optional)
         * @return GetStandingsRequestBuilder
         */
        public GetStandingsRequestBuilder max(Integer max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set focus
         * @param focus  (optional)
         * @return GetStandingsRequestBuilder
         */
        public GetStandingsRequestBuilder focus(Integer focus) {
            this.focus = focus;
            return this;
        }
        
        /**
         * Set cycle
         * @param cycle  (optional)
         * @return GetStandingsRequestBuilder
         */
        public GetStandingsRequestBuilder cycle(Integer cycle) {
            this.cycle = cycle;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return GetStandingsRequestBuilder
         */
        public GetStandingsRequestBuilder from(Integer from) {
            this.from = from;
            return this;
        }
        
        /**
         * Build call for getStandings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStandingsCall(tournamentId, max, focus, cycle, from, _callback);
        }


        /**
         * Execute getStandings request
         * @return GetStandingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetStandingsResponse execute() throws ApiException {
            ApiResponse<GetStandingsResponse> localVarResp = getStandingsWithHttpInfo(tournamentId, max, focus, cycle, from);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStandings request with HTTP info returned
         * @return ApiResponse&lt;GetStandingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetStandingsResponse> executeWithHttpInfo() throws ApiException {
            return getStandingsWithHttpInfo(tournamentId, max, focus, cycle, from);
        }

        /**
         * Execute getStandings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetStandingsResponse> _callback) throws ApiException {
            return getStandingsAsync(tournamentId, max, focus, cycle, from, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetStandingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetStandingsRequestBuilder getStandings() throws IllegalArgumentException {
        return new GetStandingsRequestBuilder();
    }
    private okhttp3.Call getTournamentObjectCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/tournaments/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTournamentObjectValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getTournamentObject(Async)");
        }

        return getTournamentObjectCall(objectId, _callback);

    }


    private ApiResponse<TournamentClientView> getTournamentObjectWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getTournamentObjectValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<TournamentClientView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTournamentObjectAsync(String objectId, final ApiCallback<TournamentClientView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTournamentObjectValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<TournamentClientView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTournamentObjectRequestBuilder {
        private final String objectId;

        private GetTournamentObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getTournamentObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTournamentObjectCall(objectId, _callback);
        }


        /**
         * Execute getTournamentObject request
         * @return TournamentClientView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TournamentClientView execute() throws ApiException {
            ApiResponse<TournamentClientView> localVarResp = getTournamentObjectWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTournamentObject request with HTTP info returned
         * @return ApiResponse&lt;TournamentClientView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TournamentClientView> executeWithHttpInfo() throws ApiException {
            return getTournamentObjectWithHttpInfo(objectId);
        }

        /**
         * Execute getTournamentObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TournamentClientView> _callback) throws ApiException {
            return getTournamentObjectAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetTournamentObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetTournamentObjectRequestBuilder getTournamentObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetTournamentObjectRequestBuilder(objectId);
    }
    private okhttp3.Call listTournamentsCall(Boolean isRunning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/tournaments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isRunning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isRunning", isRunning));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTournamentsValidateBeforeCall(Boolean isRunning, final ApiCallback _callback) throws ApiException {
        return listTournamentsCall(isRunning, _callback);

    }


    private ApiResponse<TournamentQueryResponse> listTournamentsWithHttpInfo(Boolean isRunning) throws ApiException {
        okhttp3.Call localVarCall = listTournamentsValidateBeforeCall(isRunning, null);
        Type localVarReturnType = new TypeToken<TournamentQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTournamentsAsync(Boolean isRunning, final ApiCallback<TournamentQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTournamentsValidateBeforeCall(isRunning, _callback);
        Type localVarReturnType = new TypeToken<TournamentQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTournamentsRequestBuilder {
        private Boolean isRunning;

        private ListTournamentsRequestBuilder() {
        }

        /**
         * Set isRunning
         * @param isRunning  (optional)
         * @return ListTournamentsRequestBuilder
         */
        public ListTournamentsRequestBuilder isRunning(Boolean isRunning) {
            this.isRunning = isRunning;
            return this;
        }
        
        /**
         * Build call for listTournaments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTournamentsCall(isRunning, _callback);
        }


        /**
         * Execute listTournaments request
         * @return TournamentQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public TournamentQueryResponse execute() throws ApiException {
            ApiResponse<TournamentQueryResponse> localVarResp = listTournamentsWithHttpInfo(isRunning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTournaments request with HTTP info returned
         * @return ApiResponse&lt;TournamentQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TournamentQueryResponse> executeWithHttpInfo() throws ApiException {
            return listTournamentsWithHttpInfo(isRunning);
        }

        /**
         * Execute listTournaments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TournamentQueryResponse> _callback) throws ApiException {
            return listTournamentsAsync(isRunning, _callback);
        }
    }

    /**
     * 
     * 
     * @return ListTournamentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListTournamentsRequestBuilder listTournaments() throws IllegalArgumentException {
        return new ListTournamentsRequestBuilder();
    }
    private okhttp3.Call submitScoreCall(ScoreRequest scoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scoreRequest;

        // create path and map variables
        String localVarPath = "/basic/tournaments/score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitScoreValidateBeforeCall(ScoreRequest scoreRequest, final ApiCallback _callback) throws ApiException {
        return submitScoreCall(scoreRequest, _callback);

    }


    private ApiResponse<EmptyResponse> submitScoreWithHttpInfo(ScoreRequest scoreRequest) throws ApiException {
        okhttp3.Call localVarCall = submitScoreValidateBeforeCall(scoreRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitScoreAsync(ScoreRequest scoreRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitScoreValidateBeforeCall(scoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitScoreRequestBuilder {
        private final Double score;
        private final Integer playerId;
        private String tournamentId;
        private Map<String, Object> stats;
        private Boolean increment;

        private SubmitScoreRequestBuilder(double score, Integer playerId) {
            this.score = score;
            this.playerId = playerId;
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return SubmitScoreRequestBuilder
         */
        public SubmitScoreRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Set stats
         * @param stats  (optional)
         * @return SubmitScoreRequestBuilder
         */
        public SubmitScoreRequestBuilder stats(Map<String, Object> stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Set increment
         * @param increment  (optional)
         * @return SubmitScoreRequestBuilder
         */
        public SubmitScoreRequestBuilder increment(Boolean increment) {
            this.increment = increment;
            return this;
        }
        
        /**
         * Build call for submitScore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScoreRequest scoreRequest = buildBodyParams();
            return submitScoreCall(scoreRequest, _callback);
        }

        private ScoreRequest buildBodyParams() {
            ScoreRequest scoreRequest = new ScoreRequest();
            scoreRequest.tournamentId(this.tournamentId);
            scoreRequest.stats(this.stats);
            scoreRequest.score(this.score);
            scoreRequest.playerId(this.playerId);
            scoreRequest.increment(this.increment);
            return scoreRequest;
        }

        /**
         * Execute submitScore request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ScoreRequest scoreRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = submitScoreWithHttpInfo(scoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitScore request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            ScoreRequest scoreRequest = buildBodyParams();
            return submitScoreWithHttpInfo(scoreRequest);
        }

        /**
         * Execute submitScore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            ScoreRequest scoreRequest = buildBodyParams();
            return submitScoreAsync(scoreRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SubmitScoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SubmitScoreRequestBuilder submitScore(double score, Integer playerId) throws IllegalArgumentException {
        
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        return new SubmitScoreRequestBuilder(score, playerId);
    }
    private okhttp3.Call updateAdminPlayerCall(UpdatePlayerStatusRequest updatePlayerStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePlayerStatusRequest;

        // create path and map variables
        String localVarPath = "/basic/tournaments/admin/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdminPlayerValidateBeforeCall(UpdatePlayerStatusRequest updatePlayerStatusRequest, final ApiCallback _callback) throws ApiException {
        return updateAdminPlayerCall(updatePlayerStatusRequest, _callback);

    }


    private ApiResponse<AdminPlayerStatus> updateAdminPlayerWithHttpInfo(UpdatePlayerStatusRequest updatePlayerStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAdminPlayerValidateBeforeCall(updatePlayerStatusRequest, null);
        Type localVarReturnType = new TypeToken<AdminPlayerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdminPlayerAsync(UpdatePlayerStatusRequest updatePlayerStatusRequest, final ApiCallback<AdminPlayerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdminPlayerValidateBeforeCall(updatePlayerStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminPlayerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdminPlayerRequestBuilder {
        private final Integer playerId;
        private String tournamentId;
        private PlayerStatusUpdate update;

        private UpdateAdminPlayerRequestBuilder(Integer playerId) {
            this.playerId = playerId;
        }

        /**
         * Set tournamentId
         * @param tournamentId  (optional)
         * @return UpdateAdminPlayerRequestBuilder
         */
        public UpdateAdminPlayerRequestBuilder tournamentId(String tournamentId) {
            this.tournamentId = tournamentId;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return UpdateAdminPlayerRequestBuilder
         */
        public UpdateAdminPlayerRequestBuilder update(PlayerStatusUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Build call for updateAdminPlayer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdatePlayerStatusRequest updatePlayerStatusRequest = buildBodyParams();
            return updateAdminPlayerCall(updatePlayerStatusRequest, _callback);
        }

        private UpdatePlayerStatusRequest buildBodyParams() {
            UpdatePlayerStatusRequest updatePlayerStatusRequest = new UpdatePlayerStatusRequest();
            updatePlayerStatusRequest.playerId(this.playerId);
            updatePlayerStatusRequest.tournamentId(this.tournamentId);
            updatePlayerStatusRequest.update(this.update);
            return updatePlayerStatusRequest;
        }

        /**
         * Execute updateAdminPlayer request
         * @return AdminPlayerStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AdminPlayerStatus execute() throws ApiException {
            UpdatePlayerStatusRequest updatePlayerStatusRequest = buildBodyParams();
            ApiResponse<AdminPlayerStatus> localVarResp = updateAdminPlayerWithHttpInfo(updatePlayerStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdminPlayer request with HTTP info returned
         * @return ApiResponse&lt;AdminPlayerStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminPlayerStatus> executeWithHttpInfo() throws ApiException {
            UpdatePlayerStatusRequest updatePlayerStatusRequest = buildBodyParams();
            return updateAdminPlayerWithHttpInfo(updatePlayerStatusRequest);
        }

        /**
         * Execute updateAdminPlayer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminPlayerStatus> _callback) throws ApiException {
            UpdatePlayerStatusRequest updatePlayerStatusRequest = buildBodyParams();
            return updateAdminPlayerAsync(updatePlayerStatusRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateAdminPlayerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdminPlayerRequestBuilder updateAdminPlayer(Integer playerId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        return new UpdateAdminPlayerRequestBuilder(playerId);
    }
}
