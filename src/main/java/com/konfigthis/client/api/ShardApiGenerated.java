/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MetadataUpdate;
import com.konfigthis.client.model.ShardDef;
import com.konfigthis.client.model.ShardDeleteRequest;
import com.konfigthis.client.model.ShardListResponse;
import com.konfigthis.client.model.ShardResponse;
import com.konfigthis.client.model.ShardUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteLegacyShardCall(ShardDeleteRequest shardDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shardDeleteRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLegacyShardValidateBeforeCall(ShardDeleteRequest shardDeleteRequest, final ApiCallback _callback) throws ApiException {
        return deleteLegacyShardCall(shardDeleteRequest, _callback);

    }


    private ApiResponse<ShardResponse> deleteLegacyShardWithHttpInfo(ShardDeleteRequest shardDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteLegacyShardValidateBeforeCall(shardDeleteRequest, null);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteLegacyShardAsync(ShardDeleteRequest shardDeleteRequest, final ApiCallback<ShardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLegacyShardValidateBeforeCall(shardDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteLegacyShardRequestBuilder {
        private String shardId;

        private DeleteLegacyShardRequestBuilder() {
        }

        /**
         * Set shardId
         * @param shardId  (optional)
         * @return DeleteLegacyShardRequestBuilder
         */
        public DeleteLegacyShardRequestBuilder shardId(String shardId) {
            this.shardId = shardId;
            return this;
        }
        
        /**
         * Build call for deleteLegacyShard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShardDeleteRequest shardDeleteRequest = buildBodyParams();
            return deleteLegacyShardCall(shardDeleteRequest, _callback);
        }

        private ShardDeleteRequest buildBodyParams() {
            ShardDeleteRequest shardDeleteRequest = new ShardDeleteRequest();
            shardDeleteRequest.shardId(this.shardId);
            return shardDeleteRequest;
        }

        /**
         * Execute deleteLegacyShard request
         * @return ShardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardResponse execute() throws ApiException {
            ShardDeleteRequest shardDeleteRequest = buildBodyParams();
            ApiResponse<ShardResponse> localVarResp = deleteLegacyShardWithHttpInfo(shardDeleteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteLegacyShard request with HTTP info returned
         * @return ApiResponse&lt;ShardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardResponse> executeWithHttpInfo() throws ApiException {
            ShardDeleteRequest shardDeleteRequest = buildBodyParams();
            return deleteLegacyShardWithHttpInfo(shardDeleteRequest);
        }

        /**
         * Execute deleteLegacyShard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardResponse> _callback) throws ApiException {
            ShardDeleteRequest shardDeleteRequest = buildBodyParams();
            return deleteLegacyShardAsync(shardDeleteRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteLegacyShardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLegacyShardRequestBuilder deleteLegacyShard() throws IllegalArgumentException {
        return new DeleteLegacyShardRequestBuilder();
    }
    private okhttp3.Call getLegacyAcceptingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards/accepting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyAcceptingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyAcceptingCall(_callback);

    }


    private ApiResponse<ShardListResponse> getLegacyAcceptingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyAcceptingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ShardListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyAcceptingAsync(final ApiCallback<ShardListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyAcceptingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ShardListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyAcceptingRequestBuilder {

        private GetLegacyAcceptingRequestBuilder() {
        }

        /**
         * Build call for getLegacyAccepting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyAcceptingCall(_callback);
        }


        /**
         * Execute getLegacyAccepting request
         * @return ShardListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardListResponse execute() throws ApiException {
            ApiResponse<ShardListResponse> localVarResp = getLegacyAcceptingWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyAccepting request with HTTP info returned
         * @return ApiResponse&lt;ShardListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardListResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyAcceptingWithHttpInfo();
        }

        /**
         * Execute getLegacyAccepting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardListResponse> _callback) throws ApiException {
            return getLegacyAcceptingAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyAcceptingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyAcceptingRequestBuilder getLegacyAccepting() throws IllegalArgumentException {
        return new GetLegacyAcceptingRequestBuilder();
    }
    private okhttp3.Call getLegacyDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyDataCall(_callback);

    }


    private ApiResponse<ShardListResponse> getLegacyDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ShardListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyDataAsync(final ApiCallback<ShardListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ShardListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyDataRequestBuilder {

        private GetLegacyDataRequestBuilder() {
        }

        /**
         * Build call for getLegacyData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyDataCall(_callback);
        }


        /**
         * Execute getLegacyData request
         * @return ShardListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardListResponse execute() throws ApiException {
            ApiResponse<ShardListResponse> localVarResp = getLegacyDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyData request with HTTP info returned
         * @return ApiResponse&lt;ShardListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardListResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyDataWithHttpInfo();
        }

        /**
         * Execute getLegacyData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardListResponse> _callback) throws ApiException {
            return getLegacyDataAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyDataRequestBuilder getLegacyData() throws IllegalArgumentException {
        return new GetLegacyDataRequestBuilder();
    }
    private okhttp3.Call getPreferredLegacyShardsCall(String preference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards/preferred";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preference", preference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreferredLegacyShardsValidateBeforeCall(String preference, final ApiCallback _callback) throws ApiException {
        return getPreferredLegacyShardsCall(preference, _callback);

    }


    private ApiResponse<ShardResponse> getPreferredLegacyShardsWithHttpInfo(String preference) throws ApiException {
        okhttp3.Call localVarCall = getPreferredLegacyShardsValidateBeforeCall(preference, null);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPreferredLegacyShardsAsync(String preference, final ApiCallback<ShardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreferredLegacyShardsValidateBeforeCall(preference, _callback);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPreferredLegacyShardsRequestBuilder {
        private String preference;

        private GetPreferredLegacyShardsRequestBuilder() {
        }

        /**
         * Set preference
         * @param preference  (optional)
         * @return GetPreferredLegacyShardsRequestBuilder
         */
        public GetPreferredLegacyShardsRequestBuilder preference(String preference) {
            this.preference = preference;
            return this;
        }
        
        /**
         * Build call for getPreferredLegacyShards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreferredLegacyShardsCall(preference, _callback);
        }


        /**
         * Execute getPreferredLegacyShards request
         * @return ShardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardResponse execute() throws ApiException {
            ApiResponse<ShardResponse> localVarResp = getPreferredLegacyShardsWithHttpInfo(preference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPreferredLegacyShards request with HTTP info returned
         * @return ApiResponse&lt;ShardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardResponse> executeWithHttpInfo() throws ApiException {
            return getPreferredLegacyShardsWithHttpInfo(preference);
        }

        /**
         * Execute getPreferredLegacyShards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardResponse> _callback) throws ApiException {
            return getPreferredLegacyShardsAsync(preference, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetPreferredLegacyShardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPreferredLegacyShardsRequestBuilder getPreferredLegacyShards() throws IllegalArgumentException {
        return new GetPreferredLegacyShardsRequestBuilder();
    }
    private okhttp3.Call postLegacyShardCall(ShardDef shardDef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shardDef;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postLegacyShardValidateBeforeCall(ShardDef shardDef, final ApiCallback _callback) throws ApiException {
        return postLegacyShardCall(shardDef, _callback);

    }


    private ApiResponse<ShardResponse> postLegacyShardWithHttpInfo(ShardDef shardDef) throws ApiException {
        okhttp3.Call localVarCall = postLegacyShardValidateBeforeCall(shardDef, null);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postLegacyShardAsync(ShardDef shardDef, final ApiCallback<ShardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postLegacyShardValidateBeforeCall(shardDef, _callback);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostLegacyShardRequestBuilder {
        private String shardId;
        private String uri;
        private Map<String, Object> metadata;

        private PostLegacyShardRequestBuilder() {
        }

        /**
         * Set shardId
         * @param shardId  (optional)
         * @return PostLegacyShardRequestBuilder
         */
        public PostLegacyShardRequestBuilder shardId(String shardId) {
            this.shardId = shardId;
            return this;
        }
        
        /**
         * Set uri
         * @param uri  (optional)
         * @return PostLegacyShardRequestBuilder
         */
        public PostLegacyShardRequestBuilder uri(String uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return PostLegacyShardRequestBuilder
         */
        public PostLegacyShardRequestBuilder metadata(Map<String, Object> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for postLegacyShard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShardDef shardDef = buildBodyParams();
            return postLegacyShardCall(shardDef, _callback);
        }

        private ShardDef buildBodyParams() {
            ShardDef shardDef = new ShardDef();
            shardDef.shardId(this.shardId);
            shardDef.uri(this.uri);
            shardDef.metadata(this.metadata);
            return shardDef;
        }

        /**
         * Execute postLegacyShard request
         * @return ShardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardResponse execute() throws ApiException {
            ShardDef shardDef = buildBodyParams();
            ApiResponse<ShardResponse> localVarResp = postLegacyShardWithHttpInfo(shardDef);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postLegacyShard request with HTTP info returned
         * @return ApiResponse&lt;ShardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardResponse> executeWithHttpInfo() throws ApiException {
            ShardDef shardDef = buildBodyParams();
            return postLegacyShardWithHttpInfo(shardDef);
        }

        /**
         * Execute postLegacyShard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardResponse> _callback) throws ApiException {
            ShardDef shardDef = buildBodyParams();
            return postLegacyShardAsync(shardDef, _callback);
        }
    }

    /**
     * 
     * 
     * @return PostLegacyShardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostLegacyShardRequestBuilder postLegacyShard() throws IllegalArgumentException {
        return new PostLegacyShardRequestBuilder();
    }
    private okhttp3.Call updateLegacyShardDataCall(ShardUpdateRequest shardUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shardUpdateRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-shards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLegacyShardDataValidateBeforeCall(ShardUpdateRequest shardUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateLegacyShardDataCall(shardUpdateRequest, _callback);

    }


    private ApiResponse<ShardResponse> updateLegacyShardDataWithHttpInfo(ShardUpdateRequest shardUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLegacyShardDataValidateBeforeCall(shardUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLegacyShardDataAsync(ShardUpdateRequest shardUpdateRequest, final ApiCallback<ShardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLegacyShardDataValidateBeforeCall(shardUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ShardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLegacyShardDataRequestBuilder {
        private String shardId;
        private String uri;
        private MetadataUpdate metadata;

        private UpdateLegacyShardDataRequestBuilder() {
        }

        /**
         * Set shardId
         * @param shardId  (optional)
         * @return UpdateLegacyShardDataRequestBuilder
         */
        public UpdateLegacyShardDataRequestBuilder shardId(String shardId) {
            this.shardId = shardId;
            return this;
        }
        
        /**
         * Set uri
         * @param uri  (optional)
         * @return UpdateLegacyShardDataRequestBuilder
         */
        public UpdateLegacyShardDataRequestBuilder uri(String uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return UpdateLegacyShardDataRequestBuilder
         */
        public UpdateLegacyShardDataRequestBuilder metadata(MetadataUpdate metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateLegacyShardData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShardUpdateRequest shardUpdateRequest = buildBodyParams();
            return updateLegacyShardDataCall(shardUpdateRequest, _callback);
        }

        private ShardUpdateRequest buildBodyParams() {
            ShardUpdateRequest shardUpdateRequest = new ShardUpdateRequest();
            shardUpdateRequest.shardId(this.shardId);
            shardUpdateRequest.uri(this.uri);
            shardUpdateRequest.metadata(this.metadata);
            return shardUpdateRequest;
        }

        /**
         * Execute updateLegacyShardData request
         * @return ShardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ShardResponse execute() throws ApiException {
            ShardUpdateRequest shardUpdateRequest = buildBodyParams();
            ApiResponse<ShardResponse> localVarResp = updateLegacyShardDataWithHttpInfo(shardUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLegacyShardData request with HTTP info returned
         * @return ApiResponse&lt;ShardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShardResponse> executeWithHttpInfo() throws ApiException {
            ShardUpdateRequest shardUpdateRequest = buildBodyParams();
            return updateLegacyShardDataWithHttpInfo(shardUpdateRequest);
        }

        /**
         * Execute updateLegacyShardData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShardResponse> _callback) throws ApiException {
            ShardUpdateRequest shardUpdateRequest = buildBodyParams();
            return updateLegacyShardDataAsync(shardUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateLegacyShardDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLegacyShardDataRequestBuilder updateLegacyShardData() throws IllegalArgumentException {
        return new UpdateLegacyShardDataRequestBuilder();
    }
}
