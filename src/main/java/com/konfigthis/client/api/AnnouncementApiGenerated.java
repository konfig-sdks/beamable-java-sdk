/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Announcement;
import com.konfigthis.client.model.AnnouncementAttachment;
import com.konfigthis.client.model.AnnouncementContentResponse;
import com.konfigthis.client.model.AnnouncementQueryResponse;
import com.konfigthis.client.model.AnnouncementRawResponse;
import com.konfigthis.client.model.AnnouncementRequest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.DeleteAnnouncementRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.PlayerReward;
import com.konfigthis.client.model.PlayerStatRequirement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AnnouncementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnouncementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AnnouncementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call claimObjectAnnouncementCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = announcementRequest;

        // create path and map variables
        String localVarPath = "/object/announcements/{objectId}/claim"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimObjectAnnouncementValidateBeforeCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling claimObjectAnnouncement(Async)");
        }

        return claimObjectAnnouncementCall(objectId, announcementRequest, _callback);

    }


    private ApiResponse<CommonResponse> claimObjectAnnouncementWithHttpInfo(String objectId, AnnouncementRequest announcementRequest) throws ApiException {
        okhttp3.Call localVarCall = claimObjectAnnouncementValidateBeforeCall(objectId, announcementRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call claimObjectAnnouncementAsync(String objectId, AnnouncementRequest announcementRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimObjectAnnouncementValidateBeforeCall(objectId, announcementRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClaimObjectAnnouncementRequestBuilder {
        private final String objectId;
        private String announcement;
        private List<String> announcements;

        private ClaimObjectAnnouncementRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set announcement
         * @param announcement  (optional)
         * @return ClaimObjectAnnouncementRequestBuilder
         */
        public ClaimObjectAnnouncementRequestBuilder announcement(String announcement) {
            this.announcement = announcement;
            return this;
        }
        
        /**
         * Set announcements
         * @param announcements  (optional)
         * @return ClaimObjectAnnouncementRequestBuilder
         */
        public ClaimObjectAnnouncementRequestBuilder announcements(List<String> announcements) {
            this.announcements = announcements;
            return this;
        }
        
        /**
         * Build call for claimObjectAnnouncement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return claimObjectAnnouncementCall(objectId, announcementRequest, _callback);
        }

        private AnnouncementRequest buildBodyParams() {
            AnnouncementRequest announcementRequest = new AnnouncementRequest();
            announcementRequest.announcement(this.announcement);
            announcementRequest.announcements(this.announcements);
            return announcementRequest;
        }

        /**
         * Execute claimObjectAnnouncement request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = claimObjectAnnouncementWithHttpInfo(objectId, announcementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute claimObjectAnnouncement request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return claimObjectAnnouncementWithHttpInfo(objectId, announcementRequest);
        }

        /**
         * Execute claimObjectAnnouncement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return claimObjectAnnouncementAsync(objectId, announcementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return ClaimObjectAnnouncementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ClaimObjectAnnouncementRequestBuilder claimObjectAnnouncement(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new ClaimObjectAnnouncementRequestBuilder(objectId);
    }
    private okhttp3.Call createNewAnnouncementCall(Announcement announcement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = announcement;

        // create path and map variables
        String localVarPath = "/basic/announcements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAnnouncementValidateBeforeCall(Announcement announcement, final ApiCallback _callback) throws ApiException {
        return createNewAnnouncementCall(announcement, _callback);

    }


    private ApiResponse<EmptyResponse> createNewAnnouncementWithHttpInfo(Announcement announcement) throws ApiException {
        okhttp3.Call localVarCall = createNewAnnouncementValidateBeforeCall(announcement, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAnnouncementAsync(Announcement announcement, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAnnouncementValidateBeforeCall(announcement, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAnnouncementRequestBuilder {
        private String summary;
        private String title;
        private String body;
        private String channel;
        private String startDate;
        private PlayerReward gift;
        private Integer mongoStartDate;
        private List<PlayerStatRequirement> statRequirements;
        private Integer mongoEndDate;
        private String symbol;
        private Map<String, Object> clientData;
        private List<String> validationErrors;
        private String endDate;
        private List<AnnouncementAttachment> attachments;

        private CreateNewAnnouncementRequestBuilder() {
        }

        /**
         * Set summary
         * @param summary  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set body
         * @param body  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set channel
         * @param channel  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set gift
         * @param gift  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder gift(PlayerReward gift) {
            this.gift = gift;
            return this;
        }
        
        /**
         * Set mongoStartDate
         * @param mongoStartDate  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder mongoStartDate(Integer mongoStartDate) {
            this.mongoStartDate = mongoStartDate;
            return this;
        }
        
        /**
         * Set statRequirements
         * @param statRequirements  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder statRequirements(List<PlayerStatRequirement> statRequirements) {
            this.statRequirements = statRequirements;
            return this;
        }
        
        /**
         * Set mongoEndDate
         * @param mongoEndDate  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder mongoEndDate(Integer mongoEndDate) {
            this.mongoEndDate = mongoEndDate;
            return this;
        }
        
        /**
         * Set symbol
         * @param symbol  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Set clientData
         * @param clientData  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder clientData(Map<String, Object> clientData) {
            this.clientData = clientData;
            return this;
        }
        
        /**
         * Set validationErrors
         * @param validationErrors  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder validationErrors(List<String> validationErrors) {
            this.validationErrors = validationErrors;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments  (optional)
         * @return CreateNewAnnouncementRequestBuilder
         */
        public CreateNewAnnouncementRequestBuilder attachments(List<AnnouncementAttachment> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for createNewAnnouncement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Announcement announcement = buildBodyParams();
            return createNewAnnouncementCall(announcement, _callback);
        }

        private Announcement buildBodyParams() {
            Announcement announcement = new Announcement();
            announcement.summary(this.summary);
            announcement.title(this.title);
            announcement.body(this.body);
            announcement.channel(this.channel);
            announcement.startDate(this.startDate);
            announcement.gift(this.gift);
            announcement.mongoStartDate(this.mongoStartDate);
            announcement.statRequirements(this.statRequirements);
            announcement.mongoEndDate(this.mongoEndDate);
            announcement.symbol(this.symbol);
            announcement.clientData(this.clientData);
            announcement.validationErrors(this.validationErrors);
            announcement.endDate(this.endDate);
            announcement.attachments(this.attachments);
            return announcement;
        }

        /**
         * Execute createNewAnnouncement request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            Announcement announcement = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createNewAnnouncementWithHttpInfo(announcement);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAnnouncement request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            Announcement announcement = buildBodyParams();
            return createNewAnnouncementWithHttpInfo(announcement);
        }

        /**
         * Execute createNewAnnouncement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            Announcement announcement = buildBodyParams();
            return createNewAnnouncementAsync(announcement, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewAnnouncementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAnnouncementRequestBuilder createNewAnnouncement() throws IllegalArgumentException {
        return new CreateNewAnnouncementRequestBuilder();
    }
    private okhttp3.Call deleteAnnouncementCall(DeleteAnnouncementRequest deleteAnnouncementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAnnouncementRequest;

        // create path and map variables
        String localVarPath = "/basic/announcements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnnouncementValidateBeforeCall(DeleteAnnouncementRequest deleteAnnouncementRequest, final ApiCallback _callback) throws ApiException {
        return deleteAnnouncementCall(deleteAnnouncementRequest, _callback);

    }


    private ApiResponse<EmptyResponse> deleteAnnouncementWithHttpInfo(DeleteAnnouncementRequest deleteAnnouncementRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAnnouncementValidateBeforeCall(deleteAnnouncementRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAnnouncementAsync(DeleteAnnouncementRequest deleteAnnouncementRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnnouncementValidateBeforeCall(deleteAnnouncementRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAnnouncementRequestBuilder {
        private String symbol;

        private DeleteAnnouncementRequestBuilder() {
        }

        /**
         * Set symbol
         * @param symbol  (optional)
         * @return DeleteAnnouncementRequestBuilder
         */
        public DeleteAnnouncementRequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Build call for deleteAnnouncement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteAnnouncementRequest deleteAnnouncementRequest = buildBodyParams();
            return deleteAnnouncementCall(deleteAnnouncementRequest, _callback);
        }

        private DeleteAnnouncementRequest buildBodyParams() {
            DeleteAnnouncementRequest deleteAnnouncementRequest = new DeleteAnnouncementRequest();
            deleteAnnouncementRequest.symbol(this.symbol);
            return deleteAnnouncementRequest;
        }

        /**
         * Execute deleteAnnouncement request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            DeleteAnnouncementRequest deleteAnnouncementRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = deleteAnnouncementWithHttpInfo(deleteAnnouncementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAnnouncement request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            DeleteAnnouncementRequest deleteAnnouncementRequest = buildBodyParams();
            return deleteAnnouncementWithHttpInfo(deleteAnnouncementRequest);
        }

        /**
         * Execute deleteAnnouncement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            DeleteAnnouncementRequest deleteAnnouncementRequest = buildBodyParams();
            return deleteAnnouncementAsync(deleteAnnouncementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteAnnouncementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAnnouncementRequestBuilder deleteAnnouncement() throws IllegalArgumentException {
        return new DeleteAnnouncementRequestBuilder();
    }
    private okhttp3.Call getAllAnnouncementsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/announcements/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAnnouncementsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllAnnouncementsCall(_callback);

    }


    private ApiResponse<AnnouncementContentResponse> getAllAnnouncementsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllAnnouncementsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAnnouncementsAsync(final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAnnouncementsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAnnouncementsRequestBuilder {

        private GetAllAnnouncementsRequestBuilder() {
        }

        /**
         * Build call for getAllAnnouncements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAnnouncementsCall(_callback);
        }


        /**
         * Execute getAllAnnouncements request
         * @return AnnouncementContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AnnouncementContentResponse execute() throws ApiException {
            ApiResponse<AnnouncementContentResponse> localVarResp = getAllAnnouncementsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAnnouncements request with HTTP info returned
         * @return ApiResponse&lt;AnnouncementContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnouncementContentResponse> executeWithHttpInfo() throws ApiException {
            return getAllAnnouncementsWithHttpInfo();
        }

        /**
         * Execute getAllAnnouncements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {
            return getAllAnnouncementsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetAllAnnouncementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAnnouncementsRequestBuilder getAllAnnouncements() throws IllegalArgumentException {
        return new GetAllAnnouncementsRequestBuilder();
    }
    private okhttp3.Call getObjectDetailsCall(String objectId, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/announcements/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectDetailsValidateBeforeCall(String objectId, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectDetails(Async)");
        }

        return getObjectDetailsCall(objectId, includeDeleted, _callback);

    }


    private ApiResponse<AnnouncementQueryResponse> getObjectDetailsWithHttpInfo(String objectId, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = getObjectDetailsValidateBeforeCall(objectId, includeDeleted, null);
        Type localVarReturnType = new TypeToken<AnnouncementQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectDetailsAsync(String objectId, Boolean includeDeleted, final ApiCallback<AnnouncementQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectDetailsValidateBeforeCall(objectId, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<AnnouncementQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectDetailsRequestBuilder {
        private final String objectId;
        private Boolean includeDeleted;

        private GetObjectDetailsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set includeDeleted
         * @param includeDeleted  (optional)
         * @return GetObjectDetailsRequestBuilder
         */
        public GetObjectDetailsRequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for getObjectDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectDetailsCall(objectId, includeDeleted, _callback);
        }


        /**
         * Execute getObjectDetails request
         * @return AnnouncementQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AnnouncementQueryResponse execute() throws ApiException {
            ApiResponse<AnnouncementQueryResponse> localVarResp = getObjectDetailsWithHttpInfo(objectId, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectDetails request with HTTP info returned
         * @return ApiResponse&lt;AnnouncementQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnouncementQueryResponse> executeWithHttpInfo() throws ApiException {
            return getObjectDetailsWithHttpInfo(objectId, includeDeleted);
        }

        /**
         * Execute getObjectDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnouncementQueryResponse> _callback) throws ApiException {
            return getObjectDetailsAsync(objectId, includeDeleted, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectDetailsRequestBuilder getObjectDetails(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectDetailsRequestBuilder(objectId);
    }
    private okhttp3.Call getObjectRawCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/announcements/{objectId}/raw"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectRawValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectRaw(Async)");
        }

        return getObjectRawCall(objectId, _callback);

    }


    private ApiResponse<AnnouncementRawResponse> getObjectRawWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectRawValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<AnnouncementRawResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectRawAsync(String objectId, final ApiCallback<AnnouncementRawResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectRawValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<AnnouncementRawResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectRawRequestBuilder {
        private final String objectId;

        private GetObjectRawRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectRaw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectRawCall(objectId, _callback);
        }


        /**
         * Execute getObjectRaw request
         * @return AnnouncementRawResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AnnouncementRawResponse execute() throws ApiException {
            ApiResponse<AnnouncementRawResponse> localVarResp = getObjectRawWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectRaw request with HTTP info returned
         * @return ApiResponse&lt;AnnouncementRawResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnouncementRawResponse> executeWithHttpInfo() throws ApiException {
            return getObjectRawWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectRaw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnouncementRawResponse> _callback) throws ApiException {
            return getObjectRawAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectRawRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectRawRequestBuilder getObjectRaw(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectRawRequestBuilder(objectId);
    }
    private okhttp3.Call markAsReadCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = announcementRequest;

        // create path and map variables
        String localVarPath = "/object/announcements/{objectId}/read"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsReadValidateBeforeCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling markAsRead(Async)");
        }

        return markAsReadCall(objectId, announcementRequest, _callback);

    }


    private ApiResponse<CommonResponse> markAsReadWithHttpInfo(String objectId, AnnouncementRequest announcementRequest) throws ApiException {
        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(objectId, announcementRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markAsReadAsync(String objectId, AnnouncementRequest announcementRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(objectId, announcementRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkAsReadRequestBuilder {
        private final String objectId;
        private String announcement;
        private List<String> announcements;

        private MarkAsReadRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set announcement
         * @param announcement  (optional)
         * @return MarkAsReadRequestBuilder
         */
        public MarkAsReadRequestBuilder announcement(String announcement) {
            this.announcement = announcement;
            return this;
        }
        
        /**
         * Set announcements
         * @param announcements  (optional)
         * @return MarkAsReadRequestBuilder
         */
        public MarkAsReadRequestBuilder announcements(List<String> announcements) {
            this.announcements = announcements;
            return this;
        }
        
        /**
         * Build call for markAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return markAsReadCall(objectId, announcementRequest, _callback);
        }

        private AnnouncementRequest buildBodyParams() {
            AnnouncementRequest announcementRequest = new AnnouncementRequest();
            announcementRequest.announcement(this.announcement);
            announcementRequest.announcements(this.announcements);
            return announcementRequest;
        }

        /**
         * Execute markAsRead request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = markAsReadWithHttpInfo(objectId, announcementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markAsRead request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return markAsReadWithHttpInfo(objectId, announcementRequest);
        }

        /**
         * Execute markAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return markAsReadAsync(objectId, announcementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return MarkAsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsReadRequestBuilder markAsRead(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new MarkAsReadRequestBuilder(objectId);
    }
    private okhttp3.Call removeAnnouncementObjectCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = announcementRequest;

        // create path and map variables
        String localVarPath = "/object/announcements/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAnnouncementObjectValidateBeforeCall(String objectId, AnnouncementRequest announcementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeAnnouncementObject(Async)");
        }

        return removeAnnouncementObjectCall(objectId, announcementRequest, _callback);

    }


    private ApiResponse<CommonResponse> removeAnnouncementObjectWithHttpInfo(String objectId, AnnouncementRequest announcementRequest) throws ApiException {
        okhttp3.Call localVarCall = removeAnnouncementObjectValidateBeforeCall(objectId, announcementRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAnnouncementObjectAsync(String objectId, AnnouncementRequest announcementRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAnnouncementObjectValidateBeforeCall(objectId, announcementRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAnnouncementObjectRequestBuilder {
        private final String objectId;
        private String announcement;
        private List<String> announcements;

        private RemoveAnnouncementObjectRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set announcement
         * @param announcement  (optional)
         * @return RemoveAnnouncementObjectRequestBuilder
         */
        public RemoveAnnouncementObjectRequestBuilder announcement(String announcement) {
            this.announcement = announcement;
            return this;
        }
        
        /**
         * Set announcements
         * @param announcements  (optional)
         * @return RemoveAnnouncementObjectRequestBuilder
         */
        public RemoveAnnouncementObjectRequestBuilder announcements(List<String> announcements) {
            this.announcements = announcements;
            return this;
        }
        
        /**
         * Build call for removeAnnouncementObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return removeAnnouncementObjectCall(objectId, announcementRequest, _callback);
        }

        private AnnouncementRequest buildBodyParams() {
            AnnouncementRequest announcementRequest = new AnnouncementRequest();
            announcementRequest.announcement(this.announcement);
            announcementRequest.announcements(this.announcements);
            return announcementRequest;
        }

        /**
         * Execute removeAnnouncementObject request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = removeAnnouncementObjectWithHttpInfo(objectId, announcementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAnnouncementObject request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return removeAnnouncementObjectWithHttpInfo(objectId, announcementRequest);
        }

        /**
         * Execute removeAnnouncementObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            AnnouncementRequest announcementRequest = buildBodyParams();
            return removeAnnouncementObjectAsync(objectId, announcementRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveAnnouncementObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAnnouncementObjectRequestBuilder removeAnnouncementObject(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveAnnouncementObjectRequestBuilder(objectId);
    }
    private okhttp3.Call searchOperationCall(String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/announcements/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchOperationValidateBeforeCall(String date, final ApiCallback _callback) throws ApiException {
        return searchOperationCall(date, _callback);

    }


    private ApiResponse<AnnouncementContentResponse> searchOperationWithHttpInfo(String date) throws ApiException {
        okhttp3.Call localVarCall = searchOperationValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchOperationAsync(String date, final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchOperationValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchOperationRequestBuilder {
        private String date;

        private SearchOperationRequestBuilder() {
        }

        /**
         * Set date
         * @param date  (optional)
         * @return SearchOperationRequestBuilder
         */
        public SearchOperationRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for searchOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchOperationCall(date, _callback);
        }


        /**
         * Execute searchOperation request
         * @return AnnouncementContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AnnouncementContentResponse execute() throws ApiException {
            ApiResponse<AnnouncementContentResponse> localVarResp = searchOperationWithHttpInfo(date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchOperation request with HTTP info returned
         * @return ApiResponse&lt;AnnouncementContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnouncementContentResponse> executeWithHttpInfo() throws ApiException {
            return searchOperationWithHttpInfo(date);
        }

        /**
         * Execute searchOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {
            return searchOperationAsync(date, _callback);
        }
    }

    /**
     * 
     * 
     * @return SearchOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchOperationRequestBuilder searchOperation() throws IllegalArgumentException {
        return new SearchOperationRequestBuilder();
    }
}
