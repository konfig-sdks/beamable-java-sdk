/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AliasAvailableResponse;
import com.konfigthis.client.model.ArchiveProjectRequest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.CreateProjectRequest;
import com.konfigthis.client.model.CustomerResponse;
import com.konfigthis.client.model.CustomerViewResponse;
import com.konfigthis.client.model.CustomersResponse;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.NewCustomerRequest;
import com.konfigthis.client.model.NewCustomerResponse;
import com.konfigthis.client.model.ProjectView;
import com.konfigthis.client.model.PromoteRealmRequest;
import com.konfigthis.client.model.PromoteRealmResponse;
import com.konfigthis.client.model.PromoteRealmResponseOld;
import com.konfigthis.client.model.RealmConfigResponse;
import com.konfigthis.client.model.RealmConfigSaveRequest;
import com.konfigthis.client.model.RenameProjectRequest;
import com.konfigthis.client.model.UnarchiveProjectRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RealmApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RealmApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RealmApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkAliasAvailableCall(String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/customer/alias/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alias", alias));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAliasAvailableValidateBeforeCall(String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling checkAliasAvailable(Async)");
        }

        return checkAliasAvailableCall(alias, _callback);

    }


    private ApiResponse<AliasAvailableResponse> checkAliasAvailableWithHttpInfo(String alias) throws ApiException {
        okhttp3.Call localVarCall = checkAliasAvailableValidateBeforeCall(alias, null);
        Type localVarReturnType = new TypeToken<AliasAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkAliasAvailableAsync(String alias, final ApiCallback<AliasAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAliasAvailableValidateBeforeCall(alias, _callback);
        Type localVarReturnType = new TypeToken<AliasAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckAliasAvailableRequestBuilder {
        private final String alias;

        private CheckAliasAvailableRequestBuilder(String alias) {
            this.alias = alias;
        }

        /**
         * Build call for checkAliasAvailable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAliasAvailableCall(alias, _callback);
        }


        /**
         * Execute checkAliasAvailable request
         * @return AliasAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AliasAvailableResponse execute() throws ApiException {
            ApiResponse<AliasAvailableResponse> localVarResp = checkAliasAvailableWithHttpInfo(alias);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkAliasAvailable request with HTTP info returned
         * @return ApiResponse&lt;AliasAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AliasAvailableResponse> executeWithHttpInfo() throws ApiException {
            return checkAliasAvailableWithHttpInfo(alias);
        }

        /**
         * Execute checkAliasAvailable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AliasAvailableResponse> _callback) throws ApiException {
            return checkAliasAvailableAsync(alias, _callback);
        }
    }

    /**
     * 
     * 
     * @param alias  (required)
     * @return CheckAliasAvailableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckAliasAvailableRequestBuilder checkAliasAvailable(String alias) throws IllegalArgumentException {
        if (alias == null) throw new IllegalArgumentException("\"alias\" is required but got null");
            

        return new CheckAliasAvailableRequestBuilder(alias);
    }
    private okhttp3.Call checkCustomerStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/is-customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCustomerStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkCustomerStatusCall(_callback);

    }


    private ApiResponse<EmptyResponse> checkCustomerStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkCustomerStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkCustomerStatusAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCustomerStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckCustomerStatusRequestBuilder {

        private CheckCustomerStatusRequestBuilder() {
        }

        /**
         * Build call for checkCustomerStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkCustomerStatusCall(_callback);
        }


        /**
         * Execute checkCustomerStatus request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ApiResponse<EmptyResponse> localVarResp = checkCustomerStatusWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkCustomerStatus request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            return checkCustomerStatusWithHttpInfo();
        }

        /**
         * Execute checkCustomerStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            return checkCustomerStatusAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return CheckCustomerStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckCustomerStatusRequestBuilder checkCustomerStatus() throws IllegalArgumentException {
        return new CheckCustomerStatusRequestBuilder();
    }
    private okhttp3.Call createBeamableCall(CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project/beamable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBeamableValidateBeforeCall(CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        return createBeamableCall(createProjectRequest, _callback);

    }


    private ApiResponse<CommonResponse> createBeamableWithHttpInfo(CreateProjectRequest createProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createBeamableValidateBeforeCall(createProjectRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBeamableAsync(CreateProjectRequest createProjectRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBeamableValidateBeforeCall(createProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBeamableRequestBuilder {
        private final String name;
        private String plan;
        private Boolean sharded;
        private String parent;

        private CreateBeamableRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set plan
         * @param plan  (optional)
         * @return CreateBeamableRequestBuilder
         */
        public CreateBeamableRequestBuilder plan(String plan) {
            this.plan = plan;
            return this;
        }
        
        /**
         * Set sharded
         * @param sharded  (optional)
         * @return CreateBeamableRequestBuilder
         */
        public CreateBeamableRequestBuilder sharded(Boolean sharded) {
            this.sharded = sharded;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return CreateBeamableRequestBuilder
         */
        public CreateBeamableRequestBuilder parent(String parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Build call for createBeamable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createBeamableCall(createProjectRequest, _callback);
        }

        private CreateProjectRequest buildBodyParams() {
            CreateProjectRequest createProjectRequest = new CreateProjectRequest();
            createProjectRequest.name(this.name);
            createProjectRequest.plan(this.plan);
            createProjectRequest.sharded(this.sharded);
            createProjectRequest.parent(this.parent);
            return createProjectRequest;
        }

        /**
         * Execute createBeamable request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createBeamableWithHttpInfo(createProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBeamable request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createBeamableWithHttpInfo(createProjectRequest);
        }

        /**
         * Execute createBeamable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createBeamableAsync(createProjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateBeamableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateBeamableRequestBuilder createBeamable(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateBeamableRequestBuilder(name);
    }
    private okhttp3.Call createCustomerRealmCall(NewCustomerRequest newCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newCustomerRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerRealmValidateBeforeCall(NewCustomerRequest newCustomerRequest, final ApiCallback _callback) throws ApiException {
        return createCustomerRealmCall(newCustomerRequest, _callback);

    }


    private ApiResponse<NewCustomerResponse> createCustomerRealmWithHttpInfo(NewCustomerRequest newCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomerRealmValidateBeforeCall(newCustomerRequest, null);
        Type localVarReturnType = new TypeToken<NewCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomerRealmAsync(NewCustomerRequest newCustomerRequest, final ApiCallback<NewCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerRealmValidateBeforeCall(newCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<NewCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomerRealmRequestBuilder {
        private final String projectName;
        private final String email;
        private final String password;
        private String customerName;
        private Boolean hierarchy;
        private String alias;

        private CreateCustomerRealmRequestBuilder(String projectName, String email, String password) {
            this.projectName = projectName;
            this.email = email;
            this.password = password;
        }

        /**
         * Set customerName
         * @param customerName  (optional)
         * @return CreateCustomerRealmRequestBuilder
         */
        public CreateCustomerRealmRequestBuilder customerName(String customerName) {
            this.customerName = customerName;
            return this;
        }
        
        /**
         * Set hierarchy
         * @param hierarchy  (optional)
         * @return CreateCustomerRealmRequestBuilder
         */
        public CreateCustomerRealmRequestBuilder hierarchy(Boolean hierarchy) {
            this.hierarchy = hierarchy;
            return this;
        }
        
        /**
         * Set alias
         * @param alias  (optional)
         * @return CreateCustomerRealmRequestBuilder
         */
        public CreateCustomerRealmRequestBuilder alias(String alias) {
            this.alias = alias;
            return this;
        }
        
        /**
         * Build call for createCustomerRealm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewCustomerRequest newCustomerRequest = buildBodyParams();
            return createCustomerRealmCall(newCustomerRequest, _callback);
        }

        private NewCustomerRequest buildBodyParams() {
            NewCustomerRequest newCustomerRequest = new NewCustomerRequest();
            newCustomerRequest.projectName(this.projectName);
            newCustomerRequest.email(this.email);
            newCustomerRequest.customerName(this.customerName);
            newCustomerRequest.hierarchy(this.hierarchy);
            newCustomerRequest.alias(this.alias);
            newCustomerRequest.password(this.password);
            return newCustomerRequest;
        }

        /**
         * Execute createCustomerRealm request
         * @return NewCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public NewCustomerResponse execute() throws ApiException {
            NewCustomerRequest newCustomerRequest = buildBodyParams();
            ApiResponse<NewCustomerResponse> localVarResp = createCustomerRealmWithHttpInfo(newCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomerRealm request with HTTP info returned
         * @return ApiResponse&lt;NewCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NewCustomerResponse> executeWithHttpInfo() throws ApiException {
            NewCustomerRequest newCustomerRequest = buildBodyParams();
            return createCustomerRealmWithHttpInfo(newCustomerRequest);
        }

        /**
         * Execute createCustomerRealm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewCustomerResponse> _callback) throws ApiException {
            NewCustomerRequest newCustomerRequest = buildBodyParams();
            return createCustomerRealmAsync(newCustomerRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateCustomerRealmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerRealmRequestBuilder createCustomerRealm(String projectName, String email, String password) throws IllegalArgumentException {
        if (projectName == null) throw new IllegalArgumentException("\"projectName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new CreateCustomerRealmRequestBuilder(projectName, email, password);
    }
    private okhttp3.Call createProjectRealCall(CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectRealValidateBeforeCall(CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        return createProjectRealCall(createProjectRequest, _callback);

    }


    private ApiResponse<CommonResponse> createProjectRealWithHttpInfo(CreateProjectRequest createProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectRealValidateBeforeCall(createProjectRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectRealAsync(CreateProjectRequest createProjectRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectRealValidateBeforeCall(createProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectRealRequestBuilder {
        private final String name;
        private String plan;
        private Boolean sharded;
        private String parent;

        private CreateProjectRealRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set plan
         * @param plan  (optional)
         * @return CreateProjectRealRequestBuilder
         */
        public CreateProjectRealRequestBuilder plan(String plan) {
            this.plan = plan;
            return this;
        }
        
        /**
         * Set sharded
         * @param sharded  (optional)
         * @return CreateProjectRealRequestBuilder
         */
        public CreateProjectRealRequestBuilder sharded(Boolean sharded) {
            this.sharded = sharded;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return CreateProjectRealRequestBuilder
         */
        public CreateProjectRealRequestBuilder parent(String parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Build call for createProjectReal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createProjectRealCall(createProjectRequest, _callback);
        }

        private CreateProjectRequest buildBodyParams() {
            CreateProjectRequest createProjectRequest = new CreateProjectRequest();
            createProjectRequest.name(this.name);
            createProjectRequest.plan(this.plan);
            createProjectRequest.sharded(this.sharded);
            createProjectRequest.parent(this.parent);
            return createProjectRequest;
        }

        /**
         * Execute createProjectReal request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createProjectRealWithHttpInfo(createProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectReal request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createProjectRealWithHttpInfo(createProjectRequest);
        }

        /**
         * Execute createProjectReal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return createProjectRealAsync(createProjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateProjectRealRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectRealRequestBuilder createProjectReal(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateProjectRealRequestBuilder(name);
    }
    private okhttp3.Call createPromotionCall(PromoteRealmRequest promoteRealmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteRealmRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/promotion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPromotionValidateBeforeCall(PromoteRealmRequest promoteRealmRequest, final ApiCallback _callback) throws ApiException {
        return createPromotionCall(promoteRealmRequest, _callback);

    }


    private ApiResponse<PromoteRealmResponse> createPromotionWithHttpInfo(PromoteRealmRequest promoteRealmRequest) throws ApiException {
        okhttp3.Call localVarCall = createPromotionValidateBeforeCall(promoteRealmRequest, null);
        Type localVarReturnType = new TypeToken<PromoteRealmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPromotionAsync(PromoteRealmRequest promoteRealmRequest, final ApiCallback<PromoteRealmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPromotionValidateBeforeCall(promoteRealmRequest, _callback);
        Type localVarReturnType = new TypeToken<PromoteRealmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePromotionRequestBuilder {
        private final String sourcePid;
        private List<String> promotions;
        private List<String> contentManifestIds;

        private CreatePromotionRequestBuilder(String sourcePid) {
            this.sourcePid = sourcePid;
        }

        /**
         * Set promotions
         * @param promotions  (optional)
         * @return CreatePromotionRequestBuilder
         */
        public CreatePromotionRequestBuilder promotions(List<String> promotions) {
            this.promotions = promotions;
            return this;
        }
        
        /**
         * Set contentManifestIds
         * @param contentManifestIds  (optional)
         * @return CreatePromotionRequestBuilder
         */
        public CreatePromotionRequestBuilder contentManifestIds(List<String> contentManifestIds) {
            this.contentManifestIds = contentManifestIds;
            return this;
        }
        
        /**
         * Build call for createPromotion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return createPromotionCall(promoteRealmRequest, _callback);
        }

        private PromoteRealmRequest buildBodyParams() {
            PromoteRealmRequest promoteRealmRequest = new PromoteRealmRequest();
            promoteRealmRequest.sourcePid(this.sourcePid);
            promoteRealmRequest.promotions(this.promotions);
            promoteRealmRequest.contentManifestIds(this.contentManifestIds);
            return promoteRealmRequest;
        }

        /**
         * Execute createPromotion request
         * @return PromoteRealmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PromoteRealmResponse execute() throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            ApiResponse<PromoteRealmResponse> localVarResp = createPromotionWithHttpInfo(promoteRealmRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPromotion request with HTTP info returned
         * @return ApiResponse&lt;PromoteRealmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromoteRealmResponse> executeWithHttpInfo() throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return createPromotionWithHttpInfo(promoteRealmRequest);
        }

        /**
         * Execute createPromotion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromoteRealmResponse> _callback) throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return createPromotionAsync(promoteRealmRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreatePromotionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreatePromotionRequestBuilder createPromotion(String sourcePid) throws IllegalArgumentException {
        if (sourcePid == null) throw new IllegalArgumentException("\"sourcePid\" is required but got null");
            

        return new CreatePromotionRequestBuilder(sourcePid);
    }
    private okhttp3.Call deleteProjectCall(ArchiveProjectRequest archiveProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = archiveProjectRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(ArchiveProjectRequest archiveProjectRequest, final ApiCallback _callback) throws ApiException {
        return deleteProjectCall(archiveProjectRequest, _callback);

    }


    private ApiResponse<CommonResponse> deleteProjectWithHttpInfo(ArchiveProjectRequest archiveProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(archiveProjectRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteProjectAsync(ArchiveProjectRequest archiveProjectRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(archiveProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteProjectRequestBuilder {
        private final String pid;

        private DeleteProjectRequestBuilder(String pid) {
            this.pid = pid;
        }

        /**
         * Build call for deleteProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ArchiveProjectRequest archiveProjectRequest = buildBodyParams();
            return deleteProjectCall(archiveProjectRequest, _callback);
        }

        private ArchiveProjectRequest buildBodyParams() {
            ArchiveProjectRequest archiveProjectRequest = new ArchiveProjectRequest();
            archiveProjectRequest.pid(this.pid);
            return archiveProjectRequest;
        }

        /**
         * Execute deleteProject request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ArchiveProjectRequest archiveProjectRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = deleteProjectWithHttpInfo(archiveProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteProject request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            ArchiveProjectRequest archiveProjectRequest = buildBodyParams();
            return deleteProjectWithHttpInfo(archiveProjectRequest);
        }

        /**
         * Execute deleteProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            ArchiveProjectRequest archiveProjectRequest = buildBodyParams();
            return deleteProjectAsync(archiveProjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectRequestBuilder deleteProject(String pid) throws IllegalArgumentException {
        if (pid == null) throw new IllegalArgumentException("\"pid\" is required but got null");
            

        return new DeleteProjectRequestBuilder(pid);
    }
    private okhttp3.Call getConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConfigCall(_callback);

    }


    private ApiResponse<RealmConfigResponse> getConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RealmConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigAsync(final ApiCallback<RealmConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RealmConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigRequestBuilder {

        private GetConfigRequestBuilder() {
        }

        /**
         * Build call for getConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigCall(_callback);
        }


        /**
         * Execute getConfig request
         * @return RealmConfigResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public RealmConfigResponse execute() throws ApiException {
            ApiResponse<RealmConfigResponse> localVarResp = getConfigWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfig request with HTTP info returned
         * @return ApiResponse&lt;RealmConfigResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RealmConfigResponse> executeWithHttpInfo() throws ApiException {
            return getConfigWithHttpInfo();
        }

        /**
         * Execute getConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RealmConfigResponse> _callback) throws ApiException {
            return getConfigAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigRequestBuilder getConfig() throws IllegalArgumentException {
        return new GetConfigRequestBuilder();
    }
    private okhttp3.Call getCustomerRealmsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerRealmsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomerRealmsCall(_callback);

    }


    private ApiResponse<CustomerViewResponse> getCustomerRealmsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomerRealmsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomerViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerRealmsAsync(final ApiCallback<CustomerViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerRealmsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomerViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerRealmsRequestBuilder {

        private GetCustomerRealmsRequestBuilder() {
        }

        /**
         * Build call for getCustomerRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerRealmsCall(_callback);
        }


        /**
         * Execute getCustomerRealms request
         * @return CustomerViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CustomerViewResponse execute() throws ApiException {
            ApiResponse<CustomerViewResponse> localVarResp = getCustomerRealmsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerRealms request with HTTP info returned
         * @return ApiResponse&lt;CustomerViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerViewResponse> executeWithHttpInfo() throws ApiException {
            return getCustomerRealmsWithHttpInfo();
        }

        /**
         * Execute getCustomerRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerViewResponse> _callback) throws ApiException {
            return getCustomerRealmsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetCustomerRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerRealmsRequestBuilder getCustomerRealms() throws IllegalArgumentException {
        return new GetCustomerRealmsRequestBuilder();
    }
    private okhttp3.Call getCustomerRealms_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/admin/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerRealms_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomerRealms_0Call(_callback);

    }


    private ApiResponse<CustomerResponse> getCustomerRealms_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomerRealms_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerRealms_0Async(final ApiCallback<CustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerRealms_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerRealms0RequestBuilder {

        private GetCustomerRealms0RequestBuilder() {
        }

        /**
         * Build call for getCustomerRealms_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerRealms_0Call(_callback);
        }


        /**
         * Execute getCustomerRealms_0 request
         * @return CustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CustomerResponse execute() throws ApiException {
            ApiResponse<CustomerResponse> localVarResp = getCustomerRealms_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerRealms_0 request with HTTP info returned
         * @return ApiResponse&lt;CustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerResponse> executeWithHttpInfo() throws ApiException {
            return getCustomerRealms_0WithHttpInfo();
        }

        /**
         * Execute getCustomerRealms_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerResponse> _callback) throws ApiException {
            return getCustomerRealms_0Async(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetCustomerRealms0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerRealms0RequestBuilder getCustomerRealms_0() throws IllegalArgumentException {
        return new GetCustomerRealms0RequestBuilder();
    }
    private okhttp3.Call getProjectRealmsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectRealmsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProjectRealmsCall(_callback);

    }


    private ApiResponse<ProjectView> getProjectRealmsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProjectRealmsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ProjectView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectRealmsAsync(final ApiCallback<ProjectView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectRealmsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ProjectView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectRealmsRequestBuilder {

        private GetProjectRealmsRequestBuilder() {
        }

        /**
         * Build call for getProjectRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectRealmsCall(_callback);
        }


        /**
         * Execute getProjectRealms request
         * @return ProjectView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ProjectView execute() throws ApiException {
            ApiResponse<ProjectView> localVarResp = getProjectRealmsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectRealms request with HTTP info returned
         * @return ApiResponse&lt;ProjectView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectView> executeWithHttpInfo() throws ApiException {
            return getProjectRealmsWithHttpInfo();
        }

        /**
         * Execute getProjectRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectView> _callback) throws ApiException {
            return getProjectRealmsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetProjectRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectRealmsRequestBuilder getProjectRealms() throws IllegalArgumentException {
        return new GetProjectRealmsRequestBuilder();
    }
    private okhttp3.Call getPromotionDataCall(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/promotion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourcePid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourcePid", sourcePid));
        }

        if (promotions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "promotions", promotions));
        }

        if (contentManifestIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contentManifestIds", contentManifestIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromotionDataValidateBeforeCall(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourcePid' is set
        if (sourcePid == null) {
            throw new ApiException("Missing the required parameter 'sourcePid' when calling getPromotionData(Async)");
        }

        return getPromotionDataCall(sourcePid, promotions, contentManifestIds, _callback);

    }


    private ApiResponse<PromoteRealmResponse> getPromotionDataWithHttpInfo(String sourcePid, List<String> promotions, List<String> contentManifestIds) throws ApiException {
        okhttp3.Call localVarCall = getPromotionDataValidateBeforeCall(sourcePid, promotions, contentManifestIds, null);
        Type localVarReturnType = new TypeToken<PromoteRealmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPromotionDataAsync(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback<PromoteRealmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromotionDataValidateBeforeCall(sourcePid, promotions, contentManifestIds, _callback);
        Type localVarReturnType = new TypeToken<PromoteRealmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPromotionDataRequestBuilder {
        private final String sourcePid;
        private List<String> promotions;
        private List<String> contentManifestIds;

        private GetPromotionDataRequestBuilder(String sourcePid) {
            this.sourcePid = sourcePid;
        }

        /**
         * Set promotions
         * @param promotions  (optional)
         * @return GetPromotionDataRequestBuilder
         */
        public GetPromotionDataRequestBuilder promotions(List<String> promotions) {
            this.promotions = promotions;
            return this;
        }
        
        /**
         * Set contentManifestIds
         * @param contentManifestIds  (optional)
         * @return GetPromotionDataRequestBuilder
         */
        public GetPromotionDataRequestBuilder contentManifestIds(List<String> contentManifestIds) {
            this.contentManifestIds = contentManifestIds;
            return this;
        }
        
        /**
         * Build call for getPromotionData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPromotionDataCall(sourcePid, promotions, contentManifestIds, _callback);
        }


        /**
         * Execute getPromotionData request
         * @return PromoteRealmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PromoteRealmResponse execute() throws ApiException {
            ApiResponse<PromoteRealmResponse> localVarResp = getPromotionDataWithHttpInfo(sourcePid, promotions, contentManifestIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPromotionData request with HTTP info returned
         * @return ApiResponse&lt;PromoteRealmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromoteRealmResponse> executeWithHttpInfo() throws ApiException {
            return getPromotionDataWithHttpInfo(sourcePid, promotions, contentManifestIds);
        }

        /**
         * Execute getPromotionData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromoteRealmResponse> _callback) throws ApiException {
            return getPromotionDataAsync(sourcePid, promotions, contentManifestIds, _callback);
        }
    }

    /**
     * 
     * 
     * @param sourcePid  (required)
     * @return GetPromotionDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPromotionDataRequestBuilder getPromotionData(String sourcePid) throws IllegalArgumentException {
        if (sourcePid == null) throw new IllegalArgumentException("\"sourcePid\" is required but got null");
            

        return new GetPromotionDataRequestBuilder(sourcePid);
    }
    private okhttp3.Call listCustomersRealmsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomersRealmsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCustomersRealmsCall(_callback);

    }


    private ApiResponse<CustomersResponse> listCustomersRealmsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCustomersRealmsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomersRealmsAsync(final ApiCallback<CustomersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomersRealmsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomersRealmsRequestBuilder {

        private ListCustomersRealmsRequestBuilder() {
        }

        /**
         * Build call for listCustomersRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomersRealmsCall(_callback);
        }


        /**
         * Execute listCustomersRealms request
         * @return CustomersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CustomersResponse execute() throws ApiException {
            ApiResponse<CustomersResponse> localVarResp = listCustomersRealmsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomersRealms request with HTTP info returned
         * @return ApiResponse&lt;CustomersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomersResponse> executeWithHttpInfo() throws ApiException {
            return listCustomersRealmsWithHttpInfo();
        }

        /**
         * Execute listCustomersRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomersResponse> _callback) throws ApiException {
            return listCustomersRealmsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return ListCustomersRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomersRealmsRequestBuilder listCustomersRealms() throws IllegalArgumentException {
        return new ListCustomersRealmsRequestBuilder();
    }
    private okhttp3.Call projectPromoteCall(PromoteRealmRequest promoteRealmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteRealmRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project/promote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectPromoteValidateBeforeCall(PromoteRealmRequest promoteRealmRequest, final ApiCallback _callback) throws ApiException {
        return projectPromoteCall(promoteRealmRequest, _callback);

    }


    private ApiResponse<PromoteRealmResponseOld> projectPromoteWithHttpInfo(PromoteRealmRequest promoteRealmRequest) throws ApiException {
        okhttp3.Call localVarCall = projectPromoteValidateBeforeCall(promoteRealmRequest, null);
        Type localVarReturnType = new TypeToken<PromoteRealmResponseOld>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call projectPromoteAsync(PromoteRealmRequest promoteRealmRequest, final ApiCallback<PromoteRealmResponseOld> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectPromoteValidateBeforeCall(promoteRealmRequest, _callback);
        Type localVarReturnType = new TypeToken<PromoteRealmResponseOld>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProjectPromoteRequestBuilder {
        private final String sourcePid;
        private List<String> promotions;
        private List<String> contentManifestIds;

        private ProjectPromoteRequestBuilder(String sourcePid) {
            this.sourcePid = sourcePid;
        }

        /**
         * Set promotions
         * @param promotions  (optional)
         * @return ProjectPromoteRequestBuilder
         */
        public ProjectPromoteRequestBuilder promotions(List<String> promotions) {
            this.promotions = promotions;
            return this;
        }
        
        /**
         * Set contentManifestIds
         * @param contentManifestIds  (optional)
         * @return ProjectPromoteRequestBuilder
         */
        public ProjectPromoteRequestBuilder contentManifestIds(List<String> contentManifestIds) {
            this.contentManifestIds = contentManifestIds;
            return this;
        }
        
        /**
         * Build call for projectPromote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return projectPromoteCall(promoteRealmRequest, _callback);
        }

        private PromoteRealmRequest buildBodyParams() {
            PromoteRealmRequest promoteRealmRequest = new PromoteRealmRequest();
            promoteRealmRequest.sourcePid(this.sourcePid);
            promoteRealmRequest.promotions(this.promotions);
            promoteRealmRequest.contentManifestIds(this.contentManifestIds);
            return promoteRealmRequest;
        }

        /**
         * Execute projectPromote request
         * @return PromoteRealmResponseOld
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PromoteRealmResponseOld execute() throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            ApiResponse<PromoteRealmResponseOld> localVarResp = projectPromoteWithHttpInfo(promoteRealmRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute projectPromote request with HTTP info returned
         * @return ApiResponse&lt;PromoteRealmResponseOld&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromoteRealmResponseOld> executeWithHttpInfo() throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return projectPromoteWithHttpInfo(promoteRealmRequest);
        }

        /**
         * Execute projectPromote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromoteRealmResponseOld> _callback) throws ApiException {
            PromoteRealmRequest promoteRealmRequest = buildBodyParams();
            return projectPromoteAsync(promoteRealmRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ProjectPromoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProjectPromoteRequestBuilder projectPromote(String sourcePid) throws IllegalArgumentException {
        if (sourcePid == null) throw new IllegalArgumentException("\"sourcePid\" is required but got null");
            

        return new ProjectPromoteRequestBuilder(sourcePid);
    }
    private okhttp3.Call projectPromoteGetCall(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/realms/project/promote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourcePid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourcePid", sourcePid));
        }

        if (promotions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "promotions", promotions));
        }

        if (contentManifestIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contentManifestIds", contentManifestIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectPromoteGetValidateBeforeCall(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourcePid' is set
        if (sourcePid == null) {
            throw new ApiException("Missing the required parameter 'sourcePid' when calling projectPromoteGet(Async)");
        }

        return projectPromoteGetCall(sourcePid, promotions, contentManifestIds, _callback);

    }


    private ApiResponse<PromoteRealmResponseOld> projectPromoteGetWithHttpInfo(String sourcePid, List<String> promotions, List<String> contentManifestIds) throws ApiException {
        okhttp3.Call localVarCall = projectPromoteGetValidateBeforeCall(sourcePid, promotions, contentManifestIds, null);
        Type localVarReturnType = new TypeToken<PromoteRealmResponseOld>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call projectPromoteGetAsync(String sourcePid, List<String> promotions, List<String> contentManifestIds, final ApiCallback<PromoteRealmResponseOld> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectPromoteGetValidateBeforeCall(sourcePid, promotions, contentManifestIds, _callback);
        Type localVarReturnType = new TypeToken<PromoteRealmResponseOld>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProjectPromoteGetRequestBuilder {
        private final String sourcePid;
        private List<String> promotions;
        private List<String> contentManifestIds;

        private ProjectPromoteGetRequestBuilder(String sourcePid) {
            this.sourcePid = sourcePid;
        }

        /**
         * Set promotions
         * @param promotions  (optional)
         * @return ProjectPromoteGetRequestBuilder
         */
        public ProjectPromoteGetRequestBuilder promotions(List<String> promotions) {
            this.promotions = promotions;
            return this;
        }
        
        /**
         * Set contentManifestIds
         * @param contentManifestIds  (optional)
         * @return ProjectPromoteGetRequestBuilder
         */
        public ProjectPromoteGetRequestBuilder contentManifestIds(List<String> contentManifestIds) {
            this.contentManifestIds = contentManifestIds;
            return this;
        }
        
        /**
         * Build call for projectPromoteGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return projectPromoteGetCall(sourcePid, promotions, contentManifestIds, _callback);
        }


        /**
         * Execute projectPromoteGet request
         * @return PromoteRealmResponseOld
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public PromoteRealmResponseOld execute() throws ApiException {
            ApiResponse<PromoteRealmResponseOld> localVarResp = projectPromoteGetWithHttpInfo(sourcePid, promotions, contentManifestIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute projectPromoteGet request with HTTP info returned
         * @return ApiResponse&lt;PromoteRealmResponseOld&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromoteRealmResponseOld> executeWithHttpInfo() throws ApiException {
            return projectPromoteGetWithHttpInfo(sourcePid, promotions, contentManifestIds);
        }

        /**
         * Execute projectPromoteGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromoteRealmResponseOld> _callback) throws ApiException {
            return projectPromoteGetAsync(sourcePid, promotions, contentManifestIds, _callback);
        }
    }

    /**
     * 
     * 
     * @param sourcePid  (required)
     * @return ProjectPromoteGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ProjectPromoteGetRequestBuilder projectPromoteGet(String sourcePid) throws IllegalArgumentException {
        if (sourcePid == null) throw new IllegalArgumentException("\"sourcePid\" is required but got null");
            

        return new ProjectPromoteGetRequestBuilder(sourcePid);
    }
    private okhttp3.Call renameProjectRealmsCall(RenameProjectRequest renameProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameProjectRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project/rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameProjectRealmsValidateBeforeCall(RenameProjectRequest renameProjectRequest, final ApiCallback _callback) throws ApiException {
        return renameProjectRealmsCall(renameProjectRequest, _callback);

    }


    private ApiResponse<CommonResponse> renameProjectRealmsWithHttpInfo(RenameProjectRequest renameProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = renameProjectRealmsValidateBeforeCall(renameProjectRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameProjectRealmsAsync(RenameProjectRequest renameProjectRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameProjectRealmsValidateBeforeCall(renameProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameProjectRealmsRequestBuilder {
        private final String projectId;
        private final String newName;

        private RenameProjectRealmsRequestBuilder(String projectId, String newName) {
            this.projectId = projectId;
            this.newName = newName;
        }

        /**
         * Build call for renameProjectRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RenameProjectRequest renameProjectRequest = buildBodyParams();
            return renameProjectRealmsCall(renameProjectRequest, _callback);
        }

        private RenameProjectRequest buildBodyParams() {
            RenameProjectRequest renameProjectRequest = new RenameProjectRequest();
            renameProjectRequest.projectId(this.projectId);
            renameProjectRequest.newName(this.newName);
            return renameProjectRequest;
        }

        /**
         * Execute renameProjectRealms request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            RenameProjectRequest renameProjectRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = renameProjectRealmsWithHttpInfo(renameProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameProjectRealms request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            RenameProjectRequest renameProjectRequest = buildBodyParams();
            return renameProjectRealmsWithHttpInfo(renameProjectRequest);
        }

        /**
         * Execute renameProjectRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            RenameProjectRequest renameProjectRequest = buildBodyParams();
            return renameProjectRealmsAsync(renameProjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return RenameProjectRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RenameProjectRealmsRequestBuilder renameProjectRealms(String projectId, String newName) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (newName == null) throw new IllegalArgumentException("\"newName\" is required but got null");
            

        return new RenameProjectRealmsRequestBuilder(projectId, newName);
    }
    private okhttp3.Call updateConfigCall(RealmConfigSaveRequest realmConfigSaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = realmConfigSaveRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigValidateBeforeCall(RealmConfigSaveRequest realmConfigSaveRequest, final ApiCallback _callback) throws ApiException {
        return updateConfigCall(realmConfigSaveRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateConfigWithHttpInfo(RealmConfigSaveRequest realmConfigSaveRequest) throws ApiException {
        okhttp3.Call localVarCall = updateConfigValidateBeforeCall(realmConfigSaveRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigAsync(RealmConfigSaveRequest realmConfigSaveRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigValidateBeforeCall(realmConfigSaveRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateConfigRequestBuilder {
        private final Map<String, String> config;

        private UpdateConfigRequestBuilder(Map<String, String> config) {
            this.config = config;
        }

        /**
         * Build call for updateConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RealmConfigSaveRequest realmConfigSaveRequest = buildBodyParams();
            return updateConfigCall(realmConfigSaveRequest, _callback);
        }

        private RealmConfigSaveRequest buildBodyParams() {
            RealmConfigSaveRequest realmConfigSaveRequest = new RealmConfigSaveRequest();
            realmConfigSaveRequest.config(this.config);
            return realmConfigSaveRequest;
        }

        /**
         * Execute updateConfig request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            RealmConfigSaveRequest realmConfigSaveRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateConfigWithHttpInfo(realmConfigSaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateConfig request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            RealmConfigSaveRequest realmConfigSaveRequest = buildBodyParams();
            return updateConfigWithHttpInfo(realmConfigSaveRequest);
        }

        /**
         * Execute updateConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            RealmConfigSaveRequest realmConfigSaveRequest = buildBodyParams();
            return updateConfigAsync(realmConfigSaveRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigRequestBuilder updateConfig(Map<String, String> config) throws IllegalArgumentException {
        if (config == null) throw new IllegalArgumentException("\"config\" is required but got null");
        return new UpdateConfigRequestBuilder(config);
    }
    private okhttp3.Call updateProjectRealmsCall(UnarchiveProjectRequest unarchiveProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unarchiveProjectRequest;

        // create path and map variables
        String localVarPath = "/basic/realms/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectRealmsValidateBeforeCall(UnarchiveProjectRequest unarchiveProjectRequest, final ApiCallback _callback) throws ApiException {
        return updateProjectRealmsCall(unarchiveProjectRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateProjectRealmsWithHttpInfo(UnarchiveProjectRequest unarchiveProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectRealmsValidateBeforeCall(unarchiveProjectRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectRealmsAsync(UnarchiveProjectRequest unarchiveProjectRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectRealmsValidateBeforeCall(unarchiveProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectRealmsRequestBuilder {
        private final String projectId;

        private UpdateProjectRealmsRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Build call for updateProjectRealms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UnarchiveProjectRequest unarchiveProjectRequest = buildBodyParams();
            return updateProjectRealmsCall(unarchiveProjectRequest, _callback);
        }

        private UnarchiveProjectRequest buildBodyParams() {
            UnarchiveProjectRequest unarchiveProjectRequest = new UnarchiveProjectRequest();
            unarchiveProjectRequest.projectId(this.projectId);
            return unarchiveProjectRequest;
        }

        /**
         * Execute updateProjectRealms request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            UnarchiveProjectRequest unarchiveProjectRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateProjectRealmsWithHttpInfo(unarchiveProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectRealms request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            UnarchiveProjectRequest unarchiveProjectRequest = buildBodyParams();
            return updateProjectRealmsWithHttpInfo(unarchiveProjectRequest);
        }

        /**
         * Execute updateProjectRealms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            UnarchiveProjectRequest unarchiveProjectRequest = buildBodyParams();
            return updateProjectRealmsAsync(unarchiveProjectRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateProjectRealmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectRealmsRequestBuilder updateProjectRealms(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new UpdateProjectRealmsRequestBuilder(projectId);
    }
}
