/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountAvailableResponse;
import com.konfigthis.client.model.AccountPersonallyIdentifiableInformationResponse;
import com.konfigthis.client.model.AccountPlayerView;
import com.konfigthis.client.model.AccountPortalView;
import com.konfigthis.client.model.AccountRegistration;
import com.konfigthis.client.model.AccountSearchResponse;
import com.konfigthis.client.model.AccountUpdate;
import com.konfigthis.client.model.AddAccountRequest;
import com.konfigthis.client.model.AdminUserRolesView;
import com.konfigthis.client.model.AvailableRolesResponse;
import com.konfigthis.client.model.DeleteDevicesRequest;
import com.konfigthis.client.model.DeleteThirdPartyAssociation;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.GamerTagAssociation;
import com.konfigthis.client.model.GetAdminsResponse;
import com.konfigthis.client.model.PasswordUpdateConfirmation;
import com.konfigthis.client.model.PasswordUpdateRequest;
import com.konfigthis.client.model.ThirdPartyAssociation;
import com.konfigthis.client.model.ThirdPartyAvailableRequest;
import com.konfigthis.client.model.TransferThirdPartyAssociation;
import com.konfigthis.client.model.UpdateRole;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkAvailabilityCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/available/device-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAvailabilityValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling checkAvailability(Async)");
        }

        return checkAvailabilityCall(deviceId, _callback);

    }


    private ApiResponse<AccountAvailableResponse> checkAvailabilityWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = checkAvailabilityValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkAvailabilityAsync(String deviceId, final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAvailabilityValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckAvailabilityRequestBuilder {
        private final String deviceId;

        private CheckAvailabilityRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for checkAvailability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAvailabilityCall(deviceId, _callback);
        }


        /**
         * Execute checkAvailability request
         * @return AccountAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountAvailableResponse execute() throws ApiException {
            ApiResponse<AccountAvailableResponse> localVarResp = checkAvailabilityWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkAvailability request with HTTP info returned
         * @return ApiResponse&lt;AccountAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountAvailableResponse> executeWithHttpInfo() throws ApiException {
            return checkAvailabilityWithHttpInfo(deviceId);
        }

        /**
         * Execute checkAvailability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {
            return checkAvailabilityAsync(deviceId, _callback);
        }
    }

    /**
     * 
     * 
     * @param deviceId  (required)
     * @return CheckAvailabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckAvailabilityRequestBuilder checkAvailability(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new CheckAvailabilityRequestBuilder(deviceId);
    }
    private okhttp3.Call checkAvailability_0Call(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAvailability_0ValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling checkAvailability_0(Async)");
        }

        return checkAvailability_0Call(email, _callback);

    }


    private ApiResponse<AccountAvailableResponse> checkAvailability_0WithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = checkAvailability_0ValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkAvailability_0Async(String email, final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAvailability_0ValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckAvailability0RequestBuilder {
        private final String email;

        private CheckAvailability0RequestBuilder(String email) {
            this.email = email;
        }

        /**
         * Build call for checkAvailability_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAvailability_0Call(email, _callback);
        }


        /**
         * Execute checkAvailability_0 request
         * @return AccountAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountAvailableResponse execute() throws ApiException {
            ApiResponse<AccountAvailableResponse> localVarResp = checkAvailability_0WithHttpInfo(email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkAvailability_0 request with HTTP info returned
         * @return ApiResponse&lt;AccountAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountAvailableResponse> executeWithHttpInfo() throws ApiException {
            return checkAvailability_0WithHttpInfo(email);
        }

        /**
         * Execute checkAvailability_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {
            return checkAvailability_0Async(email, _callback);
        }
    }

    /**
     * 
     * 
     * @param email  (required)
     * @return CheckAvailability0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckAvailability0RequestBuilder checkAvailability_0(String email) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CheckAvailability0RequestBuilder(email);
    }
    private okhttp3.Call checkThirdPartyAvailabilityCall(String thirdParty, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/available/third-party";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thirdParty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdParty", thirdParty));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkThirdPartyAvailabilityValidateBeforeCall(String thirdParty, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thirdParty' is set
        if (thirdParty == null) {
            throw new ApiException("Missing the required parameter 'thirdParty' when calling checkThirdPartyAvailability(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling checkThirdPartyAvailability(Async)");
        }

        return checkThirdPartyAvailabilityCall(thirdParty, token, _callback);

    }


    private ApiResponse<AccountAvailableResponse> checkThirdPartyAvailabilityWithHttpInfo(String thirdParty, String token) throws ApiException {
        okhttp3.Call localVarCall = checkThirdPartyAvailabilityValidateBeforeCall(thirdParty, token, null);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkThirdPartyAvailabilityAsync(String thirdParty, String token, final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkThirdPartyAvailabilityValidateBeforeCall(thirdParty, token, _callback);
        Type localVarReturnType = new TypeToken<AccountAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckThirdPartyAvailabilityRequestBuilder {
        private final String thirdParty;
        private final String token;

        private CheckThirdPartyAvailabilityRequestBuilder(String thirdParty, String token) {
            this.thirdParty = thirdParty;
            this.token = token;
        }

        /**
         * Build call for checkThirdPartyAvailability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkThirdPartyAvailabilityCall(thirdParty, token, _callback);
        }


        /**
         * Execute checkThirdPartyAvailability request
         * @return AccountAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountAvailableResponse execute() throws ApiException {
            ApiResponse<AccountAvailableResponse> localVarResp = checkThirdPartyAvailabilityWithHttpInfo(thirdParty, token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkThirdPartyAvailability request with HTTP info returned
         * @return ApiResponse&lt;AccountAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountAvailableResponse> executeWithHttpInfo() throws ApiException {
            return checkThirdPartyAvailabilityWithHttpInfo(thirdParty, token);
        }

        /**
         * Execute checkThirdPartyAvailability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountAvailableResponse> _callback) throws ApiException {
            return checkThirdPartyAvailabilityAsync(thirdParty, token, _callback);
        }
    }

    /**
     * 
     * 
     * @param thirdParty  (required)
     * @param token  (required)
     * @return CheckThirdPartyAvailabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckThirdPartyAvailabilityRequestBuilder checkThirdPartyAvailability(String thirdParty, String token) throws IllegalArgumentException {
        if (thirdParty == null) throw new IllegalArgumentException("\"thirdParty\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new CheckThirdPartyAvailabilityRequestBuilder(thirdParty, token);
    }
    private okhttp3.Call createAdminUserCall(AddAccountRequest addAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccountRequest;

        // create path and map variables
        String localVarPath = "/basic/accounts/admin/admin-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdminUserValidateBeforeCall(AddAccountRequest addAccountRequest, final ApiCallback _callback) throws ApiException {
        return createAdminUserCall(addAccountRequest, _callback);

    }


    private ApiResponse<AccountPortalView> createAdminUserWithHttpInfo(AddAccountRequest addAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createAdminUserValidateBeforeCall(addAccountRequest, null);
        Type localVarReturnType = new TypeToken<AccountPortalView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAdminUserAsync(AddAccountRequest addAccountRequest, final ApiCallback<AccountPortalView> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdminUserValidateBeforeCall(addAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountPortalView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAdminUserRequestBuilder {
        private final String email;
        private String role;

        private CreateAdminUserRequestBuilder(String email) {
            this.email = email;
        }

        /**
         * Set role
         * @param role  (optional)
         * @return CreateAdminUserRequestBuilder
         */
        public CreateAdminUserRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for createAdminUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddAccountRequest addAccountRequest = buildBodyParams();
            return createAdminUserCall(addAccountRequest, _callback);
        }

        private AddAccountRequest buildBodyParams() {
            AddAccountRequest addAccountRequest = new AddAccountRequest();
            addAccountRequest.email(this.email);
            addAccountRequest.role(this.role);
            return addAccountRequest;
        }

        /**
         * Execute createAdminUser request
         * @return AccountPortalView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPortalView execute() throws ApiException {
            AddAccountRequest addAccountRequest = buildBodyParams();
            ApiResponse<AccountPortalView> localVarResp = createAdminUserWithHttpInfo(addAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAdminUser request with HTTP info returned
         * @return ApiResponse&lt;AccountPortalView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPortalView> executeWithHttpInfo() throws ApiException {
            AddAccountRequest addAccountRequest = buildBodyParams();
            return createAdminUserWithHttpInfo(addAccountRequest);
        }

        /**
         * Execute createAdminUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPortalView> _callback) throws ApiException {
            AddAccountRequest addAccountRequest = buildBodyParams();
            return createAdminUserAsync(addAccountRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateAdminUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateAdminUserRequestBuilder createAdminUser(String email) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CreateAdminUserRequestBuilder(email);
    }
    private okhttp3.Call deleteAdminScopeCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/scope"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdminScopeValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteAdminScope(Async)");
        }

        return deleteAdminScopeCall(objectId, _callback);

    }


    private ApiResponse<EmptyResponse> deleteAdminScopeWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteAdminScopeValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAdminScopeAsync(String objectId, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdminScopeValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAdminScopeRequestBuilder {
        private final String objectId;

        private DeleteAdminScopeRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for deleteAdminScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAdminScopeCall(objectId, _callback);
        }


        /**
         * Execute deleteAdminScope request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ApiResponse<EmptyResponse> localVarResp = deleteAdminScopeWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAdminScope request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            return deleteAdminScopeWithHttpInfo(objectId);
        }

        /**
         * Execute deleteAdminScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            return deleteAdminScopeAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteAdminScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAdminScopeRequestBuilder deleteAdminScope(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteAdminScopeRequestBuilder(objectId);
    }
    private okhttp3.Call deleteThirdPartyCall(ThirdPartyAvailableRequest thirdPartyAvailableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = thirdPartyAvailableRequest;

        // create path and map variables
        String localVarPath = "/basic/accounts/me/third-party";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThirdPartyValidateBeforeCall(ThirdPartyAvailableRequest thirdPartyAvailableRequest, final ApiCallback _callback) throws ApiException {
        return deleteThirdPartyCall(thirdPartyAvailableRequest, _callback);

    }


    private ApiResponse<AccountPlayerView> deleteThirdPartyWithHttpInfo(ThirdPartyAvailableRequest thirdPartyAvailableRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteThirdPartyValidateBeforeCall(thirdPartyAvailableRequest, null);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteThirdPartyAsync(ThirdPartyAvailableRequest thirdPartyAvailableRequest, final ApiCallback<AccountPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThirdPartyValidateBeforeCall(thirdPartyAvailableRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteThirdPartyRequestBuilder {
        private final String thirdParty;
        private final String token;

        private DeleteThirdPartyRequestBuilder(String thirdParty, String token) {
            this.thirdParty = thirdParty;
            this.token = token;
        }

        /**
         * Build call for deleteThirdParty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ThirdPartyAvailableRequest thirdPartyAvailableRequest = buildBodyParams();
            return deleteThirdPartyCall(thirdPartyAvailableRequest, _callback);
        }

        private ThirdPartyAvailableRequest buildBodyParams() {
            ThirdPartyAvailableRequest thirdPartyAvailableRequest = new ThirdPartyAvailableRequest();
            thirdPartyAvailableRequest.thirdParty(this.thirdParty);
            thirdPartyAvailableRequest.token(this.token);
            return thirdPartyAvailableRequest;
        }

        /**
         * Execute deleteThirdParty request
         * @return AccountPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPlayerView execute() throws ApiException {
            ThirdPartyAvailableRequest thirdPartyAvailableRequest = buildBodyParams();
            ApiResponse<AccountPlayerView> localVarResp = deleteThirdPartyWithHttpInfo(thirdPartyAvailableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteThirdParty request with HTTP info returned
         * @return ApiResponse&lt;AccountPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPlayerView> executeWithHttpInfo() throws ApiException {
            ThirdPartyAvailableRequest thirdPartyAvailableRequest = buildBodyParams();
            return deleteThirdPartyWithHttpInfo(thirdPartyAvailableRequest);
        }

        /**
         * Execute deleteThirdParty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {
            ThirdPartyAvailableRequest thirdPartyAvailableRequest = buildBodyParams();
            return deleteThirdPartyAsync(thirdPartyAvailableRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return DeleteThirdPartyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThirdPartyRequestBuilder deleteThirdParty(String thirdParty, String token) throws IllegalArgumentException {
        if (thirdParty == null) throw new IllegalArgumentException("\"thirdParty\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new DeleteThirdPartyRequestBuilder(thirdParty, token);
    }
    private okhttp3.Call deleteThirdPartyAdminCall(String objectId, DeleteThirdPartyAssociation deleteThirdPartyAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteThirdPartyAssociation;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/third-party"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThirdPartyAdminValidateBeforeCall(String objectId, DeleteThirdPartyAssociation deleteThirdPartyAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteThirdPartyAdmin(Async)");
        }

        return deleteThirdPartyAdminCall(objectId, deleteThirdPartyAssociation, _callback);

    }


    private ApiResponse<EmptyResponse> deleteThirdPartyAdminWithHttpInfo(String objectId, DeleteThirdPartyAssociation deleteThirdPartyAssociation) throws ApiException {
        okhttp3.Call localVarCall = deleteThirdPartyAdminValidateBeforeCall(objectId, deleteThirdPartyAssociation, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteThirdPartyAdminAsync(String objectId, DeleteThirdPartyAssociation deleteThirdPartyAssociation, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThirdPartyAdminValidateBeforeCall(objectId, deleteThirdPartyAssociation, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteThirdPartyAdminRequestBuilder {
        private final String objectId;
        private String thirdParty;
        private String userAppId;

        private DeleteThirdPartyAdminRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set thirdParty
         * @param thirdParty  (optional)
         * @return DeleteThirdPartyAdminRequestBuilder
         */
        public DeleteThirdPartyAdminRequestBuilder thirdParty(String thirdParty) {
            this.thirdParty = thirdParty;
            return this;
        }
        
        /**
         * Set userAppId
         * @param userAppId  (optional)
         * @return DeleteThirdPartyAdminRequestBuilder
         */
        public DeleteThirdPartyAdminRequestBuilder userAppId(String userAppId) {
            this.userAppId = userAppId;
            return this;
        }
        
        /**
         * Build call for deleteThirdPartyAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteThirdPartyAssociation deleteThirdPartyAssociation = buildBodyParams();
            return deleteThirdPartyAdminCall(objectId, deleteThirdPartyAssociation, _callback);
        }

        private DeleteThirdPartyAssociation buildBodyParams() {
            DeleteThirdPartyAssociation deleteThirdPartyAssociation = new DeleteThirdPartyAssociation();
            deleteThirdPartyAssociation.thirdParty(this.thirdParty);
            deleteThirdPartyAssociation.userAppId(this.userAppId);
            return deleteThirdPartyAssociation;
        }

        /**
         * Execute deleteThirdPartyAdmin request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            DeleteThirdPartyAssociation deleteThirdPartyAssociation = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = deleteThirdPartyAdminWithHttpInfo(objectId, deleteThirdPartyAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteThirdPartyAdmin request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            DeleteThirdPartyAssociation deleteThirdPartyAssociation = buildBodyParams();
            return deleteThirdPartyAdminWithHttpInfo(objectId, deleteThirdPartyAssociation);
        }

        /**
         * Execute deleteThirdPartyAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            DeleteThirdPartyAssociation deleteThirdPartyAssociation = buildBodyParams();
            return deleteThirdPartyAdminAsync(objectId, deleteThirdPartyAssociation, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteThirdPartyAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThirdPartyAdminRequestBuilder deleteThirdPartyAdmin(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteThirdPartyAdminRequestBuilder(objectId);
    }
    private okhttp3.Call findAccountsCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAccountsValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling findAccounts(Async)");
        }

        return findAccountsCall(query, _callback);

    }


    private ApiResponse<Account> findAccountsWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = findAccountsValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findAccountsAsync(String query, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAccountsValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindAccountsRequestBuilder {
        private final String query;

        private FindAccountsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Build call for findAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findAccountsCall(query, _callback);
        }


        /**
         * Execute findAccounts request
         * @return Account
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Account execute() throws ApiException {
            ApiResponse<Account> localVarResp = findAccountsWithHttpInfo(query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findAccounts request with HTTP info returned
         * @return ApiResponse&lt;Account&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Account> executeWithHttpInfo() throws ApiException {
            return findAccountsWithHttpInfo(query);
        }

        /**
         * Execute findAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Account> _callback) throws ApiException {
            return findAccountsAsync(query, _callback);
        }
    }

    /**
     * 
     * 
     * @param query  (required)
     * @return FindAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FindAccountsRequestBuilder findAccounts(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new FindAccountsRequestBuilder(query);
    }
    private okhttp3.Call getAdminUsersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/admin/admin-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAdminUsersCall(_callback);

    }


    private ApiResponse<GetAdminsResponse> getAdminUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAdminUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAdminsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdminUsersAsync(final ApiCallback<GetAdminsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAdminsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdminUsersRequestBuilder {

        private GetAdminUsersRequestBuilder() {
        }

        /**
         * Build call for getAdminUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdminUsersCall(_callback);
        }


        /**
         * Execute getAdminUsers request
         * @return GetAdminsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetAdminsResponse execute() throws ApiException {
            ApiResponse<GetAdminsResponse> localVarResp = getAdminUsersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdminUsers request with HTTP info returned
         * @return ApiResponse&lt;GetAdminsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAdminsResponse> executeWithHttpInfo() throws ApiException {
            return getAdminUsersWithHttpInfo();
        }

        /**
         * Execute getAdminUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAdminsResponse> _callback) throws ApiException {
            return getAdminUsersAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetAdminUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetAdminUsersRequestBuilder getAdminUsers() throws IllegalArgumentException {
        return new GetAdminUsersRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/admin/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDetailsCall(_callback);

    }


    private ApiResponse<AccountPortalView> getDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountPortalView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(final ApiCallback<AccountPortalView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountPortalView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {

        private GetDetailsRequestBuilder() {
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(_callback);
        }


        /**
         * Execute getDetails request
         * @return AccountPortalView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPortalView execute() throws ApiException {
            ApiResponse<AccountPortalView> localVarResp = getDetailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;AccountPortalView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPortalView> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo();
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPortalView> _callback) throws ApiException {
            return getDetailsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails() throws IllegalArgumentException {
        return new GetDetailsRequestBuilder();
    }
    private okhttp3.Call getObjectAvailableRolesCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/available-roles"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectAvailableRolesValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectAvailableRoles(Async)");
        }

        return getObjectAvailableRolesCall(objectId, _callback);

    }


    private ApiResponse<AvailableRolesResponse> getObjectAvailableRolesWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectAvailableRolesValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<AvailableRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectAvailableRolesAsync(String objectId, final ApiCallback<AvailableRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectAvailableRolesValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<AvailableRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectAvailableRolesRequestBuilder {
        private final String objectId;

        private GetObjectAvailableRolesRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectAvailableRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectAvailableRolesCall(objectId, _callback);
        }


        /**
         * Execute getObjectAvailableRoles request
         * @return AvailableRolesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AvailableRolesResponse execute() throws ApiException {
            ApiResponse<AvailableRolesResponse> localVarResp = getObjectAvailableRolesWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectAvailableRoles request with HTTP info returned
         * @return ApiResponse&lt;AvailableRolesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailableRolesResponse> executeWithHttpInfo() throws ApiException {
            return getObjectAvailableRolesWithHttpInfo(objectId);
        }

        /**
         * Execute getObjectAvailableRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailableRolesResponse> _callback) throws ApiException {
            return getObjectAvailableRolesAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectAvailableRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectAvailableRolesRequestBuilder getObjectAvailableRoles(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectAvailableRolesRequestBuilder(objectId);
    }
    private okhttp3.Call getPersonallyIdentifiableInformationCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/get-personally-identifiable-information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonallyIdentifiableInformationValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getPersonallyIdentifiableInformation(Async)");
        }

        return getPersonallyIdentifiableInformationCall(query, _callback);

    }


    private ApiResponse<AccountPersonallyIdentifiableInformationResponse> getPersonallyIdentifiableInformationWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = getPersonallyIdentifiableInformationValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<AccountPersonallyIdentifiableInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonallyIdentifiableInformationAsync(String query, final ApiCallback<AccountPersonallyIdentifiableInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonallyIdentifiableInformationValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<AccountPersonallyIdentifiableInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonallyIdentifiableInformationRequestBuilder {
        private final String query;

        private GetPersonallyIdentifiableInformationRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Build call for getPersonallyIdentifiableInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonallyIdentifiableInformationCall(query, _callback);
        }


        /**
         * Execute getPersonallyIdentifiableInformation request
         * @return AccountPersonallyIdentifiableInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPersonallyIdentifiableInformationResponse execute() throws ApiException {
            ApiResponse<AccountPersonallyIdentifiableInformationResponse> localVarResp = getPersonallyIdentifiableInformationWithHttpInfo(query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonallyIdentifiableInformation request with HTTP info returned
         * @return ApiResponse&lt;AccountPersonallyIdentifiableInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPersonallyIdentifiableInformationResponse> executeWithHttpInfo() throws ApiException {
            return getPersonallyIdentifiableInformationWithHttpInfo(query);
        }

        /**
         * Execute getPersonallyIdentifiableInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPersonallyIdentifiableInformationResponse> _callback) throws ApiException {
            return getPersonallyIdentifiableInformationAsync(query, _callback);
        }
    }

    /**
     * 
     * 
     * @param query  (required)
     * @return GetPersonallyIdentifiableInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonallyIdentifiableInformationRequestBuilder getPersonallyIdentifiableInformation(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new GetPersonallyIdentifiableInformationRequestBuilder(query);
    }
    private okhttp3.Call getUserInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserInfoCall(_callback);

    }


    private ApiResponse<AccountPlayerView> getUserInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserInfoAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserInfoRequestBuilder {

        private GetUserInfoRequestBuilder() {
        }

        /**
         * Build call for getUserInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInfoCall(_callback);
        }


        /**
         * Execute getUserInfo request
         * @return AccountPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPlayerView execute() throws ApiException {
            ApiResponse<AccountPlayerView> localVarResp = getUserInfoWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserInfo request with HTTP info returned
         * @return ApiResponse&lt;AccountPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPlayerView> executeWithHttpInfo() throws ApiException {
            return getUserInfoWithHttpInfo();
        }

        /**
         * Execute getUserInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {
            return getUserInfoAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetUserInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetUserInfoRequestBuilder getUserInfo() throws IllegalArgumentException {
        return new GetUserInfoRequestBuilder();
    }
    private okhttp3.Call listRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/history/account/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listRolesCall(_callback);

    }


    private ApiResponse<AdminUserRolesView> listRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AdminUserRolesView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRolesAsync(final ApiCallback<AdminUserRolesView> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AdminUserRolesView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRolesRequestBuilder {

        private ListRolesRequestBuilder() {
        }

        /**
         * Build call for listRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRolesCall(_callback);
        }


        /**
         * Execute listRoles request
         * @return AdminUserRolesView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AdminUserRolesView execute() throws ApiException {
            ApiResponse<AdminUserRolesView> localVarResp = listRolesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRoles request with HTTP info returned
         * @return ApiResponse&lt;AdminUserRolesView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminUserRolesView> executeWithHttpInfo() throws ApiException {
            return listRolesWithHttpInfo();
        }

        /**
         * Execute listRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminUserRolesView> _callback) throws ApiException {
            return listRolesAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return ListRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListRolesRequestBuilder listRoles() throws IllegalArgumentException {
        return new ListRolesRequestBuilder();
    }
    private okhttp3.Call registerNewAccountCall(AccountRegistration accountRegistration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountRegistration;

        // create path and map variables
        String localVarPath = "/basic/accounts/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerNewAccountValidateBeforeCall(AccountRegistration accountRegistration, final ApiCallback _callback) throws ApiException {
        return registerNewAccountCall(accountRegistration, _callback);

    }


    private ApiResponse<AccountPlayerView> registerNewAccountWithHttpInfo(AccountRegistration accountRegistration) throws ApiException {
        okhttp3.Call localVarCall = registerNewAccountValidateBeforeCall(accountRegistration, null);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerNewAccountAsync(AccountRegistration accountRegistration, final ApiCallback<AccountPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerNewAccountValidateBeforeCall(accountRegistration, _callback);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterNewAccountRequestBuilder {
        private final String email;
        private final String password;

        private RegisterNewAccountRequestBuilder(String email, String password) {
            this.email = email;
            this.password = password;
        }

        /**
         * Build call for registerNewAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountRegistration accountRegistration = buildBodyParams();
            return registerNewAccountCall(accountRegistration, _callback);
        }

        private AccountRegistration buildBodyParams() {
            AccountRegistration accountRegistration = new AccountRegistration();
            accountRegistration.email(this.email);
            accountRegistration.password(this.password);
            return accountRegistration;
        }

        /**
         * Execute registerNewAccount request
         * @return AccountPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPlayerView execute() throws ApiException {
            AccountRegistration accountRegistration = buildBodyParams();
            ApiResponse<AccountPlayerView> localVarResp = registerNewAccountWithHttpInfo(accountRegistration);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerNewAccount request with HTTP info returned
         * @return ApiResponse&lt;AccountPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPlayerView> executeWithHttpInfo() throws ApiException {
            AccountRegistration accountRegistration = buildBodyParams();
            return registerNewAccountWithHttpInfo(accountRegistration);
        }

        /**
         * Execute registerNewAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {
            AccountRegistration accountRegistration = buildBodyParams();
            return registerNewAccountAsync(accountRegistration, _callback);
        }
    }

    /**
     * 
     * 
     * @return RegisterNewAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RegisterNewAccountRequestBuilder registerNewAccount(String email, String password) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new RegisterNewAccountRequestBuilder(email, password);
    }
    private okhttp3.Call removeAdminForgetCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/forget"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAdminForgetValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeAdminForget(Async)");
        }

        return removeAdminForgetCall(objectId, _callback);

    }


    private ApiResponse<Account> removeAdminForgetWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = removeAdminForgetValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAdminForgetAsync(String objectId, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAdminForgetValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAdminForgetRequestBuilder {
        private final String objectId;

        private RemoveAdminForgetRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for removeAdminForget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAdminForgetCall(objectId, _callback);
        }


        /**
         * Execute removeAdminForget request
         * @return Account
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Account execute() throws ApiException {
            ApiResponse<Account> localVarResp = removeAdminForgetWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAdminForget request with HTTP info returned
         * @return ApiResponse&lt;Account&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Account> executeWithHttpInfo() throws ApiException {
            return removeAdminForgetWithHttpInfo(objectId);
        }

        /**
         * Execute removeAdminForget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Account> _callback) throws ApiException {
            return removeAdminForgetAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveAdminForgetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAdminForgetRequestBuilder removeAdminForget(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveAdminForgetRequestBuilder(objectId);
    }
    private okhttp3.Call removeDeviceCall(DeleteDevicesRequest deleteDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDevicesRequest;

        // create path and map variables
        String localVarPath = "/basic/accounts/me/device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDeviceValidateBeforeCall(DeleteDevicesRequest deleteDevicesRequest, final ApiCallback _callback) throws ApiException {
        return removeDeviceCall(deleteDevicesRequest, _callback);

    }


    private ApiResponse<AccountPlayerView> removeDeviceWithHttpInfo(DeleteDevicesRequest deleteDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeDeviceValidateBeforeCall(deleteDevicesRequest, null);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDeviceAsync(DeleteDevicesRequest deleteDevicesRequest, final ApiCallback<AccountPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDeviceValidateBeforeCall(deleteDevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDeviceRequestBuilder {
        private List<String> deviceIds;

        private RemoveDeviceRequestBuilder() {
        }

        /**
         * Set deviceIds
         * @param deviceIds  (optional)
         * @return RemoveDeviceRequestBuilder
         */
        public RemoveDeviceRequestBuilder deviceIds(List<String> deviceIds) {
            this.deviceIds = deviceIds;
            return this;
        }
        
        /**
         * Build call for removeDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteDevicesRequest deleteDevicesRequest = buildBodyParams();
            return removeDeviceCall(deleteDevicesRequest, _callback);
        }

        private DeleteDevicesRequest buildBodyParams() {
            DeleteDevicesRequest deleteDevicesRequest = new DeleteDevicesRequest();
            deleteDevicesRequest.deviceIds(this.deviceIds);
            return deleteDevicesRequest;
        }

        /**
         * Execute removeDevice request
         * @return AccountPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPlayerView execute() throws ApiException {
            DeleteDevicesRequest deleteDevicesRequest = buildBodyParams();
            ApiResponse<AccountPlayerView> localVarResp = removeDeviceWithHttpInfo(deleteDevicesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDevice request with HTTP info returned
         * @return ApiResponse&lt;AccountPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPlayerView> executeWithHttpInfo() throws ApiException {
            DeleteDevicesRequest deleteDevicesRequest = buildBodyParams();
            return removeDeviceWithHttpInfo(deleteDevicesRequest);
        }

        /**
         * Execute removeDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {
            DeleteDevicesRequest deleteDevicesRequest = buildBodyParams();
            return removeDeviceAsync(deleteDevicesRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return RemoveDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDeviceRequestBuilder removeDevice() throws IllegalArgumentException {
        return new RemoveDeviceRequestBuilder();
    }
    private okhttp3.Call removeRoleCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/role"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRoleValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeRole(Async)");
        }

        return removeRoleCall(objectId, _callback);

    }


    private ApiResponse<EmptyResponse> removeRoleWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = removeRoleValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeRoleAsync(String objectId, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRoleValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveRoleRequestBuilder {
        private final String objectId;

        private RemoveRoleRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for removeRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeRoleCall(objectId, _callback);
        }


        /**
         * Execute removeRole request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            ApiResponse<EmptyResponse> localVarResp = removeRoleWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeRole request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            return removeRoleWithHttpInfo(objectId);
        }

        /**
         * Execute removeRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            return removeRoleAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRoleRequestBuilder removeRole(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveRoleRequestBuilder(objectId);
    }
    private okhttp3.Call searchAccountsCall(String query, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/accounts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAccountsValidateBeforeCall(String query, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchAccounts(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling searchAccounts(Async)");
        }

        // verify the required parameter 'pagesize' is set
        if (pagesize == null) {
            throw new ApiException("Missing the required parameter 'pagesize' when calling searchAccounts(Async)");
        }

        return searchAccountsCall(query, page, pagesize, _callback);

    }


    private ApiResponse<AccountSearchResponse> searchAccountsWithHttpInfo(String query, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = searchAccountsValidateBeforeCall(query, page, pagesize, null);
        Type localVarReturnType = new TypeToken<AccountSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAccountsAsync(String query, Integer page, Integer pagesize, final ApiCallback<AccountSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAccountsValidateBeforeCall(query, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<AccountSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAccountsRequestBuilder {
        private final String query;
        private final Integer page;
        private final Integer pagesize;

        private SearchAccountsRequestBuilder(String query, Integer page, Integer pagesize) {
            this.query = query;
            this.page = page;
            this.pagesize = pagesize;
        }

        /**
         * Build call for searchAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAccountsCall(query, page, pagesize, _callback);
        }


        /**
         * Execute searchAccounts request
         * @return AccountSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountSearchResponse execute() throws ApiException {
            ApiResponse<AccountSearchResponse> localVarResp = searchAccountsWithHttpInfo(query, page, pagesize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAccounts request with HTTP info returned
         * @return ApiResponse&lt;AccountSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchAccountsWithHttpInfo(query, page, pagesize);
        }

        /**
         * Execute searchAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountSearchResponse> _callback) throws ApiException {
            return searchAccountsAsync(query, page, pagesize, _callback);
        }
    }

    /**
     * 
     * 
     * @param query  (required)
     * @param page  (required)
     * @param pagesize  (required)
     * @return SearchAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchAccountsRequestBuilder searchAccounts(String query, Integer page, Integer pagesize) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pagesize == null) throw new IllegalArgumentException("\"pagesize\" is required but got null");
        return new SearchAccountsRequestBuilder(query, page, pagesize);
    }
    private okhttp3.Call updateAccountInfoCall(AccountUpdate accountUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdate;

        // create path and map variables
        String localVarPath = "/basic/accounts/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountInfoValidateBeforeCall(AccountUpdate accountUpdate, final ApiCallback _callback) throws ApiException {
        return updateAccountInfoCall(accountUpdate, _callback);

    }


    private ApiResponse<AccountPlayerView> updateAccountInfoWithHttpInfo(AccountUpdate accountUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateAccountInfoValidateBeforeCall(accountUpdate, null);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAccountInfoAsync(AccountUpdate accountUpdate, final ApiCallback<AccountPlayerView> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountInfoValidateBeforeCall(accountUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountPlayerView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAccountInfoRequestBuilder {
        private final Boolean hasThirdPartyToken;
        private String thirdParty;
        private String country;
        private String language;
        private GamerTagAssociation gamerTagAssoc;
        private String token;
        private String deviceId;
        private String userName;

        private UpdateAccountInfoRequestBuilder(Boolean hasThirdPartyToken) {
            this.hasThirdPartyToken = hasThirdPartyToken;
        }

        /**
         * Set thirdParty
         * @param thirdParty  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder thirdParty(String thirdParty) {
            this.thirdParty = thirdParty;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set gamerTagAssoc
         * @param gamerTagAssoc  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder gamerTagAssoc(GamerTagAssociation gamerTagAssoc) {
            this.gamerTagAssoc = gamerTagAssoc;
            return this;
        }
        
        /**
         * Set token
         * @param token  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set userName
         * @param userName  (optional)
         * @return UpdateAccountInfoRequestBuilder
         */
        public UpdateAccountInfoRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Build call for updateAccountInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdate accountUpdate = buildBodyParams();
            return updateAccountInfoCall(accountUpdate, _callback);
        }

        private AccountUpdate buildBodyParams() {
            AccountUpdate accountUpdate = new AccountUpdate();
            accountUpdate.thirdParty(this.thirdParty);
            accountUpdate.hasThirdPartyToken(this.hasThirdPartyToken);
            accountUpdate.country(this.country);
            accountUpdate.language(this.language);
            accountUpdate.gamerTagAssoc(this.gamerTagAssoc);
            accountUpdate.token(this.token);
            accountUpdate.deviceId(this.deviceId);
            accountUpdate.userName(this.userName);
            return accountUpdate;
        }

        /**
         * Execute updateAccountInfo request
         * @return AccountPlayerView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AccountPlayerView execute() throws ApiException {
            AccountUpdate accountUpdate = buildBodyParams();
            ApiResponse<AccountPlayerView> localVarResp = updateAccountInfoWithHttpInfo(accountUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAccountInfo request with HTTP info returned
         * @return ApiResponse&lt;AccountPlayerView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountPlayerView> executeWithHttpInfo() throws ApiException {
            AccountUpdate accountUpdate = buildBodyParams();
            return updateAccountInfoWithHttpInfo(accountUpdate);
        }

        /**
         * Execute updateAccountInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountPlayerView> _callback) throws ApiException {
            AccountUpdate accountUpdate = buildBodyParams();
            return updateAccountInfoAsync(accountUpdate, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateAccountInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountInfoRequestBuilder updateAccountInfo(Boolean hasThirdPartyToken) throws IllegalArgumentException {
        if (hasThirdPartyToken == null) throw new IllegalArgumentException("\"hasThirdPartyToken\" is required but got null");
        return new UpdateAccountInfoRequestBuilder(hasThirdPartyToken);
    }
    private okhttp3.Call updateAdminScopeCall(String objectId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRole;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/scope"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdminScopeValidateBeforeCall(String objectId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateAdminScope(Async)");
        }

        return updateAdminScopeCall(objectId, updateRole, _callback);

    }


    private ApiResponse<EmptyResponse> updateAdminScopeWithHttpInfo(String objectId, UpdateRole updateRole) throws ApiException {
        okhttp3.Call localVarCall = updateAdminScopeValidateBeforeCall(objectId, updateRole, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdminScopeAsync(String objectId, UpdateRole updateRole, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdminScopeValidateBeforeCall(objectId, updateRole, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdminScopeRequestBuilder {
        private final String objectId;
        private String cid;
        private String realm;
        private String role;

        private UpdateAdminScopeRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set cid
         * @param cid  (optional)
         * @return UpdateAdminScopeRequestBuilder
         */
        public UpdateAdminScopeRequestBuilder cid(String cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set realm
         * @param realm  (optional)
         * @return UpdateAdminScopeRequestBuilder
         */
        public UpdateAdminScopeRequestBuilder realm(String realm) {
            this.realm = realm;
            return this;
        }
        
        /**
         * Set role
         * @param role  (optional)
         * @return UpdateAdminScopeRequestBuilder
         */
        public UpdateAdminScopeRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for updateAdminScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateAdminScopeCall(objectId, updateRole, _callback);
        }

        private UpdateRole buildBodyParams() {
            UpdateRole updateRole = new UpdateRole();
            updateRole.cid(this.cid);
            updateRole.realm(this.realm);
            updateRole.role(this.role);
            return updateRole;
        }

        /**
         * Execute updateAdminScope request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateAdminScopeWithHttpInfo(objectId, updateRole);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdminScope request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateAdminScopeWithHttpInfo(objectId, updateRole);
        }

        /**
         * Execute updateAdminScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateAdminScopeAsync(objectId, updateRole, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateAdminScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdminScopeRequestBuilder updateAdminScope(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateAdminScopeRequestBuilder(objectId);
    }
    private okhttp3.Call updatePasswordConfirmationCall(PasswordUpdateConfirmation passwordUpdateConfirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordUpdateConfirmation;

        // create path and map variables
        String localVarPath = "/basic/accounts/password-update/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordConfirmationValidateBeforeCall(PasswordUpdateConfirmation passwordUpdateConfirmation, final ApiCallback _callback) throws ApiException {
        return updatePasswordConfirmationCall(passwordUpdateConfirmation, _callback);

    }


    private ApiResponse<EmptyResponse> updatePasswordConfirmationWithHttpInfo(PasswordUpdateConfirmation passwordUpdateConfirmation) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordConfirmationValidateBeforeCall(passwordUpdateConfirmation, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePasswordConfirmationAsync(PasswordUpdateConfirmation passwordUpdateConfirmation, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordConfirmationValidateBeforeCall(passwordUpdateConfirmation, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePasswordConfirmationRequestBuilder {
        private final String code;
        private final String newPassword;
        private String email;

        private UpdatePasswordConfirmationRequestBuilder(String code, String newPassword) {
            this.code = code;
            this.newPassword = newPassword;
        }

        /**
         * Set email
         * @param email  (optional)
         * @return UpdatePasswordConfirmationRequestBuilder
         */
        public UpdatePasswordConfirmationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for updatePasswordConfirmation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PasswordUpdateConfirmation passwordUpdateConfirmation = buildBodyParams();
            return updatePasswordConfirmationCall(passwordUpdateConfirmation, _callback);
        }

        private PasswordUpdateConfirmation buildBodyParams() {
            PasswordUpdateConfirmation passwordUpdateConfirmation = new PasswordUpdateConfirmation();
            passwordUpdateConfirmation.code(this.code);
            passwordUpdateConfirmation.newPassword(this.newPassword);
            passwordUpdateConfirmation.email(this.email);
            return passwordUpdateConfirmation;
        }

        /**
         * Execute updatePasswordConfirmation request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            PasswordUpdateConfirmation passwordUpdateConfirmation = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updatePasswordConfirmationWithHttpInfo(passwordUpdateConfirmation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePasswordConfirmation request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            PasswordUpdateConfirmation passwordUpdateConfirmation = buildBodyParams();
            return updatePasswordConfirmationWithHttpInfo(passwordUpdateConfirmation);
        }

        /**
         * Execute updatePasswordConfirmation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            PasswordUpdateConfirmation passwordUpdateConfirmation = buildBodyParams();
            return updatePasswordConfirmationAsync(passwordUpdateConfirmation, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdatePasswordConfirmationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePasswordConfirmationRequestBuilder updatePasswordConfirmation(String code, String newPassword) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (newPassword == null) throw new IllegalArgumentException("\"newPassword\" is required but got null");
            

        return new UpdatePasswordConfirmationRequestBuilder(code, newPassword);
    }
    private okhttp3.Call updatePasswordInitCall(PasswordUpdateRequest passwordUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordUpdateRequest;

        // create path and map variables
        String localVarPath = "/basic/accounts/password-update/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordInitValidateBeforeCall(PasswordUpdateRequest passwordUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updatePasswordInitCall(passwordUpdateRequest, _callback);

    }


    private ApiResponse<EmptyResponse> updatePasswordInitWithHttpInfo(PasswordUpdateRequest passwordUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordInitValidateBeforeCall(passwordUpdateRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePasswordInitAsync(PasswordUpdateRequest passwordUpdateRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordInitValidateBeforeCall(passwordUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePasswordInitRequestBuilder {
        private final String email;
        private String codeType;

        private UpdatePasswordInitRequestBuilder(String email) {
            this.email = email;
        }

        /**
         * Set codeType
         * @param codeType  (optional)
         * @return UpdatePasswordInitRequestBuilder
         */
        public UpdatePasswordInitRequestBuilder codeType(String codeType) {
            this.codeType = codeType;
            return this;
        }
        
        /**
         * Build call for updatePasswordInit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PasswordUpdateRequest passwordUpdateRequest = buildBodyParams();
            return updatePasswordInitCall(passwordUpdateRequest, _callback);
        }

        private PasswordUpdateRequest buildBodyParams() {
            PasswordUpdateRequest passwordUpdateRequest = new PasswordUpdateRequest();
            passwordUpdateRequest.email(this.email);
            passwordUpdateRequest.codeType(this.codeType);
            return passwordUpdateRequest;
        }

        /**
         * Execute updatePasswordInit request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            PasswordUpdateRequest passwordUpdateRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updatePasswordInitWithHttpInfo(passwordUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePasswordInit request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            PasswordUpdateRequest passwordUpdateRequest = buildBodyParams();
            return updatePasswordInitWithHttpInfo(passwordUpdateRequest);
        }

        /**
         * Execute updatePasswordInit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            PasswordUpdateRequest passwordUpdateRequest = buildBodyParams();
            return updatePasswordInitAsync(passwordUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdatePasswordInitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePasswordInitRequestBuilder updatePasswordInit(String email) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new UpdatePasswordInitRequestBuilder(email);
    }
    private okhttp3.Call updateRoleCall(String objectId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRole;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/role"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String objectId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateRole(Async)");
        }

        return updateRoleCall(objectId, updateRole, _callback);

    }


    private ApiResponse<EmptyResponse> updateRoleWithHttpInfo(String objectId, UpdateRole updateRole) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(objectId, updateRole, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRoleAsync(String objectId, UpdateRole updateRole, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(objectId, updateRole, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRoleRequestBuilder {
        private final String objectId;
        private String cid;
        private String realm;
        private String role;

        private UpdateRoleRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set cid
         * @param cid  (optional)
         * @return UpdateRoleRequestBuilder
         */
        public UpdateRoleRequestBuilder cid(String cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set realm
         * @param realm  (optional)
         * @return UpdateRoleRequestBuilder
         */
        public UpdateRoleRequestBuilder realm(String realm) {
            this.realm = realm;
            return this;
        }
        
        /**
         * Set role
         * @param role  (optional)
         * @return UpdateRoleRequestBuilder
         */
        public UpdateRoleRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for updateRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateRoleCall(objectId, updateRole, _callback);
        }

        private UpdateRole buildBodyParams() {
            UpdateRole updateRole = new UpdateRole();
            updateRole.cid(this.cid);
            updateRole.realm(this.realm);
            updateRole.role(this.role);
            return updateRole;
        }

        /**
         * Execute updateRole request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateRoleWithHttpInfo(objectId, updateRole);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRole request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateRoleWithHttpInfo(objectId, updateRole);
        }

        /**
         * Execute updateRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            UpdateRole updateRole = buildBodyParams();
            return updateRoleAsync(objectId, updateRole, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleRequestBuilder updateRole(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateRoleRequestBuilder(objectId);
    }
    private okhttp3.Call updateThirdPartyAdminCall(String objectId, TransferThirdPartyAssociation transferThirdPartyAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferThirdPartyAssociation;

        // create path and map variables
        String localVarPath = "/object/accounts/{objectId}/admin/third-party"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThirdPartyAdminValidateBeforeCall(String objectId, TransferThirdPartyAssociation transferThirdPartyAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateThirdPartyAdmin(Async)");
        }

        return updateThirdPartyAdminCall(objectId, transferThirdPartyAssociation, _callback);

    }


    private ApiResponse<EmptyResponse> updateThirdPartyAdminWithHttpInfo(String objectId, TransferThirdPartyAssociation transferThirdPartyAssociation) throws ApiException {
        okhttp3.Call localVarCall = updateThirdPartyAdminValidateBeforeCall(objectId, transferThirdPartyAssociation, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateThirdPartyAdminAsync(String objectId, TransferThirdPartyAssociation transferThirdPartyAssociation, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThirdPartyAdminValidateBeforeCall(objectId, transferThirdPartyAssociation, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateThirdPartyAdminRequestBuilder {
        private final Integer fromAccountId;
        private final String objectId;
        private ThirdPartyAssociation thirdParty;

        private UpdateThirdPartyAdminRequestBuilder(Integer fromAccountId, String objectId) {
            this.fromAccountId = fromAccountId;
            this.objectId = objectId;
        }

        /**
         * Set thirdParty
         * @param thirdParty  (optional)
         * @return UpdateThirdPartyAdminRequestBuilder
         */
        public UpdateThirdPartyAdminRequestBuilder thirdParty(ThirdPartyAssociation thirdParty) {
            this.thirdParty = thirdParty;
            return this;
        }
        
        /**
         * Build call for updateThirdPartyAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransferThirdPartyAssociation transferThirdPartyAssociation = buildBodyParams();
            return updateThirdPartyAdminCall(objectId, transferThirdPartyAssociation, _callback);
        }

        private TransferThirdPartyAssociation buildBodyParams() {
            TransferThirdPartyAssociation transferThirdPartyAssociation = new TransferThirdPartyAssociation();
            transferThirdPartyAssociation.fromAccountId(this.fromAccountId);
            transferThirdPartyAssociation.thirdParty(this.thirdParty);
            return transferThirdPartyAssociation;
        }

        /**
         * Execute updateThirdPartyAdmin request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            TransferThirdPartyAssociation transferThirdPartyAssociation = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateThirdPartyAdminWithHttpInfo(objectId, transferThirdPartyAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateThirdPartyAdmin request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            TransferThirdPartyAssociation transferThirdPartyAssociation = buildBodyParams();
            return updateThirdPartyAdminWithHttpInfo(objectId, transferThirdPartyAssociation);
        }

        /**
         * Execute updateThirdPartyAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            TransferThirdPartyAssociation transferThirdPartyAssociation = buildBodyParams();
            return updateThirdPartyAdminAsync(objectId, transferThirdPartyAssociation, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateThirdPartyAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThirdPartyAdminRequestBuilder updateThirdPartyAdmin(Integer fromAccountId, String objectId) throws IllegalArgumentException {
        if (fromAccountId == null) throw new IllegalArgumentException("\"fromAccountId\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateThirdPartyAdminRequestBuilder(fromAccountId, objectId);
    }
}
