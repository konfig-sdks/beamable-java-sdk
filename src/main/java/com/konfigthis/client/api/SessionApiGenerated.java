/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnlineStatusResponses;
import com.konfigthis.client.model.SessionHeartbeat;
import com.konfigthis.client.model.SessionHistoryResponse;
import com.konfigthis.client.model.SessionLanguageContext;
import com.konfigthis.client.model.StartSessionRequest;
import com.konfigthis.client.model.StartSessionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SessionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SessionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSessionRequestCall(StartSessionRequest startSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startSessionRequest;

        // create path and map variables
        String localVarPath = "/basic/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionRequestValidateBeforeCall(StartSessionRequest startSessionRequest, final ApiCallback _callback) throws ApiException {
        return createSessionRequestCall(startSessionRequest, _callback);

    }


    private ApiResponse<StartSessionResponse> createSessionRequestWithHttpInfo(StartSessionRequest startSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionRequestValidateBeforeCall(startSessionRequest, null);
        Type localVarReturnType = new TypeToken<StartSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionRequestAsync(StartSessionRequest startSessionRequest, final ApiCallback<StartSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionRequestValidateBeforeCall(startSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<StartSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionRequestRequestBuilder {
        private String source;
        private Map<String, Object> customParams;
        private String shard;
        private String locale;
        private Map<String, Object> deviceParams;
        private SessionLanguageContext language;
        private Integer time;
        private String platform;
        private Integer gamer;
        private String device;

        private CreateSessionRequestRequestBuilder() {
        }

        /**
         * Set source
         * @param source  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set customParams
         * @param customParams  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder customParams(Map<String, Object> customParams) {
            this.customParams = customParams;
            return this;
        }
        
        /**
         * Set shard
         * @param shard  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder shard(String shard) {
            this.shard = shard;
            return this;
        }
        
        /**
         * Set locale
         * @param locale  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set deviceParams
         * @param deviceParams  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder deviceParams(Map<String, Object> deviceParams) {
            this.deviceParams = deviceParams;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder language(SessionLanguageContext language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set time
         * @param time  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder time(Integer time) {
            this.time = time;
            return this;
        }
        
        /**
         * Set platform
         * @param platform  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set gamer
         * @param gamer  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder gamer(Integer gamer) {
            this.gamer = gamer;
            return this;
        }
        
        /**
         * Set device
         * @param device  (optional)
         * @return CreateSessionRequestRequestBuilder
         */
        public CreateSessionRequestRequestBuilder device(String device) {
            this.device = device;
            return this;
        }
        
        /**
         * Build call for createSessionRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StartSessionRequest startSessionRequest = buildBodyParams();
            return createSessionRequestCall(startSessionRequest, _callback);
        }

        private StartSessionRequest buildBodyParams() {
            StartSessionRequest startSessionRequest = new StartSessionRequest();
            startSessionRequest.source(this.source);
            startSessionRequest.customParams(this.customParams);
            startSessionRequest.shard(this.shard);
            startSessionRequest.locale(this.locale);
            startSessionRequest.deviceParams(this.deviceParams);
            startSessionRequest.language(this.language);
            startSessionRequest.time(this.time);
            startSessionRequest.platform(this.platform);
            startSessionRequest.gamer(this.gamer);
            startSessionRequest.device(this.device);
            return startSessionRequest;
        }

        /**
         * Execute createSessionRequest request
         * @return StartSessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public StartSessionResponse execute() throws ApiException {
            StartSessionRequest startSessionRequest = buildBodyParams();
            ApiResponse<StartSessionResponse> localVarResp = createSessionRequestWithHttpInfo(startSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSessionRequest request with HTTP info returned
         * @return ApiResponse&lt;StartSessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StartSessionResponse> executeWithHttpInfo() throws ApiException {
            StartSessionRequest startSessionRequest = buildBodyParams();
            return createSessionRequestWithHttpInfo(startSessionRequest);
        }

        /**
         * Execute createSessionRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StartSessionResponse> _callback) throws ApiException {
            StartSessionRequest startSessionRequest = buildBodyParams();
            return createSessionRequestAsync(startSessionRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateSessionRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionRequestRequestBuilder createSessionRequest() throws IllegalArgumentException {
        return new CreateSessionRequestRequestBuilder();
    }
    private okhttp3.Call getHistoryCall(Integer dbid, Integer month, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/session/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbid", dbid));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(Integer dbid, Integer month, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbid' is set
        if (dbid == null) {
            throw new ApiException("Missing the required parameter 'dbid' when calling getHistory(Async)");
        }

        return getHistoryCall(dbid, month, year, _callback);

    }


    private ApiResponse<SessionHistoryResponse> getHistoryWithHttpInfo(Integer dbid, Integer month, Integer year) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(dbid, month, year, null);
        Type localVarReturnType = new TypeToken<SessionHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(Integer dbid, Integer month, Integer year, final ApiCallback<SessionHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(dbid, month, year, _callback);
        Type localVarReturnType = new TypeToken<SessionHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private final Integer dbid;
        private Integer month;
        private Integer year;

        private GetHistoryRequestBuilder(Integer dbid) {
            this.dbid = dbid;
        }

        /**
         * Set month
         * @param month  (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder month(Integer month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set year
         * @param year  (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder year(Integer year) {
            this.year = year;
            return this;
        }
        
        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(dbid, month, year, _callback);
        }


        /**
         * Execute getHistory request
         * @return SessionHistoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SessionHistoryResponse execute() throws ApiException {
            ApiResponse<SessionHistoryResponse> localVarResp = getHistoryWithHttpInfo(dbid, month, year);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;SessionHistoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionHistoryResponse> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(dbid, month, year);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionHistoryResponse> _callback) throws ApiException {
            return getHistoryAsync(dbid, month, year, _callback);
        }
    }

    /**
     * 
     * 
     * @param dbid  (required)
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory(Integer dbid) throws IllegalArgumentException {
        if (dbid == null) throw new IllegalArgumentException("\"dbid\" is required but got null");
        return new GetHistoryRequestBuilder(dbid);
    }
    private okhttp3.Call getStatusCall(Integer intervalSecs, String playerIds, List<Object> playerIdsSeq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/session/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerIds", playerIds));
        }

        if (intervalSecs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalSecs", intervalSecs));
        }

        if (playerIdsSeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "playerIdsSeq", playerIdsSeq));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(Integer intervalSecs, String playerIds, List<Object> playerIdsSeq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'intervalSecs' is set
        if (intervalSecs == null) {
            throw new ApiException("Missing the required parameter 'intervalSecs' when calling getStatus(Async)");
        }

        return getStatusCall(intervalSecs, playerIds, playerIdsSeq, _callback);

    }


    private ApiResponse<OnlineStatusResponses> getStatusWithHttpInfo(Integer intervalSecs, String playerIds, List<Object> playerIdsSeq) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(intervalSecs, playerIds, playerIdsSeq, null);
        Type localVarReturnType = new TypeToken<OnlineStatusResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(Integer intervalSecs, String playerIds, List<Object> playerIdsSeq, final ApiCallback<OnlineStatusResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(intervalSecs, playerIds, playerIdsSeq, _callback);
        Type localVarReturnType = new TypeToken<OnlineStatusResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final Integer intervalSecs;
        private String playerIds;
        private List<Object> playerIdsSeq;

        private GetStatusRequestBuilder(Integer intervalSecs) {
            this.intervalSecs = intervalSecs;
        }

        /**
         * Set playerIds
         * @param playerIds  (optional)
         * @return GetStatusRequestBuilder
         */
        public GetStatusRequestBuilder playerIds(String playerIds) {
            this.playerIds = playerIds;
            return this;
        }
        
        /**
         * Set playerIdsSeq
         * @param playerIdsSeq  (optional)
         * @return GetStatusRequestBuilder
         */
        public GetStatusRequestBuilder playerIdsSeq(List<Object> playerIdsSeq) {
            this.playerIdsSeq = playerIdsSeq;
            return this;
        }
        
        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(intervalSecs, playerIds, playerIdsSeq, _callback);
        }


        /**
         * Execute getStatus request
         * @return OnlineStatusResponses
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public OnlineStatusResponses execute() throws ApiException {
            ApiResponse<OnlineStatusResponses> localVarResp = getStatusWithHttpInfo(intervalSecs, playerIds, playerIdsSeq);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;OnlineStatusResponses&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnlineStatusResponses> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(intervalSecs, playerIds, playerIdsSeq);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnlineStatusResponses> _callback) throws ApiException {
            return getStatusAsync(intervalSecs, playerIds, playerIdsSeq, _callback);
        }
    }

    /**
     * 
     * 
     * @param intervalSecs  (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(Integer intervalSecs) throws IllegalArgumentException {
        if (intervalSecs == null) throw new IllegalArgumentException("\"intervalSecs\" is required but got null");
        return new GetStatusRequestBuilder(intervalSecs);
    }
    private okhttp3.Call postHeartbeatCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/session/heartbeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postHeartbeatValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return postHeartbeatCall(_callback);

    }


    private ApiResponse<SessionHeartbeat> postHeartbeatWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = postHeartbeatValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SessionHeartbeat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postHeartbeatAsync(final ApiCallback<SessionHeartbeat> _callback) throws ApiException {

        okhttp3.Call localVarCall = postHeartbeatValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SessionHeartbeat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostHeartbeatRequestBuilder {

        private PostHeartbeatRequestBuilder() {
        }

        /**
         * Build call for postHeartbeat
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postHeartbeatCall(_callback);
        }


        /**
         * Execute postHeartbeat request
         * @return SessionHeartbeat
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SessionHeartbeat execute() throws ApiException {
            ApiResponse<SessionHeartbeat> localVarResp = postHeartbeatWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postHeartbeat request with HTTP info returned
         * @return ApiResponse&lt;SessionHeartbeat&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionHeartbeat> executeWithHttpInfo() throws ApiException {
            return postHeartbeatWithHttpInfo();
        }

        /**
         * Execute postHeartbeat request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionHeartbeat> _callback) throws ApiException {
            return postHeartbeatAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return PostHeartbeatRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PostHeartbeatRequestBuilder postHeartbeat() throws IllegalArgumentException {
        return new PostHeartbeatRequestBuilder();
    }
}
