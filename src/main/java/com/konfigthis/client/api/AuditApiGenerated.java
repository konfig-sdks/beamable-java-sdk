/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ListAuditResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuditApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPaymentAuditsCall(String providerid, String provider, String state, Integer txid, Integer player, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/audits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providerid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerid", providerid));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (txid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txid", txid));
        }

        if (player != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("player", player));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentAuditsValidateBeforeCall(String providerid, String provider, String state, Integer txid, Integer player, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return getPaymentAuditsCall(providerid, provider, state, txid, player, start, limit, _callback);

    }


    private ApiResponse<ListAuditResponse> getPaymentAuditsWithHttpInfo(String providerid, String provider, String state, Integer txid, Integer player, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPaymentAuditsValidateBeforeCall(providerid, provider, state, txid, player, start, limit, null);
        Type localVarReturnType = new TypeToken<ListAuditResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentAuditsAsync(String providerid, String provider, String state, Integer txid, Integer player, Integer start, Integer limit, final ApiCallback<ListAuditResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentAuditsValidateBeforeCall(providerid, provider, state, txid, player, start, limit, _callback);
        Type localVarReturnType = new TypeToken<ListAuditResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentAuditsRequestBuilder {
        private String providerid;
        private String provider;
        private String state;
        private Integer txid;
        private Integer player;
        private Integer start;
        private Integer limit;

        private GetPaymentAuditsRequestBuilder() {
        }

        /**
         * Set providerid
         * @param providerid  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder providerid(String providerid) {
            this.providerid = providerid;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder provider(String provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set txid
         * @param txid  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder txid(Integer txid) {
            this.txid = txid;
            return this;
        }
        
        /**
         * Set player
         * @param player  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder player(Integer player) {
            this.player = player;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetPaymentAuditsRequestBuilder
         */
        public GetPaymentAuditsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getPaymentAudits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentAuditsCall(providerid, provider, state, txid, player, start, limit, _callback);
        }


        /**
         * Execute getPaymentAudits request
         * @return ListAuditResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ListAuditResponse execute() throws ApiException {
            ApiResponse<ListAuditResponse> localVarResp = getPaymentAuditsWithHttpInfo(providerid, provider, state, txid, player, start, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentAudits request with HTTP info returned
         * @return ApiResponse&lt;ListAuditResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAuditResponse> executeWithHttpInfo() throws ApiException {
            return getPaymentAuditsWithHttpInfo(providerid, provider, state, txid, player, start, limit);
        }

        /**
         * Execute getPaymentAudits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAuditResponse> _callback) throws ApiException {
            return getPaymentAuditsAsync(providerid, provider, state, txid, player, start, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetPaymentAuditsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentAuditsRequestBuilder getPaymentAudits() throws IllegalArgumentException {
        return new GetPaymentAuditsRequestBuilder();
    }
}
