/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetAccessLogResponse;
import com.konfigthis.client.model.GetMicroservicesResponse;
import com.konfigthis.client.model.GetNamespacesResponse;
import com.konfigthis.client.model.QueryRequest;
import com.konfigthis.client.model.QueryResponse;
import com.konfigthis.client.model.QueryUrlResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HistoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HistoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HistoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getApiAccessHistoryCall(Long from, Long to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/history/apiaccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiAccessHistoryValidateBeforeCall(Long from, Long to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getApiAccessHistory(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getApiAccessHistory(Async)");
        }

        return getApiAccessHistoryCall(from, to, _callback);

    }


    private ApiResponse<GetAccessLogResponse> getApiAccessHistoryWithHttpInfo(Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = getApiAccessHistoryValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<GetAccessLogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApiAccessHistoryAsync(Long from, Long to, final ApiCallback<GetAccessLogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiAccessHistoryValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<GetAccessLogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApiAccessHistoryRequestBuilder {
        private final Long from;
        private final Long to;

        private GetApiAccessHistoryRequestBuilder(Long from, Long to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Build call for getApiAccessHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApiAccessHistoryCall(from, to, _callback);
        }


        /**
         * Execute getApiAccessHistory request
         * @return GetAccessLogResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetAccessLogResponse execute() throws ApiException {
            ApiResponse<GetAccessLogResponse> localVarResp = getApiAccessHistoryWithHttpInfo(from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApiAccessHistory request with HTTP info returned
         * @return ApiResponse&lt;GetAccessLogResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAccessLogResponse> executeWithHttpInfo() throws ApiException {
            return getApiAccessHistoryWithHttpInfo(from, to);
        }

        /**
         * Execute getApiAccessHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAccessLogResponse> _callback) throws ApiException {
            return getApiAccessHistoryAsync(from, to, _callback);
        }
    }

    /**
     * 
     * 
     * @param from  (required)
     * @param to  (required)
     * @return GetApiAccessHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetApiAccessHistoryRequestBuilder getApiAccessHistory(Long from, Long to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetApiAccessHistoryRequestBuilder(from, to);
    }
    private okhttp3.Call getApiAccessUrlCall(Long from, Long to, Boolean customerScoped, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/history/apiaccess/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (customerScoped != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerScoped", customerScoped));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiAccessUrlValidateBeforeCall(Long from, Long to, Boolean customerScoped, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getApiAccessUrl(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getApiAccessUrl(Async)");
        }

        return getApiAccessUrlCall(from, to, customerScoped, _callback);

    }


    private ApiResponse<QueryUrlResponse> getApiAccessUrlWithHttpInfo(Long from, Long to, Boolean customerScoped) throws ApiException {
        okhttp3.Call localVarCall = getApiAccessUrlValidateBeforeCall(from, to, customerScoped, null);
        Type localVarReturnType = new TypeToken<QueryUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApiAccessUrlAsync(Long from, Long to, Boolean customerScoped, final ApiCallback<QueryUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiAccessUrlValidateBeforeCall(from, to, customerScoped, _callback);
        Type localVarReturnType = new TypeToken<QueryUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApiAccessUrlRequestBuilder {
        private final Long from;
        private final Long to;
        private Boolean customerScoped;

        private GetApiAccessUrlRequestBuilder(Long from, Long to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set customerScoped
         * @param customerScoped  (optional)
         * @return GetApiAccessUrlRequestBuilder
         */
        public GetApiAccessUrlRequestBuilder customerScoped(Boolean customerScoped) {
            this.customerScoped = customerScoped;
            return this;
        }
        
        /**
         * Build call for getApiAccessUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApiAccessUrlCall(from, to, customerScoped, _callback);
        }


        /**
         * Execute getApiAccessUrl request
         * @return QueryUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public QueryUrlResponse execute() throws ApiException {
            ApiResponse<QueryUrlResponse> localVarResp = getApiAccessUrlWithHttpInfo(from, to, customerScoped);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApiAccessUrl request with HTTP info returned
         * @return ApiResponse&lt;QueryUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QueryUrlResponse> executeWithHttpInfo() throws ApiException {
            return getApiAccessUrlWithHttpInfo(from, to, customerScoped);
        }

        /**
         * Execute getApiAccessUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QueryUrlResponse> _callback) throws ApiException {
            return getApiAccessUrlAsync(from, to, customerScoped, _callback);
        }
    }

    /**
     * 
     * 
     * @param from  (required)
     * @param to  (required)
     * @return GetApiAccessUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetApiAccessUrlRequestBuilder getApiAccessUrl(Long from, Long to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetApiAccessUrlRequestBuilder(from, to);
    }
    private okhttp3.Call getEventHistoryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/history/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventHistoryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEventHistoryCall(_callback);

    }


    private ApiResponse<GetNamespacesResponse> getEventHistoryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEventHistoryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetNamespacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventHistoryAsync(final ApiCallback<GetNamespacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventHistoryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetNamespacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventHistoryRequestBuilder {

        private GetEventHistoryRequestBuilder() {
        }

        /**
         * Build call for getEventHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventHistoryCall(_callback);
        }


        /**
         * Execute getEventHistory request
         * @return GetNamespacesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetNamespacesResponse execute() throws ApiException {
            ApiResponse<GetNamespacesResponse> localVarResp = getEventHistoryWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventHistory request with HTTP info returned
         * @return ApiResponse&lt;GetNamespacesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetNamespacesResponse> executeWithHttpInfo() throws ApiException {
            return getEventHistoryWithHttpInfo();
        }

        /**
         * Execute getEventHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetNamespacesResponse> _callback) throws ApiException {
            return getEventHistoryAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetEventHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetEventHistoryRequestBuilder getEventHistory() throws IllegalArgumentException {
        return new GetEventHistoryRequestBuilder();
    }
    private okhttp3.Call getMicroservicesHistoryCall(Long from, Long to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/history/microservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMicroservicesHistoryValidateBeforeCall(Long from, Long to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getMicroservicesHistory(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getMicroservicesHistory(Async)");
        }

        return getMicroservicesHistoryCall(from, to, _callback);

    }


    private ApiResponse<GetMicroservicesResponse> getMicroservicesHistoryWithHttpInfo(Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = getMicroservicesHistoryValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<GetMicroservicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMicroservicesHistoryAsync(Long from, Long to, final ApiCallback<GetMicroservicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMicroservicesHistoryValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<GetMicroservicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMicroservicesHistoryRequestBuilder {
        private final Long from;
        private final Long to;

        private GetMicroservicesHistoryRequestBuilder(Long from, Long to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Build call for getMicroservicesHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMicroservicesHistoryCall(from, to, _callback);
        }


        /**
         * Execute getMicroservicesHistory request
         * @return GetMicroservicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetMicroservicesResponse execute() throws ApiException {
            ApiResponse<GetMicroservicesResponse> localVarResp = getMicroservicesHistoryWithHttpInfo(from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMicroservicesHistory request with HTTP info returned
         * @return ApiResponse&lt;GetMicroservicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMicroservicesResponse> executeWithHttpInfo() throws ApiException {
            return getMicroservicesHistoryWithHttpInfo(from, to);
        }

        /**
         * Execute getMicroservicesHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMicroservicesResponse> _callback) throws ApiException {
            return getMicroservicesHistoryAsync(from, to, _callback);
        }
    }

    /**
     * 
     * 
     * @param from  (required)
     * @param to  (required)
     * @return GetMicroservicesHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetMicroservicesHistoryRequestBuilder getMicroservicesHistory(Long from, Long to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetMicroservicesHistoryRequestBuilder(from, to);
    }
    private okhttp3.Call getQueryDataCall(QueryRequest queryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/basic/history/query/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryDataValidateBeforeCall(QueryRequest queryRequest, final ApiCallback _callback) throws ApiException {
        return getQueryDataCall(queryRequest, _callback);

    }


    private ApiResponse<QueryUrlResponse> getQueryDataWithHttpInfo(QueryRequest queryRequest) throws ApiException {
        okhttp3.Call localVarCall = getQueryDataValidateBeforeCall(queryRequest, null);
        Type localVarReturnType = new TypeToken<QueryUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQueryDataAsync(QueryRequest queryRequest, final ApiCallback<QueryUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryDataValidateBeforeCall(queryRequest, _callback);
        Type localVarReturnType = new TypeToken<QueryUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQueryDataRequestBuilder {
        private final String query;

        private GetQueryDataRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Build call for getQueryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryDataCall(queryRequest, _callback);
        }

        private QueryRequest buildBodyParams() {
            QueryRequest queryRequest = new QueryRequest();
            queryRequest.query(this.query);
            return queryRequest;
        }

        /**
         * Execute getQueryData request
         * @return QueryUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public QueryUrlResponse execute() throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            ApiResponse<QueryUrlResponse> localVarResp = getQueryDataWithHttpInfo(queryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQueryData request with HTTP info returned
         * @return ApiResponse&lt;QueryUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QueryUrlResponse> executeWithHttpInfo() throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryDataWithHttpInfo(queryRequest);
        }

        /**
         * Execute getQueryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QueryUrlResponse> _callback) throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryDataAsync(queryRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetQueryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetQueryDataRequestBuilder getQueryData(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new GetQueryDataRequestBuilder(query);
    }
    private okhttp3.Call getQueryResultsCall(QueryRequest queryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/basic/history/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryResultsValidateBeforeCall(QueryRequest queryRequest, final ApiCallback _callback) throws ApiException {
        return getQueryResultsCall(queryRequest, _callback);

    }


    private ApiResponse<QueryResponse> getQueryResultsWithHttpInfo(QueryRequest queryRequest) throws ApiException {
        okhttp3.Call localVarCall = getQueryResultsValidateBeforeCall(queryRequest, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQueryResultsAsync(QueryRequest queryRequest, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryResultsValidateBeforeCall(queryRequest, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQueryResultsRequestBuilder {
        private final String query;

        private GetQueryResultsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Build call for getQueryResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryResultsCall(queryRequest, _callback);
        }

        private QueryRequest buildBodyParams() {
            QueryRequest queryRequest = new QueryRequest();
            queryRequest.query(this.query);
            return queryRequest;
        }

        /**
         * Execute getQueryResults request
         * @return QueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public QueryResponse execute() throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            ApiResponse<QueryResponse> localVarResp = getQueryResultsWithHttpInfo(queryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQueryResults request with HTTP info returned
         * @return ApiResponse&lt;QueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QueryResponse> executeWithHttpInfo() throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryResultsWithHttpInfo(queryRequest);
        }

        /**
         * Execute getQueryResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QueryResponse> _callback) throws ApiException {
            QueryRequest queryRequest = buildBodyParams();
            return getQueryResultsAsync(queryRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetQueryResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetQueryResultsRequestBuilder getQueryResults(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new GetQueryResultsRequestBuilder(query);
    }
}
