/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FacebookPaymentUpdateRequest;
import com.konfigthis.client.model.FacebookPaymentUpdateResponse;
import com.konfigthis.client.model.FacebookUpdatedEntry;
import com.konfigthis.client.model.SubscriptionVerificationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UpdateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UpdateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call facebookPaymentsUpdateCall(String hubMode, String hubChallenge, String hubVerifyToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hubMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hubMode", hubMode));
        }

        if (hubChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hubChallenge", hubChallenge));
        }

        if (hubVerifyToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hubVerifyToken", hubVerifyToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPaymentsUpdateValidateBeforeCall(String hubMode, String hubChallenge, String hubVerifyToken, final ApiCallback _callback) throws ApiException {
        return facebookPaymentsUpdateCall(hubMode, hubChallenge, hubVerifyToken, _callback);

    }


    private ApiResponse<SubscriptionVerificationResponse> facebookPaymentsUpdateWithHttpInfo(String hubMode, String hubChallenge, String hubVerifyToken) throws ApiException {
        okhttp3.Call localVarCall = facebookPaymentsUpdateValidateBeforeCall(hubMode, hubChallenge, hubVerifyToken, null);
        Type localVarReturnType = new TypeToken<SubscriptionVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPaymentsUpdateAsync(String hubMode, String hubChallenge, String hubVerifyToken, final ApiCallback<SubscriptionVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPaymentsUpdateValidateBeforeCall(hubMode, hubChallenge, hubVerifyToken, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPaymentsUpdateRequestBuilder {
        private String hubMode;
        private String hubChallenge;
        private String hubVerifyToken;

        private FacebookPaymentsUpdateRequestBuilder() {
        }

        /**
         * Set hubMode
         * @param hubMode  (optional)
         * @return FacebookPaymentsUpdateRequestBuilder
         */
        public FacebookPaymentsUpdateRequestBuilder hubMode(String hubMode) {
            this.hubMode = hubMode;
            return this;
        }
        
        /**
         * Set hubChallenge
         * @param hubChallenge  (optional)
         * @return FacebookPaymentsUpdateRequestBuilder
         */
        public FacebookPaymentsUpdateRequestBuilder hubChallenge(String hubChallenge) {
            this.hubChallenge = hubChallenge;
            return this;
        }
        
        /**
         * Set hubVerifyToken
         * @param hubVerifyToken  (optional)
         * @return FacebookPaymentsUpdateRequestBuilder
         */
        public FacebookPaymentsUpdateRequestBuilder hubVerifyToken(String hubVerifyToken) {
            this.hubVerifyToken = hubVerifyToken;
            return this;
        }
        
        /**
         * Build call for facebookPaymentsUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return facebookPaymentsUpdateCall(hubMode, hubChallenge, hubVerifyToken, _callback);
        }


        /**
         * Execute facebookPaymentsUpdate request
         * @return SubscriptionVerificationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionVerificationResponse execute() throws ApiException {
            ApiResponse<SubscriptionVerificationResponse> localVarResp = facebookPaymentsUpdateWithHttpInfo(hubMode, hubChallenge, hubVerifyToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPaymentsUpdate request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionVerificationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionVerificationResponse> executeWithHttpInfo() throws ApiException {
            return facebookPaymentsUpdateWithHttpInfo(hubMode, hubChallenge, hubVerifyToken);
        }

        /**
         * Execute facebookPaymentsUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionVerificationResponse> _callback) throws ApiException {
            return facebookPaymentsUpdateAsync(hubMode, hubChallenge, hubVerifyToken, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPaymentsUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPaymentsUpdateRequestBuilder facebookPaymentsUpdate() throws IllegalArgumentException {
        return new FacebookPaymentsUpdateRequestBuilder();
    }
    private okhttp3.Call facebookPaymentsUpdate_0Call(FacebookPaymentUpdateRequest facebookPaymentUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = facebookPaymentUpdateRequest;

        // create path and map variables
        String localVarPath = "/basic/payments/facebook/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookPaymentsUpdate_0ValidateBeforeCall(FacebookPaymentUpdateRequest facebookPaymentUpdateRequest, final ApiCallback _callback) throws ApiException {
        return facebookPaymentsUpdate_0Call(facebookPaymentUpdateRequest, _callback);

    }


    private ApiResponse<FacebookPaymentUpdateResponse> facebookPaymentsUpdate_0WithHttpInfo(FacebookPaymentUpdateRequest facebookPaymentUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = facebookPaymentsUpdate_0ValidateBeforeCall(facebookPaymentUpdateRequest, null);
        Type localVarReturnType = new TypeToken<FacebookPaymentUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookPaymentsUpdate_0Async(FacebookPaymentUpdateRequest facebookPaymentUpdateRequest, final ApiCallback<FacebookPaymentUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookPaymentsUpdate_0ValidateBeforeCall(facebookPaymentUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<FacebookPaymentUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookPaymentsUpdate0RequestBuilder {
        private String _object;
        private List<FacebookUpdatedEntry> entry;

        private FacebookPaymentsUpdate0RequestBuilder() {
        }

        /**
         * Set _object
         * @param _object  (optional)
         * @return FacebookPaymentsUpdate0RequestBuilder
         */
        public FacebookPaymentsUpdate0RequestBuilder _object(String _object) {
            this._object = _object;
            return this;
        }
        
        /**
         * Set entry
         * @param entry  (optional)
         * @return FacebookPaymentsUpdate0RequestBuilder
         */
        public FacebookPaymentsUpdate0RequestBuilder entry(List<FacebookUpdatedEntry> entry) {
            this.entry = entry;
            return this;
        }
        
        /**
         * Build call for facebookPaymentsUpdate_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FacebookPaymentUpdateRequest facebookPaymentUpdateRequest = buildBodyParams();
            return facebookPaymentsUpdate_0Call(facebookPaymentUpdateRequest, _callback);
        }

        private FacebookPaymentUpdateRequest buildBodyParams() {
            FacebookPaymentUpdateRequest facebookPaymentUpdateRequest = new FacebookPaymentUpdateRequest();
            facebookPaymentUpdateRequest._object(this._object);
            facebookPaymentUpdateRequest.entry(this.entry);
            return facebookPaymentUpdateRequest;
        }

        /**
         * Execute facebookPaymentsUpdate_0 request
         * @return FacebookPaymentUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public FacebookPaymentUpdateResponse execute() throws ApiException {
            FacebookPaymentUpdateRequest facebookPaymentUpdateRequest = buildBodyParams();
            ApiResponse<FacebookPaymentUpdateResponse> localVarResp = facebookPaymentsUpdate_0WithHttpInfo(facebookPaymentUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookPaymentsUpdate_0 request with HTTP info returned
         * @return ApiResponse&lt;FacebookPaymentUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FacebookPaymentUpdateResponse> executeWithHttpInfo() throws ApiException {
            FacebookPaymentUpdateRequest facebookPaymentUpdateRequest = buildBodyParams();
            return facebookPaymentsUpdate_0WithHttpInfo(facebookPaymentUpdateRequest);
        }

        /**
         * Execute facebookPaymentsUpdate_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FacebookPaymentUpdateResponse> _callback) throws ApiException {
            FacebookPaymentUpdateRequest facebookPaymentUpdateRequest = buildBodyParams();
            return facebookPaymentsUpdate_0Async(facebookPaymentUpdateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return FacebookPaymentsUpdate0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FacebookPaymentsUpdate0RequestBuilder facebookPaymentsUpdate_0() throws IllegalArgumentException {
        return new FacebookPaymentsUpdate0RequestBuilder();
    }
}
