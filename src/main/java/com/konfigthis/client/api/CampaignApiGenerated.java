/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AttachmentRequest;
import com.konfigthis.client.model.CreateMessageCampaignRequest;
import com.konfigthis.client.model.EjectMessageCampaignRequest;
import com.konfigthis.client.model.EmptyResponse;
import com.konfigthis.client.model.GetCampaignsResponse;
import com.konfigthis.client.model.RescheduleMessageCampaignRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewLegacyCloudCampaignCall(CreateMessageCampaignRequest createMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageCampaignRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-cloud/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewLegacyCloudCampaignValidateBeforeCall(CreateMessageCampaignRequest createMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        return createNewLegacyCloudCampaignCall(createMessageCampaignRequest, _callback);

    }


    private ApiResponse<EmptyResponse> createNewLegacyCloudCampaignWithHttpInfo(CreateMessageCampaignRequest createMessageCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewLegacyCloudCampaignValidateBeforeCall(createMessageCampaignRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewLegacyCloudCampaignAsync(CreateMessageCampaignRequest createMessageCampaignRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewLegacyCloudCampaignValidateBeforeCall(createMessageCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewLegacyCloudCampaignRequestBuilder {
        private final Boolean resendToPastRecipients;
        private final Integer sent;
        private String mtype;
        private String mbStore;
        private String mbExpiration;
        private String name;
        private String subject;
        private String mbEntSpec;
        private Integer mbEntQuant;
        private String datepoint;
        private List<AttachmentRequest> mbAttachments;
        private String recur;
        private String msg;
        private List<String> rules;
        private String mbEnt;
        private String start;
        private String days;

        private CreateNewLegacyCloudCampaignRequestBuilder(Boolean resendToPastRecipients, Integer sent) {
            this.resendToPastRecipients = resendToPastRecipients;
            this.sent = sent;
        }

        /**
         * Set mtype
         * @param mtype  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mtype(String mtype) {
            this.mtype = mtype;
            return this;
        }
        
        /**
         * Set mbStore
         * @param mbStore  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbStore(String mbStore) {
            this.mbStore = mbStore;
            return this;
        }
        
        /**
         * Set mbExpiration
         * @param mbExpiration  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbExpiration(String mbExpiration) {
            this.mbExpiration = mbExpiration;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set mbEntSpec
         * @param mbEntSpec  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbEntSpec(String mbEntSpec) {
            this.mbEntSpec = mbEntSpec;
            return this;
        }
        
        /**
         * Set mbEntQuant
         * @param mbEntQuant  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbEntQuant(Integer mbEntQuant) {
            this.mbEntQuant = mbEntQuant;
            return this;
        }
        
        /**
         * Set datepoint
         * @param datepoint  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder datepoint(String datepoint) {
            this.datepoint = datepoint;
            return this;
        }
        
        /**
         * Set mbAttachments
         * @param mbAttachments  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbAttachments(List<AttachmentRequest> mbAttachments) {
            this.mbAttachments = mbAttachments;
            return this;
        }
        
        /**
         * Set recur
         * @param recur  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder recur(String recur) {
            this.recur = recur;
            return this;
        }
        
        /**
         * Set msg
         * @param msg  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder msg(String msg) {
            this.msg = msg;
            return this;
        }
        
        /**
         * Set rules
         * @param rules  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder rules(List<String> rules) {
            this.rules = rules;
            return this;
        }
        
        /**
         * Set mbEnt
         * @param mbEnt  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder mbEnt(String mbEnt) {
            this.mbEnt = mbEnt;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set days
         * @param days  (optional)
         * @return CreateNewLegacyCloudCampaignRequestBuilder
         */
        public CreateNewLegacyCloudCampaignRequestBuilder days(String days) {
            this.days = days;
            return this;
        }
        
        /**
         * Build call for createNewLegacyCloudCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageCampaignRequest createMessageCampaignRequest = buildBodyParams();
            return createNewLegacyCloudCampaignCall(createMessageCampaignRequest, _callback);
        }

        private CreateMessageCampaignRequest buildBodyParams() {
            CreateMessageCampaignRequest createMessageCampaignRequest = new CreateMessageCampaignRequest();
            createMessageCampaignRequest.mtype(this.mtype);
            createMessageCampaignRequest.mbStore(this.mbStore);
            createMessageCampaignRequest.mbExpiration(this.mbExpiration);
            createMessageCampaignRequest.name(this.name);
            createMessageCampaignRequest.subject(this.subject);
            createMessageCampaignRequest.mbEntSpec(this.mbEntSpec);
            createMessageCampaignRequest.mbEntQuant(this.mbEntQuant);
            createMessageCampaignRequest.resendToPastRecipients(this.resendToPastRecipients);
            createMessageCampaignRequest.datepoint(this.datepoint);
            createMessageCampaignRequest.mbAttachments(this.mbAttachments);
            createMessageCampaignRequest.recur(this.recur);
            createMessageCampaignRequest.sent(this.sent);
            createMessageCampaignRequest.msg(this.msg);
            createMessageCampaignRequest.rules(this.rules);
            createMessageCampaignRequest.mbEnt(this.mbEnt);
            createMessageCampaignRequest.start(this.start);
            createMessageCampaignRequest.days(this.days);
            return createMessageCampaignRequest;
        }

        /**
         * Execute createNewLegacyCloudCampaign request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            CreateMessageCampaignRequest createMessageCampaignRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = createNewLegacyCloudCampaignWithHttpInfo(createMessageCampaignRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewLegacyCloudCampaign request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            CreateMessageCampaignRequest createMessageCampaignRequest = buildBodyParams();
            return createNewLegacyCloudCampaignWithHttpInfo(createMessageCampaignRequest);
        }

        /**
         * Execute createNewLegacyCloudCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            CreateMessageCampaignRequest createMessageCampaignRequest = buildBodyParams();
            return createNewLegacyCloudCampaignAsync(createMessageCampaignRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewLegacyCloudCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewLegacyCloudCampaignRequestBuilder createNewLegacyCloudCampaign(Boolean resendToPastRecipients, Integer sent) throws IllegalArgumentException {
        if (resendToPastRecipients == null) throw new IllegalArgumentException("\"resendToPastRecipients\" is required but got null");
        if (sent == null) throw new IllegalArgumentException("\"sent\" is required but got null");
        return new CreateNewLegacyCloudCampaignRequestBuilder(resendToPastRecipients, sent);
    }
    private okhttp3.Call getLegacyCloudCampaignsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/legacy-cloud/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyCloudCampaignsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLegacyCloudCampaignsCall(_callback);

    }


    private ApiResponse<GetCampaignsResponse> getLegacyCloudCampaignsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLegacyCloudCampaignsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyCloudCampaignsAsync(final ApiCallback<GetCampaignsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyCloudCampaignsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegacyCloudCampaignsRequestBuilder {

        private GetLegacyCloudCampaignsRequestBuilder() {
        }

        /**
         * Build call for getLegacyCloudCampaigns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyCloudCampaignsCall(_callback);
        }


        /**
         * Execute getLegacyCloudCampaigns request
         * @return GetCampaignsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public GetCampaignsResponse execute() throws ApiException {
            ApiResponse<GetCampaignsResponse> localVarResp = getLegacyCloudCampaignsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegacyCloudCampaigns request with HTTP info returned
         * @return ApiResponse&lt;GetCampaignsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCampaignsResponse> executeWithHttpInfo() throws ApiException {
            return getLegacyCloudCampaignsWithHttpInfo();
        }

        /**
         * Execute getLegacyCloudCampaigns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCampaignsResponse> _callback) throws ApiException {
            return getLegacyCloudCampaignsAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetLegacyCloudCampaignsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetLegacyCloudCampaignsRequestBuilder getLegacyCloudCampaigns() throws IllegalArgumentException {
        return new GetLegacyCloudCampaignsRequestBuilder();
    }
    private okhttp3.Call removeLegacyCloudCall(EjectMessageCampaignRequest ejectMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ejectMessageCampaignRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-cloud/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLegacyCloudValidateBeforeCall(EjectMessageCampaignRequest ejectMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        return removeLegacyCloudCall(ejectMessageCampaignRequest, _callback);

    }


    private ApiResponse<EmptyResponse> removeLegacyCloudWithHttpInfo(EjectMessageCampaignRequest ejectMessageCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = removeLegacyCloudValidateBeforeCall(ejectMessageCampaignRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeLegacyCloudAsync(EjectMessageCampaignRequest ejectMessageCampaignRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLegacyCloudValidateBeforeCall(ejectMessageCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveLegacyCloudRequestBuilder {
        private String sid;

        private RemoveLegacyCloudRequestBuilder() {
        }

        /**
         * Set sid
         * @param sid  (optional)
         * @return RemoveLegacyCloudRequestBuilder
         */
        public RemoveLegacyCloudRequestBuilder sid(String sid) {
            this.sid = sid;
            return this;
        }
        
        /**
         * Build call for removeLegacyCloud
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EjectMessageCampaignRequest ejectMessageCampaignRequest = buildBodyParams();
            return removeLegacyCloudCall(ejectMessageCampaignRequest, _callback);
        }

        private EjectMessageCampaignRequest buildBodyParams() {
            EjectMessageCampaignRequest ejectMessageCampaignRequest = new EjectMessageCampaignRequest();
            ejectMessageCampaignRequest.sid(this.sid);
            return ejectMessageCampaignRequest;
        }

        /**
         * Execute removeLegacyCloud request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            EjectMessageCampaignRequest ejectMessageCampaignRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = removeLegacyCloudWithHttpInfo(ejectMessageCampaignRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeLegacyCloud request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            EjectMessageCampaignRequest ejectMessageCampaignRequest = buildBodyParams();
            return removeLegacyCloudWithHttpInfo(ejectMessageCampaignRequest);
        }

        /**
         * Execute removeLegacyCloud request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            EjectMessageCampaignRequest ejectMessageCampaignRequest = buildBodyParams();
            return removeLegacyCloudAsync(ejectMessageCampaignRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return RemoveLegacyCloudRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLegacyCloudRequestBuilder removeLegacyCloud() throws IllegalArgumentException {
        return new RemoveLegacyCloudRequestBuilder();
    }
    private okhttp3.Call updateScheduleCall(RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rescheduleMessageCampaignRequest;

        // create path and map variables
        String localVarPath = "/basic/legacy-cloud/campaigns/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheduleValidateBeforeCall(RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest, final ApiCallback _callback) throws ApiException {
        return updateScheduleCall(rescheduleMessageCampaignRequest, _callback);

    }


    private ApiResponse<EmptyResponse> updateScheduleWithHttpInfo(RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(rescheduleMessageCampaignRequest, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScheduleAsync(RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(rescheduleMessageCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScheduleRequestBuilder {
        private String sid;
        private String startDate;

        private UpdateScheduleRequestBuilder() {
        }

        /**
         * Set sid
         * @param sid  (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder sid(String sid) {
            this.sid = sid;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for updateSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest = buildBodyParams();
            return updateScheduleCall(rescheduleMessageCampaignRequest, _callback);
        }

        private RescheduleMessageCampaignRequest buildBodyParams() {
            RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest = new RescheduleMessageCampaignRequest();
            rescheduleMessageCampaignRequest.sid(this.sid);
            rescheduleMessageCampaignRequest.startDate(this.startDate);
            return rescheduleMessageCampaignRequest;
        }

        /**
         * Execute updateSchedule request
         * @return EmptyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponse execute() throws ApiException {
            RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest = buildBodyParams();
            ApiResponse<EmptyResponse> localVarResp = updateScheduleWithHttpInfo(rescheduleMessageCampaignRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSchedule request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponse> executeWithHttpInfo() throws ApiException {
            RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest = buildBodyParams();
            return updateScheduleWithHttpInfo(rescheduleMessageCampaignRequest);
        }

        /**
         * Execute updateSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {
            RescheduleMessageCampaignRequest rescheduleMessageCampaignRequest = buildBodyParams();
            return updateScheduleAsync(rescheduleMessageCampaignRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return UpdateScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScheduleRequestBuilder updateSchedule() throws IllegalArgumentException {
        return new UpdateScheduleRequestBuilder();
    }
}
