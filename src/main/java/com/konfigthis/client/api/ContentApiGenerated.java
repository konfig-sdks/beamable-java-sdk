/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnnouncementContentResponse;
import com.konfigthis.client.model.ClientManifest;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.ContentDefinition;
import com.konfigthis.client.model.ContentOrText;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.EventApplyRequest;
import com.konfigthis.client.model.EventContentResponse;
import com.konfigthis.client.model.Manifest;
import com.konfigthis.client.model.ManifestChecksum;
import com.konfigthis.client.model.PullManifestRequest;
import com.konfigthis.client.model.ReferenceSuperset;
import com.konfigthis.client.model.SaveContentRequest;
import com.konfigthis.client.model.SaveContentResponse;
import com.konfigthis.client.model.SaveManifestRequest;
import com.konfigthis.client.model.SaveTextRequest;
import com.konfigthis.client.model.SaveTextResponse;
import com.konfigthis.client.model.SetContentRequest;
import com.konfigthis.client.model.TextDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyContentDataCall(EventApplyRequest eventApplyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventApplyRequest;

        // create path and map variables
        String localVarPath = "/basic/events/applyContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyContentDataValidateBeforeCall(EventApplyRequest eventApplyRequest, final ApiCallback _callback) throws ApiException {
        return applyContentDataCall(eventApplyRequest, _callback);

    }


    private ApiResponse<CommonResponse> applyContentDataWithHttpInfo(EventApplyRequest eventApplyRequest) throws ApiException {
        okhttp3.Call localVarCall = applyContentDataValidateBeforeCall(eventApplyRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyContentDataAsync(EventApplyRequest eventApplyRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyContentDataValidateBeforeCall(eventApplyRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyContentDataRequestBuilder {
        private Event content;

        private ApplyContentDataRequestBuilder() {
        }

        /**
         * Set content
         * @param content  (optional)
         * @return ApplyContentDataRequestBuilder
         */
        public ApplyContentDataRequestBuilder content(Event content) {
            this.content = content;
            return this;
        }
        
        /**
         * Build call for applyContentData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventApplyRequest eventApplyRequest = buildBodyParams();
            return applyContentDataCall(eventApplyRequest, _callback);
        }

        private EventApplyRequest buildBodyParams() {
            EventApplyRequest eventApplyRequest = new EventApplyRequest();
            eventApplyRequest.content(this.content);
            return eventApplyRequest;
        }

        /**
         * Execute applyContentData request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            EventApplyRequest eventApplyRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = applyContentDataWithHttpInfo(eventApplyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyContentData request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            EventApplyRequest eventApplyRequest = buildBodyParams();
            return applyContentDataWithHttpInfo(eventApplyRequest);
        }

        /**
         * Execute applyContentData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            EventApplyRequest eventApplyRequest = buildBodyParams();
            return applyContentDataAsync(eventApplyRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return ApplyContentDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplyContentDataRequestBuilder applyContentData() throws IllegalArgumentException {
        return new ApplyContentDataRequestBuilder();
    }
    private okhttp3.Call checkManifestChecksumCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/content/manifest/checksum";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkManifestChecksumValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return checkManifestChecksumCall(id, _callback);

    }


    private ApiResponse<ManifestChecksum> checkManifestChecksumWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = checkManifestChecksumValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ManifestChecksum>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkManifestChecksumAsync(String id, final ApiCallback<ManifestChecksum> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkManifestChecksumValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ManifestChecksum>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckManifestChecksumRequestBuilder {
        private String id;

        private CheckManifestChecksumRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return CheckManifestChecksumRequestBuilder
         */
        public CheckManifestChecksumRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for checkManifestChecksum
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkManifestChecksumCall(id, _callback);
        }


        /**
         * Execute checkManifestChecksum request
         * @return ManifestChecksum
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ManifestChecksum execute() throws ApiException {
            ApiResponse<ManifestChecksum> localVarResp = checkManifestChecksumWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkManifestChecksum request with HTTP info returned
         * @return ApiResponse&lt;ManifestChecksum&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ManifestChecksum> executeWithHttpInfo() throws ApiException {
            return checkManifestChecksumWithHttpInfo(id);
        }

        /**
         * Execute checkManifestChecksum request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ManifestChecksum> _callback) throws ApiException {
            return checkManifestChecksumAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @return CheckManifestChecksumRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CheckManifestChecksumRequestBuilder checkManifestChecksum() throws IllegalArgumentException {
        return new CheckManifestChecksumRequestBuilder();
    }
    private okhttp3.Call createManifestDataCall(SaveManifestRequest saveManifestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveManifestRequest;

        // create path and map variables
        String localVarPath = "/basic/content/manifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManifestDataValidateBeforeCall(SaveManifestRequest saveManifestRequest, final ApiCallback _callback) throws ApiException {
        return createManifestDataCall(saveManifestRequest, _callback);

    }


    private ApiResponse<Manifest> createManifestDataWithHttpInfo(SaveManifestRequest saveManifestRequest) throws ApiException {
        okhttp3.Call localVarCall = createManifestDataValidateBeforeCall(saveManifestRequest, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createManifestDataAsync(SaveManifestRequest saveManifestRequest, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManifestDataValidateBeforeCall(saveManifestRequest, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateManifestDataRequestBuilder {
        private String id;
        private List<ReferenceSuperset> references;

        private CreateManifestDataRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return CreateManifestDataRequestBuilder
         */
        public CreateManifestDataRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set references
         * @param references  (optional)
         * @return CreateManifestDataRequestBuilder
         */
        public CreateManifestDataRequestBuilder references(List<ReferenceSuperset> references) {
            this.references = references;
            return this;
        }
        
        /**
         * Build call for createManifestData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SaveManifestRequest saveManifestRequest = buildBodyParams();
            return createManifestDataCall(saveManifestRequest, _callback);
        }

        private SaveManifestRequest buildBodyParams() {
            SaveManifestRequest saveManifestRequest = new SaveManifestRequest();
            saveManifestRequest.id(this.id);
            saveManifestRequest.references(this.references);
            return saveManifestRequest;
        }

        /**
         * Execute createManifestData request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            SaveManifestRequest saveManifestRequest = buildBodyParams();
            ApiResponse<Manifest> localVarResp = createManifestDataWithHttpInfo(saveManifestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createManifestData request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            SaveManifestRequest saveManifestRequest = buildBodyParams();
            return createManifestDataWithHttpInfo(saveManifestRequest);
        }

        /**
         * Execute createManifestData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            SaveManifestRequest saveManifestRequest = buildBodyParams();
            return createManifestDataAsync(saveManifestRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateManifestDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateManifestDataRequestBuilder createManifestData() throws IllegalArgumentException {
        return new CreateManifestDataRequestBuilder();
    }
    private okhttp3.Call createNewContentCall(SaveContentRequest saveContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveContentRequest;

        // create path and map variables
        String localVarPath = "/basic/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContentValidateBeforeCall(SaveContentRequest saveContentRequest, final ApiCallback _callback) throws ApiException {
        return createNewContentCall(saveContentRequest, _callback);

    }


    private ApiResponse<SaveContentResponse> createNewContentWithHttpInfo(SaveContentRequest saveContentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewContentValidateBeforeCall(saveContentRequest, null);
        Type localVarReturnType = new TypeToken<SaveContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContentAsync(SaveContentRequest saveContentRequest, final ApiCallback<SaveContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContentValidateBeforeCall(saveContentRequest, _callback);
        Type localVarReturnType = new TypeToken<SaveContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContentRequestBuilder {
        private List<ContentDefinition> content;

        private CreateNewContentRequestBuilder() {
        }

        /**
         * Set content
         * @param content  (optional)
         * @return CreateNewContentRequestBuilder
         */
        public CreateNewContentRequestBuilder content(List<ContentDefinition> content) {
            this.content = content;
            return this;
        }
        
        /**
         * Build call for createNewContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SaveContentRequest saveContentRequest = buildBodyParams();
            return createNewContentCall(saveContentRequest, _callback);
        }

        private SaveContentRequest buildBodyParams() {
            SaveContentRequest saveContentRequest = new SaveContentRequest();
            saveContentRequest.content(this.content);
            return saveContentRequest;
        }

        /**
         * Execute createNewContent request
         * @return SaveContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SaveContentResponse execute() throws ApiException {
            SaveContentRequest saveContentRequest = buildBodyParams();
            ApiResponse<SaveContentResponse> localVarResp = createNewContentWithHttpInfo(saveContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContent request with HTTP info returned
         * @return ApiResponse&lt;SaveContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveContentResponse> executeWithHttpInfo() throws ApiException {
            SaveContentRequest saveContentRequest = buildBodyParams();
            return createNewContentWithHttpInfo(saveContentRequest);
        }

        /**
         * Execute createNewContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveContentResponse> _callback) throws ApiException {
            SaveContentRequest saveContentRequest = buildBodyParams();
            return createNewContentAsync(saveContentRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContentRequestBuilder createNewContent() throws IllegalArgumentException {
        return new CreateNewContentRequestBuilder();
    }
    private okhttp3.Call deleteEventContentCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}/content"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventContentValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteEventContent(Async)");
        }

        return deleteEventContentCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> deleteEventContentWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteEventContentValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEventContentAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventContentValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEventContentRequestBuilder {
        private final String objectId;

        private DeleteEventContentRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for deleteEventContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEventContentCall(objectId, _callback);
        }


        /**
         * Execute deleteEventContent request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = deleteEventContentWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEventContent request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return deleteEventContentWithHttpInfo(objectId);
        }

        /**
         * Execute deleteEventContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return deleteEventContentAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteEventContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventContentRequestBuilder deleteEventContent(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteEventContentRequestBuilder(objectId);
    }
    private okhttp3.Call getAnnouncementContentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/announcements/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnouncementContentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAnnouncementContentCall(_callback);

    }


    private ApiResponse<AnnouncementContentResponse> getAnnouncementContentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAnnouncementContentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAnnouncementContentAsync(final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnouncementContentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AnnouncementContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAnnouncementContentRequestBuilder {

        private GetAnnouncementContentRequestBuilder() {
        }

        /**
         * Build call for getAnnouncementContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAnnouncementContentCall(_callback);
        }


        /**
         * Execute getAnnouncementContent request
         * @return AnnouncementContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public AnnouncementContentResponse execute() throws ApiException {
            ApiResponse<AnnouncementContentResponse> localVarResp = getAnnouncementContentWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAnnouncementContent request with HTTP info returned
         * @return ApiResponse&lt;AnnouncementContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnouncementContentResponse> executeWithHttpInfo() throws ApiException {
            return getAnnouncementContentWithHttpInfo();
        }

        /**
         * Execute getAnnouncementContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnouncementContentResponse> _callback) throws ApiException {
            return getAnnouncementContentAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetAnnouncementContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetAnnouncementContentRequestBuilder getAnnouncementContent() throws IllegalArgumentException {
        return new GetAnnouncementContentRequestBuilder();
    }
    private okhttp3.Call getContentDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/events/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getContentDataCall(_callback);

    }


    private ApiResponse<EventContentResponse> getContentDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getContentDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EventContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentDataAsync(final ApiCallback<EventContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EventContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentDataRequestBuilder {

        private GetContentDataRequestBuilder() {
        }

        /**
         * Build call for getContentData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentDataCall(_callback);
        }


        /**
         * Execute getContentData request
         * @return EventContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public EventContentResponse execute() throws ApiException {
            ApiResponse<EventContentResponse> localVarResp = getContentDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentData request with HTTP info returned
         * @return ApiResponse&lt;EventContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventContentResponse> executeWithHttpInfo() throws ApiException {
            return getContentDataWithHttpInfo();
        }

        /**
         * Execute getContentData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventContentResponse> _callback) throws ApiException {
            return getContentDataAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetContentDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetContentDataRequestBuilder getContentData() throws IllegalArgumentException {
        return new GetContentDataRequestBuilder();
    }
    private okhttp3.Call getContentDetailsCall(String contentId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/content/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentId", contentId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDetailsValidateBeforeCall(String contentId, String version, final ApiCallback _callback) throws ApiException {
        return getContentDetailsCall(contentId, version, _callback);

    }


    private ApiResponse<ContentOrText> getContentDetailsWithHttpInfo(String contentId, String version) throws ApiException {
        okhttp3.Call localVarCall = getContentDetailsValidateBeforeCall(contentId, version, null);
        Type localVarReturnType = new TypeToken<ContentOrText>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentDetailsAsync(String contentId, String version, final ApiCallback<ContentOrText> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentDetailsValidateBeforeCall(contentId, version, _callback);
        Type localVarReturnType = new TypeToken<ContentOrText>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentDetailsRequestBuilder {
        private String contentId;
        private String version;

        private GetContentDetailsRequestBuilder() {
        }

        /**
         * Set contentId
         * @param contentId  (optional)
         * @return GetContentDetailsRequestBuilder
         */
        public GetContentDetailsRequestBuilder contentId(String contentId) {
            this.contentId = contentId;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional)
         * @return GetContentDetailsRequestBuilder
         */
        public GetContentDetailsRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Build call for getContentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentDetailsCall(contentId, version, _callback);
        }


        /**
         * Execute getContentDetails request
         * @return ContentOrText
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ContentOrText execute() throws ApiException {
            ApiResponse<ContentOrText> localVarResp = getContentDetailsWithHttpInfo(contentId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentDetails request with HTTP info returned
         * @return ApiResponse&lt;ContentOrText&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentOrText> executeWithHttpInfo() throws ApiException {
            return getContentDetailsWithHttpInfo(contentId, version);
        }

        /**
         * Execute getContentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentOrText> _callback) throws ApiException {
            return getContentDetailsAsync(contentId, version, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetContentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetContentDetailsRequestBuilder getContentDetails() throws IllegalArgumentException {
        return new GetContentDetailsRequestBuilder();
    }
    private okhttp3.Call getManifestDataCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/content/manifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManifestDataValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return getManifestDataCall(id, _callback);

    }


    private ApiResponse<Manifest> getManifestDataWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getManifestDataValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManifestDataAsync(String id, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManifestDataValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManifestDataRequestBuilder {
        private String id;

        private GetManifestDataRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return GetManifestDataRequestBuilder
         */
        public GetManifestDataRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for getManifestData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManifestDataCall(id, _callback);
        }


        /**
         * Execute getManifestData request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            ApiResponse<Manifest> localVarResp = getManifestDataWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getManifestData request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            return getManifestDataWithHttpInfo(id);
        }

        /**
         * Execute getManifestData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            return getManifestDataAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetManifestDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetManifestDataRequestBuilder getManifestData() throws IllegalArgumentException {
        return new GetManifestDataRequestBuilder();
    }
    private okhttp3.Call getPrivateManifestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/content/manifest/private";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrivateManifestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return getPrivateManifestCall(id, _callback);

    }


    private ApiResponse<ClientManifest> getPrivateManifestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPrivateManifestValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClientManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrivateManifestAsync(String id, final ApiCallback<ClientManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrivateManifestValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClientManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPrivateManifestRequestBuilder {
        private String id;

        private GetPrivateManifestRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return GetPrivateManifestRequestBuilder
         */
        public GetPrivateManifestRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for getPrivateManifest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrivateManifestCall(id, _callback);
        }


        /**
         * Execute getPrivateManifest request
         * @return ClientManifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ClientManifest execute() throws ApiException {
            ApiResponse<ClientManifest> localVarResp = getPrivateManifestWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrivateManifest request with HTTP info returned
         * @return ApiResponse&lt;ClientManifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientManifest> executeWithHttpInfo() throws ApiException {
            return getPrivateManifestWithHttpInfo(id);
        }

        /**
         * Execute getPrivateManifest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientManifest> _callback) throws ApiException {
            return getPrivateManifestAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetPrivateManifestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPrivateManifestRequestBuilder getPrivateManifest() throws IllegalArgumentException {
        return new GetPrivateManifestRequestBuilder();
    }
    private okhttp3.Call getPublicManifestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/content/manifest/public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicManifestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return getPublicManifestCall(id, _callback);

    }


    private ApiResponse<ClientManifest> getPublicManifestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPublicManifestValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClientManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPublicManifestAsync(String id, final ApiCallback<ClientManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicManifestValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClientManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPublicManifestRequestBuilder {
        private String id;

        private GetPublicManifestRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return GetPublicManifestRequestBuilder
         */
        public GetPublicManifestRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for getPublicManifest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPublicManifestCall(id, _callback);
        }


        /**
         * Execute getPublicManifest request
         * @return ClientManifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ClientManifest execute() throws ApiException {
            ApiResponse<ClientManifest> localVarResp = getPublicManifestWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPublicManifest request with HTTP info returned
         * @return ApiResponse&lt;ClientManifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientManifest> executeWithHttpInfo() throws ApiException {
            return getPublicManifestWithHttpInfo(id);
        }

        /**
         * Execute getPublicManifest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientManifest> _callback) throws ApiException {
            return getPublicManifestAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @return GetPublicManifestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicManifestRequestBuilder getPublicManifest() throws IllegalArgumentException {
        return new GetPublicManifestRequestBuilder();
    }
    private okhttp3.Call pullManifestDataCall(PullManifestRequest pullManifestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullManifestRequest;

        // create path and map variables
        String localVarPath = "/basic/content/manifest/pull";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullManifestDataValidateBeforeCall(PullManifestRequest pullManifestRequest, final ApiCallback _callback) throws ApiException {
        return pullManifestDataCall(pullManifestRequest, _callback);

    }


    private ApiResponse<Manifest> pullManifestDataWithHttpInfo(PullManifestRequest pullManifestRequest) throws ApiException {
        okhttp3.Call localVarCall = pullManifestDataValidateBeforeCall(pullManifestRequest, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pullManifestDataAsync(PullManifestRequest pullManifestRequest, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullManifestDataValidateBeforeCall(pullManifestRequest, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PullManifestDataRequestBuilder {
        private String sourceRealmPid;
        private String id;

        private PullManifestDataRequestBuilder() {
        }

        /**
         * Set sourceRealmPid
         * @param sourceRealmPid  (optional)
         * @return PullManifestDataRequestBuilder
         */
        public PullManifestDataRequestBuilder sourceRealmPid(String sourceRealmPid) {
            this.sourceRealmPid = sourceRealmPid;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return PullManifestDataRequestBuilder
         */
        public PullManifestDataRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for pullManifestData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PullManifestRequest pullManifestRequest = buildBodyParams();
            return pullManifestDataCall(pullManifestRequest, _callback);
        }

        private PullManifestRequest buildBodyParams() {
            PullManifestRequest pullManifestRequest = new PullManifestRequest();
            pullManifestRequest.sourceRealmPid(this.sourceRealmPid);
            pullManifestRequest.id(this.id);
            return pullManifestRequest;
        }

        /**
         * Execute pullManifestData request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            PullManifestRequest pullManifestRequest = buildBodyParams();
            ApiResponse<Manifest> localVarResp = pullManifestDataWithHttpInfo(pullManifestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pullManifestData request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            PullManifestRequest pullManifestRequest = buildBodyParams();
            return pullManifestDataWithHttpInfo(pullManifestRequest);
        }

        /**
         * Execute pullManifestData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            PullManifestRequest pullManifestRequest = buildBodyParams();
            return pullManifestDataAsync(pullManifestRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return PullManifestDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PullManifestDataRequestBuilder pullManifestData() throws IllegalArgumentException {
        return new PullManifestDataRequestBuilder();
    }
    private okhttp3.Call submitTextContentCall(SaveTextRequest saveTextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveTextRequest;

        // create path and map variables
        String localVarPath = "/basic/content/text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTextContentValidateBeforeCall(SaveTextRequest saveTextRequest, final ApiCallback _callback) throws ApiException {
        return submitTextContentCall(saveTextRequest, _callback);

    }


    private ApiResponse<SaveTextResponse> submitTextContentWithHttpInfo(SaveTextRequest saveTextRequest) throws ApiException {
        okhttp3.Call localVarCall = submitTextContentValidateBeforeCall(saveTextRequest, null);
        Type localVarReturnType = new TypeToken<SaveTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitTextContentAsync(SaveTextRequest saveTextRequest, final ApiCallback<SaveTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTextContentValidateBeforeCall(saveTextRequest, _callback);
        Type localVarReturnType = new TypeToken<SaveTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitTextContentRequestBuilder {
        private List<TextDefinition> text;

        private SubmitTextContentRequestBuilder() {
        }

        /**
         * Set text
         * @param text  (optional)
         * @return SubmitTextContentRequestBuilder
         */
        public SubmitTextContentRequestBuilder text(List<TextDefinition> text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for submitTextContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SaveTextRequest saveTextRequest = buildBodyParams();
            return submitTextContentCall(saveTextRequest, _callback);
        }

        private SaveTextRequest buildBodyParams() {
            SaveTextRequest saveTextRequest = new SaveTextRequest();
            saveTextRequest.text(this.text);
            return saveTextRequest;
        }

        /**
         * Execute submitTextContent request
         * @return SaveTextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SaveTextResponse execute() throws ApiException {
            SaveTextRequest saveTextRequest = buildBodyParams();
            ApiResponse<SaveTextResponse> localVarResp = submitTextContentWithHttpInfo(saveTextRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitTextContent request with HTTP info returned
         * @return ApiResponse&lt;SaveTextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveTextResponse> executeWithHttpInfo() throws ApiException {
            SaveTextRequest saveTextRequest = buildBodyParams();
            return submitTextContentWithHttpInfo(saveTextRequest);
        }

        /**
         * Execute submitTextContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveTextResponse> _callback) throws ApiException {
            SaveTextRequest saveTextRequest = buildBodyParams();
            return submitTextContentAsync(saveTextRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SubmitTextContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTextContentRequestBuilder submitTextContent() throws IllegalArgumentException {
        return new SubmitTextContentRequestBuilder();
    }
    private okhttp3.Call updateObjectContentCall(String objectId, SetContentRequest setContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setContentRequest;

        // create path and map variables
        String localVarPath = "/object/events/{objectId}/content"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectContentValidateBeforeCall(String objectId, SetContentRequest setContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectContent(Async)");
        }

        return updateObjectContentCall(objectId, setContentRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateObjectContentWithHttpInfo(String objectId, SetContentRequest setContentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateObjectContentValidateBeforeCall(objectId, setContentRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectContentAsync(String objectId, SetContentRequest setContentRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectContentValidateBeforeCall(objectId, setContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectContentRequestBuilder {
        private final String objectId;
        private Event event;
        private String origin;

        private UpdateObjectContentRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set event
         * @param event  (optional)
         * @return UpdateObjectContentRequestBuilder
         */
        public UpdateObjectContentRequestBuilder event(Event event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set origin
         * @param origin  (optional)
         * @return UpdateObjectContentRequestBuilder
         */
        public UpdateObjectContentRequestBuilder origin(String origin) {
            this.origin = origin;
            return this;
        }
        
        /**
         * Build call for updateObjectContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SetContentRequest setContentRequest = buildBodyParams();
            return updateObjectContentCall(objectId, setContentRequest, _callback);
        }

        private SetContentRequest buildBodyParams() {
            SetContentRequest setContentRequest = new SetContentRequest();
            setContentRequest.event(this.event);
            setContentRequest.origin(this.origin);
            return setContentRequest;
        }

        /**
         * Execute updateObjectContent request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            SetContentRequest setContentRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateObjectContentWithHttpInfo(objectId, setContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObjectContent request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            SetContentRequest setContentRequest = buildBodyParams();
            return updateObjectContentWithHttpInfo(objectId, setContentRequest);
        }

        /**
         * Execute updateObjectContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            SetContentRequest setContentRequest = buildBodyParams();
            return updateObjectContentAsync(objectId, setContentRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateObjectContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectContentRequestBuilder updateObjectContent(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateObjectContentRequestBuilder(objectId);
    }
}
