/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.NotificationRequest;
import com.konfigthis.client.model.NotificationRequestData;
import com.konfigthis.client.model.ServerEvent;
import com.konfigthis.client.model.SubscriberDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomNotificationCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/basic/notification/custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomNotificationValidateBeforeCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        return createCustomNotificationCall(notificationRequest, _callback);

    }


    private ApiResponse<CommonResponse> createCustomNotificationWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomNotificationValidateBeforeCall(notificationRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomNotificationAsync(NotificationRequest notificationRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomNotificationValidateBeforeCall(notificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomNotificationRequestBuilder {
        private NotificationRequestData payload;
        private Integer dbid;
        private String customChannelSuffix;
        private List<Integer> dbids;

        private CreateCustomNotificationRequestBuilder() {
        }

        /**
         * Set payload
         * @param payload  (optional)
         * @return CreateCustomNotificationRequestBuilder
         */
        public CreateCustomNotificationRequestBuilder payload(NotificationRequestData payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set dbid
         * @param dbid  (optional)
         * @return CreateCustomNotificationRequestBuilder
         */
        public CreateCustomNotificationRequestBuilder dbid(Integer dbid) {
            this.dbid = dbid;
            return this;
        }
        
        /**
         * Set customChannelSuffix
         * @param customChannelSuffix  (optional)
         * @return CreateCustomNotificationRequestBuilder
         */
        public CreateCustomNotificationRequestBuilder customChannelSuffix(String customChannelSuffix) {
            this.customChannelSuffix = customChannelSuffix;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return CreateCustomNotificationRequestBuilder
         */
        public CreateCustomNotificationRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for createCustomNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return createCustomNotificationCall(notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.payload(this.payload);
            notificationRequest.dbid(this.dbid);
            notificationRequest.customChannelSuffix(this.customChannelSuffix);
            notificationRequest.dbids(this.dbids);
            return notificationRequest;
        }

        /**
         * Execute createCustomNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = createCustomNotificationWithHttpInfo(notificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return createCustomNotificationWithHttpInfo(notificationRequest);
        }

        /**
         * Execute createCustomNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return createCustomNotificationAsync(notificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateCustomNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomNotificationRequestBuilder createCustomNotification() throws IllegalArgumentException {
        return new CreateCustomNotificationRequestBuilder();
    }
    private okhttp3.Call getUnreadMessagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnreadMessagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUnreadMessagesCall(_callback);

    }


    private ApiResponse<SubscriberDetailsResponse> getUnreadMessagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUnreadMessagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SubscriberDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnreadMessagesAsync(final ApiCallback<SubscriberDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnreadMessagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SubscriberDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnreadMessagesRequestBuilder {

        private GetUnreadMessagesRequestBuilder() {
        }

        /**
         * Build call for getUnreadMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnreadMessagesCall(_callback);
        }


        /**
         * Execute getUnreadMessages request
         * @return SubscriberDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public SubscriberDetailsResponse execute() throws ApiException {
            ApiResponse<SubscriberDetailsResponse> localVarResp = getUnreadMessagesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnreadMessages request with HTTP info returned
         * @return ApiResponse&lt;SubscriberDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriberDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getUnreadMessagesWithHttpInfo();
        }

        /**
         * Execute getUnreadMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriberDetailsResponse> _callback) throws ApiException {
            return getUnreadMessagesAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetUnreadMessagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetUnreadMessagesRequestBuilder getUnreadMessages() throws IllegalArgumentException {
        return new GetUnreadMessagesRequestBuilder();
    }
    private okhttp3.Call sendGlobalNotificationCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/basic/notification/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendGlobalNotificationValidateBeforeCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        return sendGlobalNotificationCall(notificationRequest, _callback);

    }


    private ApiResponse<CommonResponse> sendGlobalNotificationWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendGlobalNotificationValidateBeforeCall(notificationRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendGlobalNotificationAsync(NotificationRequest notificationRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendGlobalNotificationValidateBeforeCall(notificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendGlobalNotificationRequestBuilder {
        private NotificationRequestData payload;
        private Integer dbid;
        private String customChannelSuffix;
        private List<Integer> dbids;

        private SendGlobalNotificationRequestBuilder() {
        }

        /**
         * Set payload
         * @param payload  (optional)
         * @return SendGlobalNotificationRequestBuilder
         */
        public SendGlobalNotificationRequestBuilder payload(NotificationRequestData payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set dbid
         * @param dbid  (optional)
         * @return SendGlobalNotificationRequestBuilder
         */
        public SendGlobalNotificationRequestBuilder dbid(Integer dbid) {
            this.dbid = dbid;
            return this;
        }
        
        /**
         * Set customChannelSuffix
         * @param customChannelSuffix  (optional)
         * @return SendGlobalNotificationRequestBuilder
         */
        public SendGlobalNotificationRequestBuilder customChannelSuffix(String customChannelSuffix) {
            this.customChannelSuffix = customChannelSuffix;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return SendGlobalNotificationRequestBuilder
         */
        public SendGlobalNotificationRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for sendGlobalNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendGlobalNotificationCall(notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.payload(this.payload);
            notificationRequest.dbid(this.dbid);
            notificationRequest.customChannelSuffix(this.customChannelSuffix);
            notificationRequest.dbids(this.dbids);
            return notificationRequest;
        }

        /**
         * Execute sendGlobalNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = sendGlobalNotificationWithHttpInfo(notificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendGlobalNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendGlobalNotificationWithHttpInfo(notificationRequest);
        }

        /**
         * Execute sendGlobalNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendGlobalNotificationAsync(notificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendGlobalNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendGlobalNotificationRequestBuilder sendGlobalNotification() throws IllegalArgumentException {
        return new SendGlobalNotificationRequestBuilder();
    }
    private okhttp3.Call sendNotificationCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/basic/notification/generic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendNotificationValidateBeforeCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        return sendNotificationCall(notificationRequest, _callback);

    }


    private ApiResponse<CommonResponse> sendNotificationWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendNotificationValidateBeforeCall(notificationRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendNotificationAsync(NotificationRequest notificationRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendNotificationValidateBeforeCall(notificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendNotificationRequestBuilder {
        private NotificationRequestData payload;
        private Integer dbid;
        private String customChannelSuffix;
        private List<Integer> dbids;

        private SendNotificationRequestBuilder() {
        }

        /**
         * Set payload
         * @param payload  (optional)
         * @return SendNotificationRequestBuilder
         */
        public SendNotificationRequestBuilder payload(NotificationRequestData payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set dbid
         * @param dbid  (optional)
         * @return SendNotificationRequestBuilder
         */
        public SendNotificationRequestBuilder dbid(Integer dbid) {
            this.dbid = dbid;
            return this;
        }
        
        /**
         * Set customChannelSuffix
         * @param customChannelSuffix  (optional)
         * @return SendNotificationRequestBuilder
         */
        public SendNotificationRequestBuilder customChannelSuffix(String customChannelSuffix) {
            this.customChannelSuffix = customChannelSuffix;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return SendNotificationRequestBuilder
         */
        public SendNotificationRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for sendNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendNotificationCall(notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.payload(this.payload);
            notificationRequest.dbid(this.dbid);
            notificationRequest.customChannelSuffix(this.customChannelSuffix);
            notificationRequest.dbids(this.dbids);
            return notificationRequest;
        }

        /**
         * Execute sendNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = sendNotificationWithHttpInfo(notificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendNotificationWithHttpInfo(notificationRequest);
        }

        /**
         * Execute sendNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendNotificationAsync(notificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendNotificationRequestBuilder sendNotification() throws IllegalArgumentException {
        return new SendNotificationRequestBuilder();
    }
    private okhttp3.Call sendPlayerNotificationCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/basic/notification/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPlayerNotificationValidateBeforeCall(NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        return sendPlayerNotificationCall(notificationRequest, _callback);

    }


    private ApiResponse<CommonResponse> sendPlayerNotificationWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPlayerNotificationValidateBeforeCall(notificationRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendPlayerNotificationAsync(NotificationRequest notificationRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPlayerNotificationValidateBeforeCall(notificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendPlayerNotificationRequestBuilder {
        private NotificationRequestData payload;
        private Integer dbid;
        private String customChannelSuffix;
        private List<Integer> dbids;

        private SendPlayerNotificationRequestBuilder() {
        }

        /**
         * Set payload
         * @param payload  (optional)
         * @return SendPlayerNotificationRequestBuilder
         */
        public SendPlayerNotificationRequestBuilder payload(NotificationRequestData payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set dbid
         * @param dbid  (optional)
         * @return SendPlayerNotificationRequestBuilder
         */
        public SendPlayerNotificationRequestBuilder dbid(Integer dbid) {
            this.dbid = dbid;
            return this;
        }
        
        /**
         * Set customChannelSuffix
         * @param customChannelSuffix  (optional)
         * @return SendPlayerNotificationRequestBuilder
         */
        public SendPlayerNotificationRequestBuilder customChannelSuffix(String customChannelSuffix) {
            this.customChannelSuffix = customChannelSuffix;
            return this;
        }
        
        /**
         * Set dbids
         * @param dbids  (optional)
         * @return SendPlayerNotificationRequestBuilder
         */
        public SendPlayerNotificationRequestBuilder dbids(List<Integer> dbids) {
            this.dbids = dbids;
            return this;
        }
        
        /**
         * Build call for sendPlayerNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendPlayerNotificationCall(notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.payload(this.payload);
            notificationRequest.dbid(this.dbid);
            notificationRequest.customChannelSuffix(this.customChannelSuffix);
            notificationRequest.dbids(this.dbids);
            return notificationRequest;
        }

        /**
         * Execute sendPlayerNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = sendPlayerNotificationWithHttpInfo(notificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendPlayerNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendPlayerNotificationWithHttpInfo(notificationRequest);
        }

        /**
         * Execute sendPlayerNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendPlayerNotificationAsync(notificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendPlayerNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendPlayerNotificationRequestBuilder sendPlayerNotification() throws IllegalArgumentException {
        return new SendPlayerNotificationRequestBuilder();
    }
    private okhttp3.Call sendServerNotificationCall(ServerEvent serverEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverEvent;

        // create path and map variables
        String localVarPath = "/basic/notification/server";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendServerNotificationValidateBeforeCall(ServerEvent serverEvent, final ApiCallback _callback) throws ApiException {
        return sendServerNotificationCall(serverEvent, _callback);

    }


    private ApiResponse<CommonResponse> sendServerNotificationWithHttpInfo(ServerEvent serverEvent) throws ApiException {
        okhttp3.Call localVarCall = sendServerNotificationValidateBeforeCall(serverEvent, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendServerNotificationAsync(ServerEvent serverEvent, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendServerNotificationValidateBeforeCall(serverEvent, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendServerNotificationRequestBuilder {
        private final Boolean toAll;
        private String event;
        private Object payload;

        private SendServerNotificationRequestBuilder(Boolean toAll) {
            this.toAll = toAll;
        }

        /**
         * Set event
         * @param event  (optional)
         * @return SendServerNotificationRequestBuilder
         */
        public SendServerNotificationRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set payload
         * @param payload  (optional)
         * @return SendServerNotificationRequestBuilder
         */
        public SendServerNotificationRequestBuilder payload(Object payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Build call for sendServerNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServerEvent serverEvent = buildBodyParams();
            return sendServerNotificationCall(serverEvent, _callback);
        }

        private ServerEvent buildBodyParams() {
            ServerEvent serverEvent = new ServerEvent();
            serverEvent.event(this.event);
            serverEvent.payload(this.payload);
            serverEvent.toAll(this.toAll);
            return serverEvent;
        }

        /**
         * Execute sendServerNotification request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ServerEvent serverEvent = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = sendServerNotificationWithHttpInfo(serverEvent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendServerNotification request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            ServerEvent serverEvent = buildBodyParams();
            return sendServerNotificationWithHttpInfo(serverEvent);
        }

        /**
         * Execute sendServerNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            ServerEvent serverEvent = buildBodyParams();
            return sendServerNotificationAsync(serverEvent, _callback);
        }
    }

    /**
     * 
     * 
     * @return SendServerNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SendServerNotificationRequestBuilder sendServerNotification(Boolean toAll) throws IllegalArgumentException {
        if (toAll == null) throw new IllegalArgumentException("\"toAll\" is required but got null");
        return new SendServerNotificationRequestBuilder(toAll);
    }
}
