/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientPermission;
import com.konfigthis.client.model.CommonResponse;
import com.konfigthis.client.model.LeaderBoardViewResponse;
import com.konfigthis.client.model.LeaderboardAddRequest;
import com.konfigthis.client.model.LeaderboardAssignmentInfo;
import com.konfigthis.client.model.LeaderboardCreateRequest;
import com.konfigthis.client.model.LeaderboardDetails;
import com.konfigthis.client.model.LeaderboardListResponse;
import com.konfigthis.client.model.LeaderboardMembershipResponse;
import com.konfigthis.client.model.LeaderboardPartitionInfo;
import com.konfigthis.client.model.LeaderboardRemoveCacheEntryRequest;
import com.konfigthis.client.model.LeaderboardRemoveEntryRequest;
import com.konfigthis.client.model.LeaderboardSwapRequest;
import com.konfigthis.client.model.LeaderboardUidResponse;
import com.konfigthis.client.model.ListLeaderBoardViewResponse;
import com.konfigthis.client.model.MatchMakingMatchesPvpResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeaderboardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeaderboardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeaderboardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApi() == null) {
            throw new IllegalArgumentException("\"X-DE-SIGNATURE\" is required but no API key was provided. Please set \"X-DE-SIGNATURE\" with ApiClient#setApi(String).");
        }
        if (apiClient.getScope() == null) {
            throw new IllegalArgumentException("\"X-DE-SCOPE\" is required but no API key was provided. Please set \"X-DE-SCOPE\" with ApiClient#setScope(String).");
        }
        if (apiClient.getUserRequired() == null) {
            throw new IllegalArgumentException("\"X-DE-GAMERTAG\" is required but no API key was provided. Please set \"X-DE-GAMERTAG\" with ApiClient#setUserRequired(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFreezeRequestCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/freeze"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFreezeRequestValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createFreezeRequest(Async)");
        }

        return createFreezeRequestCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> createFreezeRequestWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = createFreezeRequestValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFreezeRequestAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFreezeRequestValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFreezeRequestRequestBuilder {
        private final String objectId;

        private CreateFreezeRequestRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for createFreezeRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFreezeRequestCall(objectId, _callback);
        }


        /**
         * Execute createFreezeRequest request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = createFreezeRequestWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFreezeRequest request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return createFreezeRequestWithHttpInfo(objectId);
        }

        /**
         * Execute createFreezeRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return createFreezeRequestAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return CreateFreezeRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateFreezeRequestRequestBuilder createFreezeRequest(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new CreateFreezeRequestRequestBuilder(objectId);
    }
    private okhttp3.Call deleteEntriesCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/entries"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntriesValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteEntries(Async)");
        }

        return deleteEntriesCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> deleteEntriesWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteEntriesValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEntriesAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntriesValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEntriesRequestBuilder {
        private final String objectId;

        private DeleteEntriesRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for deleteEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEntriesCall(objectId, _callback);
        }


        /**
         * Execute deleteEntries request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = deleteEntriesWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEntries request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return deleteEntriesWithHttpInfo(objectId);
        }

        /**
         * Execute deleteEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return deleteEntriesAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEntriesRequestBuilder deleteEntries(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteEntriesRequestBuilder(objectId);
    }
    private okhttp3.Call deleteObjectByIdCall(String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectByIdValidateBeforeCall(String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteObjectById(Async)");
        }

        return deleteObjectByIdCall(objectId, _callback);

    }


    private ApiResponse<CommonResponse> deleteObjectByIdWithHttpInfo(String objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectByIdValidateBeforeCall(objectId, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteObjectByIdAsync(String objectId, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectByIdValidateBeforeCall(objectId, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteObjectByIdRequestBuilder {
        private final String objectId;

        private DeleteObjectByIdRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Build call for deleteObjectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteObjectByIdCall(objectId, _callback);
        }


        /**
         * Execute deleteObjectById request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            ApiResponse<CommonResponse> localVarResp = deleteObjectByIdWithHttpInfo(objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteObjectById request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            return deleteObjectByIdWithHttpInfo(objectId);
        }

        /**
         * Execute deleteObjectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            return deleteObjectByIdAsync(objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return DeleteObjectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeleteObjectByIdRequestBuilder deleteObjectById(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new DeleteObjectByIdRequestBuilder(objectId);
    }
    private okhttp3.Call getAssignmentLeaderboardCall(String boardId, Boolean joinBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/leaderboards/assignment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardId", boardId));
        }

        if (joinBoard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("joinBoard", joinBoard));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentLeaderboardValidateBeforeCall(String boardId, Boolean joinBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getAssignmentLeaderboard(Async)");
        }

        return getAssignmentLeaderboardCall(boardId, joinBoard, _callback);

    }


    private ApiResponse<LeaderboardAssignmentInfo> getAssignmentLeaderboardWithHttpInfo(String boardId, Boolean joinBoard) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentLeaderboardValidateBeforeCall(boardId, joinBoard, null);
        Type localVarReturnType = new TypeToken<LeaderboardAssignmentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentLeaderboardAsync(String boardId, Boolean joinBoard, final ApiCallback<LeaderboardAssignmentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentLeaderboardValidateBeforeCall(boardId, joinBoard, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardAssignmentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentLeaderboardRequestBuilder {
        private final String boardId;
        private Boolean joinBoard;

        private GetAssignmentLeaderboardRequestBuilder(String boardId) {
            this.boardId = boardId;
        }

        /**
         * Set joinBoard
         * @param joinBoard  (optional)
         * @return GetAssignmentLeaderboardRequestBuilder
         */
        public GetAssignmentLeaderboardRequestBuilder joinBoard(Boolean joinBoard) {
            this.joinBoard = joinBoard;
            return this;
        }
        
        /**
         * Build call for getAssignmentLeaderboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentLeaderboardCall(boardId, joinBoard, _callback);
        }


        /**
         * Execute getAssignmentLeaderboard request
         * @return LeaderboardAssignmentInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardAssignmentInfo execute() throws ApiException {
            ApiResponse<LeaderboardAssignmentInfo> localVarResp = getAssignmentLeaderboardWithHttpInfo(boardId, joinBoard);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignmentLeaderboard request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardAssignmentInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardAssignmentInfo> executeWithHttpInfo() throws ApiException {
            return getAssignmentLeaderboardWithHttpInfo(boardId, joinBoard);
        }

        /**
         * Execute getAssignmentLeaderboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardAssignmentInfo> _callback) throws ApiException {
            return getAssignmentLeaderboardAsync(boardId, joinBoard, _callback);
        }
    }

    /**
     * 
     * 
     * @param boardId  (required)
     * @return GetAssignmentLeaderboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentLeaderboardRequestBuilder getAssignmentLeaderboard(String boardId) throws IllegalArgumentException {
        if (boardId == null) throw new IllegalArgumentException("\"boardId\" is required but got null");
            

        return new GetAssignmentLeaderboardRequestBuilder(boardId);
    }
    private okhttp3.Call getObjectDetailsCall(String objectId, Integer from, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/details"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectDetailsValidateBeforeCall(String objectId, Integer from, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectDetails(Async)");
        }

        return getObjectDetailsCall(objectId, from, max, _callback);

    }


    private ApiResponse<LeaderboardDetails> getObjectDetailsWithHttpInfo(String objectId, Integer from, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getObjectDetailsValidateBeforeCall(objectId, from, max, null);
        Type localVarReturnType = new TypeToken<LeaderboardDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectDetailsAsync(String objectId, Integer from, Integer max, final ApiCallback<LeaderboardDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectDetailsValidateBeforeCall(objectId, from, max, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectDetailsRequestBuilder {
        private final String objectId;
        private Integer from;
        private Integer max;

        private GetObjectDetailsRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set from
         * @param from  (optional)
         * @return GetObjectDetailsRequestBuilder
         */
        public GetObjectDetailsRequestBuilder from(Integer from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set max
         * @param max  (optional)
         * @return GetObjectDetailsRequestBuilder
         */
        public GetObjectDetailsRequestBuilder max(Integer max) {
            this.max = max;
            return this;
        }
        
        /**
         * Build call for getObjectDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectDetailsCall(objectId, from, max, _callback);
        }


        /**
         * Execute getObjectDetails request
         * @return LeaderboardDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardDetails execute() throws ApiException {
            ApiResponse<LeaderboardDetails> localVarResp = getObjectDetailsWithHttpInfo(objectId, from, max);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectDetails request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardDetails> executeWithHttpInfo() throws ApiException {
            return getObjectDetailsWithHttpInfo(objectId, from, max);
        }

        /**
         * Execute getObjectDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardDetails> _callback) throws ApiException {
            return getObjectDetailsAsync(objectId, from, max, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectDetailsRequestBuilder getObjectDetails(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectDetailsRequestBuilder(objectId);
    }
    private okhttp3.Call getObjectMatchesCall(Integer poolSize, Integer windows, Integer windowSize, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/matches"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (poolSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poolSize", poolSize));
        }

        if (windows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windows", windows));
        }

        if (windowSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windowSize", windowSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectMatchesValidateBeforeCall(Integer poolSize, Integer windows, Integer windowSize, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolSize' is set
        if (poolSize == null) {
            throw new ApiException("Missing the required parameter 'poolSize' when calling getObjectMatches(Async)");
        }

        // verify the required parameter 'windows' is set
        if (windows == null) {
            throw new ApiException("Missing the required parameter 'windows' when calling getObjectMatches(Async)");
        }

        // verify the required parameter 'windowSize' is set
        if (windowSize == null) {
            throw new ApiException("Missing the required parameter 'windowSize' when calling getObjectMatches(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectMatches(Async)");
        }

        return getObjectMatchesCall(poolSize, windows, windowSize, objectId, _callback);

    }


    private ApiResponse<MatchMakingMatchesPvpResponse> getObjectMatchesWithHttpInfo(Integer poolSize, Integer windows, Integer windowSize, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectMatchesValidateBeforeCall(poolSize, windows, windowSize, objectId, null);
        Type localVarReturnType = new TypeToken<MatchMakingMatchesPvpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectMatchesAsync(Integer poolSize, Integer windows, Integer windowSize, String objectId, final ApiCallback<MatchMakingMatchesPvpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectMatchesValidateBeforeCall(poolSize, windows, windowSize, objectId, _callback);
        Type localVarReturnType = new TypeToken<MatchMakingMatchesPvpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectMatchesRequestBuilder {
        private final Integer poolSize;
        private final Integer windows;
        private final Integer windowSize;
        private final String objectId;

        private GetObjectMatchesRequestBuilder(Integer poolSize, Integer windows, Integer windowSize, String objectId) {
            this.poolSize = poolSize;
            this.windows = windows;
            this.windowSize = windowSize;
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectMatches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectMatchesCall(poolSize, windows, windowSize, objectId, _callback);
        }


        /**
         * Execute getObjectMatches request
         * @return MatchMakingMatchesPvpResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public MatchMakingMatchesPvpResponse execute() throws ApiException {
            ApiResponse<MatchMakingMatchesPvpResponse> localVarResp = getObjectMatchesWithHttpInfo(poolSize, windows, windowSize, objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectMatches request with HTTP info returned
         * @return ApiResponse&lt;MatchMakingMatchesPvpResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MatchMakingMatchesPvpResponse> executeWithHttpInfo() throws ApiException {
            return getObjectMatchesWithHttpInfo(poolSize, windows, windowSize, objectId);
        }

        /**
         * Execute getObjectMatches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MatchMakingMatchesPvpResponse> _callback) throws ApiException {
            return getObjectMatchesAsync(poolSize, windows, windowSize, objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param poolSize  (required)
     * @param windows  (required)
     * @param windowSize  (required)
     * @param objectId  (required)
     * @return GetObjectMatchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectMatchesRequestBuilder getObjectMatches(Integer poolSize, Integer windows, Integer windowSize, String objectId) throws IllegalArgumentException {
        if (poolSize == null) throw new IllegalArgumentException("\"poolSize\" is required but got null");
        if (windows == null) throw new IllegalArgumentException("\"windows\" is required but got null");
        if (windowSize == null) throw new IllegalArgumentException("\"windowSize\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectMatchesRequestBuilder(poolSize, windows, windowSize, objectId);
    }
    private okhttp3.Call getObjectMembershipCall(Integer playerId, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/membership"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectMembershipValidateBeforeCall(Integer playerId, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getObjectMembership(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectMembership(Async)");
        }

        return getObjectMembershipCall(playerId, objectId, _callback);

    }


    private ApiResponse<LeaderboardMembershipResponse> getObjectMembershipWithHttpInfo(Integer playerId, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectMembershipValidateBeforeCall(playerId, objectId, null);
        Type localVarReturnType = new TypeToken<LeaderboardMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectMembershipAsync(Integer playerId, String objectId, final ApiCallback<LeaderboardMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectMembershipValidateBeforeCall(playerId, objectId, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectMembershipRequestBuilder {
        private final Integer playerId;
        private final String objectId;

        private GetObjectMembershipRequestBuilder(Integer playerId, String objectId) {
            this.playerId = playerId;
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectMembershipCall(playerId, objectId, _callback);
        }


        /**
         * Execute getObjectMembership request
         * @return LeaderboardMembershipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardMembershipResponse execute() throws ApiException {
            ApiResponse<LeaderboardMembershipResponse> localVarResp = getObjectMembershipWithHttpInfo(playerId, objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectMembership request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardMembershipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardMembershipResponse> executeWithHttpInfo() throws ApiException {
            return getObjectMembershipWithHttpInfo(playerId, objectId);
        }

        /**
         * Execute getObjectMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardMembershipResponse> _callback) throws ApiException {
            return getObjectMembershipAsync(playerId, objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param playerId  (required)
     * @param objectId  (required)
     * @return GetObjectMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectMembershipRequestBuilder getObjectMembership(Integer playerId, String objectId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectMembershipRequestBuilder(playerId, objectId);
    }
    private okhttp3.Call getObjectPartitionCall(Integer playerId, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/partition"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectPartitionValidateBeforeCall(Integer playerId, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getObjectPartition(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectPartition(Async)");
        }

        return getObjectPartitionCall(playerId, objectId, _callback);

    }


    private ApiResponse<LeaderboardPartitionInfo> getObjectPartitionWithHttpInfo(Integer playerId, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectPartitionValidateBeforeCall(playerId, objectId, null);
        Type localVarReturnType = new TypeToken<LeaderboardPartitionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectPartitionAsync(Integer playerId, String objectId, final ApiCallback<LeaderboardPartitionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectPartitionValidateBeforeCall(playerId, objectId, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardPartitionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectPartitionRequestBuilder {
        private final Integer playerId;
        private final String objectId;

        private GetObjectPartitionRequestBuilder(Integer playerId, String objectId) {
            this.playerId = playerId;
            this.objectId = objectId;
        }

        /**
         * Build call for getObjectPartition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectPartitionCall(playerId, objectId, _callback);
        }


        /**
         * Execute getObjectPartition request
         * @return LeaderboardPartitionInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardPartitionInfo execute() throws ApiException {
            ApiResponse<LeaderboardPartitionInfo> localVarResp = getObjectPartitionWithHttpInfo(playerId, objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectPartition request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardPartitionInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardPartitionInfo> executeWithHttpInfo() throws ApiException {
            return getObjectPartitionWithHttpInfo(playerId, objectId);
        }

        /**
         * Execute getObjectPartition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardPartitionInfo> _callback) throws ApiException {
            return getObjectPartitionAsync(playerId, objectId, _callback);
        }
    }

    /**
     * 
     * 
     * @param playerId  (required)
     * @param objectId  (required)
     * @return GetObjectPartitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectPartitionRequestBuilder getObjectPartition(Integer playerId, String objectId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectPartitionRequestBuilder(playerId, objectId);
    }
    private okhttp3.Call getObjectViewCall(String objectId, Integer max, Integer focus, Boolean friends, Integer from, Integer outlier, Boolean guild, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/view"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (focus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focus", focus));
        }

        if (friends != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friends", friends));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (outlier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlier", outlier));
        }

        if (guild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guild", guild));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectViewValidateBeforeCall(String objectId, Integer max, Integer focus, Boolean friends, Integer from, Integer outlier, Boolean guild, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectView(Async)");
        }

        return getObjectViewCall(objectId, max, focus, friends, from, outlier, guild, _callback);

    }


    private ApiResponse<LeaderBoardViewResponse> getObjectViewWithHttpInfo(String objectId, Integer max, Integer focus, Boolean friends, Integer from, Integer outlier, Boolean guild) throws ApiException {
        okhttp3.Call localVarCall = getObjectViewValidateBeforeCall(objectId, max, focus, friends, from, outlier, guild, null);
        Type localVarReturnType = new TypeToken<LeaderBoardViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getObjectViewAsync(String objectId, Integer max, Integer focus, Boolean friends, Integer from, Integer outlier, Boolean guild, final ApiCallback<LeaderBoardViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectViewValidateBeforeCall(objectId, max, focus, friends, from, outlier, guild, _callback);
        Type localVarReturnType = new TypeToken<LeaderBoardViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetObjectViewRequestBuilder {
        private final String objectId;
        private Integer max;
        private Integer focus;
        private Boolean friends;
        private Integer from;
        private Integer outlier;
        private Boolean guild;

        private GetObjectViewRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set max
         * @param max  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder max(Integer max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set focus
         * @param focus  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder focus(Integer focus) {
            this.focus = focus;
            return this;
        }
        
        /**
         * Set friends
         * @param friends  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder friends(Boolean friends) {
            this.friends = friends;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder from(Integer from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set outlier
         * @param outlier  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder outlier(Integer outlier) {
            this.outlier = outlier;
            return this;
        }
        
        /**
         * Set guild
         * @param guild  (optional)
         * @return GetObjectViewRequestBuilder
         */
        public GetObjectViewRequestBuilder guild(Boolean guild) {
            this.guild = guild;
            return this;
        }
        
        /**
         * Build call for getObjectView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getObjectViewCall(objectId, max, focus, friends, from, outlier, guild, _callback);
        }


        /**
         * Execute getObjectView request
         * @return LeaderBoardViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderBoardViewResponse execute() throws ApiException {
            ApiResponse<LeaderBoardViewResponse> localVarResp = getObjectViewWithHttpInfo(objectId, max, focus, friends, from, outlier, guild);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getObjectView request with HTTP info returned
         * @return ApiResponse&lt;LeaderBoardViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderBoardViewResponse> executeWithHttpInfo() throws ApiException {
            return getObjectViewWithHttpInfo(objectId, max, focus, friends, from, outlier, guild);
        }

        /**
         * Execute getObjectView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderBoardViewResponse> _callback) throws ApiException {
            return getObjectViewAsync(objectId, max, focus, friends, from, outlier, guild, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return GetObjectViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectViewRequestBuilder getObjectView(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new GetObjectViewRequestBuilder(objectId);
    }
    private okhttp3.Call getPlayerScoresCall(Long dbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/leaderboards/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbid", dbid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerScoresValidateBeforeCall(Long dbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbid' is set
        if (dbid == null) {
            throw new ApiException("Missing the required parameter 'dbid' when calling getPlayerScores(Async)");
        }

        return getPlayerScoresCall(dbid, _callback);

    }


    private ApiResponse<ListLeaderBoardViewResponse> getPlayerScoresWithHttpInfo(Long dbid) throws ApiException {
        okhttp3.Call localVarCall = getPlayerScoresValidateBeforeCall(dbid, null);
        Type localVarReturnType = new TypeToken<ListLeaderBoardViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlayerScoresAsync(Long dbid, final ApiCallback<ListLeaderBoardViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerScoresValidateBeforeCall(dbid, _callback);
        Type localVarReturnType = new TypeToken<ListLeaderBoardViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlayerScoresRequestBuilder {
        private final Long dbid;

        private GetPlayerScoresRequestBuilder(Long dbid) {
            this.dbid = dbid;
        }

        /**
         * Build call for getPlayerScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlayerScoresCall(dbid, _callback);
        }


        /**
         * Execute getPlayerScores request
         * @return ListLeaderBoardViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ListLeaderBoardViewResponse execute() throws ApiException {
            ApiResponse<ListLeaderBoardViewResponse> localVarResp = getPlayerScoresWithHttpInfo(dbid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlayerScores request with HTTP info returned
         * @return ApiResponse&lt;ListLeaderBoardViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListLeaderBoardViewResponse> executeWithHttpInfo() throws ApiException {
            return getPlayerScoresWithHttpInfo(dbid);
        }

        /**
         * Execute getPlayerScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListLeaderBoardViewResponse> _callback) throws ApiException {
            return getPlayerScoresAsync(dbid, _callback);
        }
    }

    /**
     * 
     * 
     * @param dbid  (required)
     * @return GetPlayerScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetPlayerScoresRequestBuilder getPlayerScores(Long dbid) throws IllegalArgumentException {
        if (dbid == null) throw new IllegalArgumentException("\"dbid\" is required but got null");
        return new GetPlayerScoresRequestBuilder(dbid);
    }
    private okhttp3.Call getUserScoresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/leaderboards/uid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserScoresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserScoresCall(_callback);

    }


    private ApiResponse<LeaderboardUidResponse> getUserScoresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserScoresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LeaderboardUidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserScoresAsync(final ApiCallback<LeaderboardUidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserScoresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LeaderboardUidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserScoresRequestBuilder {

        private GetUserScoresRequestBuilder() {
        }

        /**
         * Build call for getUserScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserScoresCall(_callback);
        }


        /**
         * Execute getUserScores request
         * @return LeaderboardUidResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardUidResponse execute() throws ApiException {
            ApiResponse<LeaderboardUidResponse> localVarResp = getUserScoresWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserScores request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardUidResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardUidResponse> executeWithHttpInfo() throws ApiException {
            return getUserScoresWithHttpInfo();
        }

        /**
         * Execute getUserScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardUidResponse> _callback) throws ApiException {
            return getUserScoresAsync(_callback);
        }
    }

    /**
     * 
     * 
     * @return GetUserScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public GetUserScoresRequestBuilder getUserScores() throws IllegalArgumentException {
        return new GetUserScoresRequestBuilder();
    }
    private okhttp3.Call listObjectRanksCall(String objectId, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/ranks"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectRanksValidateBeforeCall(String objectId, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling listObjectRanks(Async)");
        }

        return listObjectRanksCall(objectId, ids, _callback);

    }


    private ApiResponse<LeaderBoardViewResponse> listObjectRanksWithHttpInfo(String objectId, String ids) throws ApiException {
        okhttp3.Call localVarCall = listObjectRanksValidateBeforeCall(objectId, ids, null);
        Type localVarReturnType = new TypeToken<LeaderBoardViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listObjectRanksAsync(String objectId, String ids, final ApiCallback<LeaderBoardViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectRanksValidateBeforeCall(objectId, ids, _callback);
        Type localVarReturnType = new TypeToken<LeaderBoardViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListObjectRanksRequestBuilder {
        private final String objectId;
        private String ids;

        private ListObjectRanksRequestBuilder(String objectId) {
            this.objectId = objectId;
        }

        /**
         * Set ids
         * @param ids  (optional)
         * @return ListObjectRanksRequestBuilder
         */
        public ListObjectRanksRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for listObjectRanks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listObjectRanksCall(objectId, ids, _callback);
        }


        /**
         * Execute listObjectRanks request
         * @return LeaderBoardViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderBoardViewResponse execute() throws ApiException {
            ApiResponse<LeaderBoardViewResponse> localVarResp = listObjectRanksWithHttpInfo(objectId, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listObjectRanks request with HTTP info returned
         * @return ApiResponse&lt;LeaderBoardViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderBoardViewResponse> executeWithHttpInfo() throws ApiException {
            return listObjectRanksWithHttpInfo(objectId, ids);
        }

        /**
         * Execute listObjectRanks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderBoardViewResponse> _callback) throws ApiException {
            return listObjectRanksAsync(objectId, ids, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return ListObjectRanksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectRanksRequestBuilder listObjectRanks(String objectId) throws IllegalArgumentException {
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new ListObjectRanksRequestBuilder(objectId);
    }
    private okhttp3.Call listUserScoresCall(Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic/leaderboards/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserScoresValidateBeforeCall(Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        return listUserScoresCall(skip, limit, _callback);

    }


    private ApiResponse<LeaderboardListResponse> listUserScoresWithHttpInfo(Integer skip, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listUserScoresValidateBeforeCall(skip, limit, null);
        Type localVarReturnType = new TypeToken<LeaderboardListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserScoresAsync(Integer skip, Integer limit, final ApiCallback<LeaderboardListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserScoresValidateBeforeCall(skip, limit, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserScoresRequestBuilder {
        private Integer skip;
        private Integer limit;

        private ListUserScoresRequestBuilder() {
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return ListUserScoresRequestBuilder
         */
        public ListUserScoresRequestBuilder skip(Integer skip) {
            this.skip = skip;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListUserScoresRequestBuilder
         */
        public ListUserScoresRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listUserScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserScoresCall(skip, limit, _callback);
        }


        /**
         * Execute listUserScores request
         * @return LeaderboardListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public LeaderboardListResponse execute() throws ApiException {
            ApiResponse<LeaderboardListResponse> localVarResp = listUserScoresWithHttpInfo(skip, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserScores request with HTTP info returned
         * @return ApiResponse&lt;LeaderboardListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaderboardListResponse> executeWithHttpInfo() throws ApiException {
            return listUserScoresWithHttpInfo(skip, limit);
        }

        /**
         * Execute listUserScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaderboardListResponse> _callback) throws ApiException {
            return listUserScoresAsync(skip, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @return ListUserScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ListUserScoresRequestBuilder listUserScores() throws IllegalArgumentException {
        return new ListUserScoresRequestBuilder();
    }
    private okhttp3.Call removeAssignmentCall(String objectId, LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaderboardRemoveCacheEntryRequest;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/assignment"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAssignmentValidateBeforeCall(String objectId, LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeAssignment(Async)");
        }

        return removeAssignmentCall(objectId, leaderboardRemoveCacheEntryRequest, _callback);

    }


    private ApiResponse<CommonResponse> removeAssignmentWithHttpInfo(String objectId, LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = removeAssignmentValidateBeforeCall(objectId, leaderboardRemoveCacheEntryRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAssignmentAsync(String objectId, LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAssignmentValidateBeforeCall(objectId, leaderboardRemoveCacheEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAssignmentRequestBuilder {
        private final Integer playerId;
        private final String objectId;

        private RemoveAssignmentRequestBuilder(Integer playerId, String objectId) {
            this.playerId = playerId;
            this.objectId = objectId;
        }

        /**
         * Build call for removeAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest = buildBodyParams();
            return removeAssignmentCall(objectId, leaderboardRemoveCacheEntryRequest, _callback);
        }

        private LeaderboardRemoveCacheEntryRequest buildBodyParams() {
            LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest = new LeaderboardRemoveCacheEntryRequest();
            leaderboardRemoveCacheEntryRequest.playerId(this.playerId);
            return leaderboardRemoveCacheEntryRequest;
        }

        /**
         * Execute removeAssignment request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = removeAssignmentWithHttpInfo(objectId, leaderboardRemoveCacheEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAssignment request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest = buildBodyParams();
            return removeAssignmentWithHttpInfo(objectId, leaderboardRemoveCacheEntryRequest);
        }

        /**
         * Execute removeAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            LeaderboardRemoveCacheEntryRequest leaderboardRemoveCacheEntryRequest = buildBodyParams();
            return removeAssignmentAsync(objectId, leaderboardRemoveCacheEntryRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAssignmentRequestBuilder removeAssignment(Integer playerId, String objectId) throws IllegalArgumentException {
        if (playerId == null) throw new IllegalArgumentException("\"playerId\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveAssignmentRequestBuilder(playerId, objectId);
    }
    private okhttp3.Call removeEntryCall(String objectId, LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaderboardRemoveEntryRequest;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/entry"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEntryValidateBeforeCall(String objectId, LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeEntry(Async)");
        }

        return removeEntryCall(objectId, leaderboardRemoveEntryRequest, _callback);

    }


    private ApiResponse<CommonResponse> removeEntryWithHttpInfo(String objectId, LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(objectId, leaderboardRemoveEntryRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEntryAsync(String objectId, LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(objectId, leaderboardRemoveEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEntryRequestBuilder {
        private final Integer id;
        private final String objectId;

        private RemoveEntryRequestBuilder(Integer id, String objectId) {
            this.id = id;
            this.objectId = objectId;
        }

        /**
         * Build call for removeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest = buildBodyParams();
            return removeEntryCall(objectId, leaderboardRemoveEntryRequest, _callback);
        }

        private LeaderboardRemoveEntryRequest buildBodyParams() {
            LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest = new LeaderboardRemoveEntryRequest();
            leaderboardRemoveEntryRequest.id(this.id);
            return leaderboardRemoveEntryRequest;
        }

        /**
         * Execute removeEntry request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = removeEntryWithHttpInfo(objectId, leaderboardRemoveEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEntry request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest = buildBodyParams();
            return removeEntryWithHttpInfo(objectId, leaderboardRemoveEntryRequest);
        }

        /**
         * Execute removeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            LeaderboardRemoveEntryRequest leaderboardRemoveEntryRequest = buildBodyParams();
            return removeEntryAsync(objectId, leaderboardRemoveEntryRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return RemoveEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEntryRequestBuilder removeEntry(Integer id, String objectId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new RemoveEntryRequestBuilder(id, objectId);
    }
    private okhttp3.Call submitObjectScoresCall(String objectId, LeaderboardCreateRequest leaderboardCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaderboardCreateRequest;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitObjectScoresValidateBeforeCall(String objectId, LeaderboardCreateRequest leaderboardCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling submitObjectScores(Async)");
        }

        return submitObjectScoresCall(objectId, leaderboardCreateRequest, _callback);

    }


    private ApiResponse<CommonResponse> submitObjectScoresWithHttpInfo(String objectId, LeaderboardCreateRequest leaderboardCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = submitObjectScoresValidateBeforeCall(objectId, leaderboardCreateRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitObjectScoresAsync(String objectId, LeaderboardCreateRequest leaderboardCreateRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitObjectScoresValidateBeforeCall(objectId, leaderboardCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitObjectScoresRequestBuilder {
        private final Boolean sharded;
        private final String objectId;
        private Integer freezeTime;
        private List<String> derivatives;
        private String scoreName;
        private ClientPermission permissions;
        private Integer maxEntries;
        private Boolean partitioned;
        private Integer ttl;

        private SubmitObjectScoresRequestBuilder(Boolean sharded, String objectId) {
            this.sharded = sharded;
            this.objectId = objectId;
        }

        /**
         * Set freezeTime
         * @param freezeTime  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder freezeTime(Integer freezeTime) {
            this.freezeTime = freezeTime;
            return this;
        }
        
        /**
         * Set derivatives
         * @param derivatives  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder derivatives(List<String> derivatives) {
            this.derivatives = derivatives;
            return this;
        }
        
        /**
         * Set scoreName
         * @param scoreName  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder scoreName(String scoreName) {
            this.scoreName = scoreName;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder permissions(ClientPermission permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set maxEntries
         * @param maxEntries  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder maxEntries(Integer maxEntries) {
            this.maxEntries = maxEntries;
            return this;
        }
        
        /**
         * Set partitioned
         * @param partitioned  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder partitioned(Boolean partitioned) {
            this.partitioned = partitioned;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl  (optional)
         * @return SubmitObjectScoresRequestBuilder
         */
        public SubmitObjectScoresRequestBuilder ttl(Integer ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for submitObjectScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaderboardCreateRequest leaderboardCreateRequest = buildBodyParams();
            return submitObjectScoresCall(objectId, leaderboardCreateRequest, _callback);
        }

        private LeaderboardCreateRequest buildBodyParams() {
            LeaderboardCreateRequest leaderboardCreateRequest = new LeaderboardCreateRequest();
            leaderboardCreateRequest.freezeTime(this.freezeTime);
            leaderboardCreateRequest.derivatives(this.derivatives);
            leaderboardCreateRequest.scoreName(this.scoreName);
            leaderboardCreateRequest.permissions(this.permissions);
            leaderboardCreateRequest.maxEntries(this.maxEntries);
            leaderboardCreateRequest.partitioned(this.partitioned);
            leaderboardCreateRequest.sharded(this.sharded);
            leaderboardCreateRequest.ttl(this.ttl);
            return leaderboardCreateRequest;
        }

        /**
         * Execute submitObjectScores request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            LeaderboardCreateRequest leaderboardCreateRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = submitObjectScoresWithHttpInfo(objectId, leaderboardCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitObjectScores request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            LeaderboardCreateRequest leaderboardCreateRequest = buildBodyParams();
            return submitObjectScoresWithHttpInfo(objectId, leaderboardCreateRequest);
        }

        /**
         * Execute submitObjectScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            LeaderboardCreateRequest leaderboardCreateRequest = buildBodyParams();
            return submitObjectScoresAsync(objectId, leaderboardCreateRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SubmitObjectScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SubmitObjectScoresRequestBuilder submitObjectScores(Boolean sharded, String objectId) throws IllegalArgumentException {
        if (sharded == null) throw new IllegalArgumentException("\"sharded\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SubmitObjectScoresRequestBuilder(sharded, objectId);
    }
    private okhttp3.Call swapObjectLeaderboardCall(String objectId, LeaderboardSwapRequest leaderboardSwapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaderboardSwapRequest;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/swap"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope", "user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapObjectLeaderboardValidateBeforeCall(String objectId, LeaderboardSwapRequest leaderboardSwapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling swapObjectLeaderboard(Async)");
        }

        return swapObjectLeaderboardCall(objectId, leaderboardSwapRequest, _callback);

    }


    private ApiResponse<CommonResponse> swapObjectLeaderboardWithHttpInfo(String objectId, LeaderboardSwapRequest leaderboardSwapRequest) throws ApiException {
        okhttp3.Call localVarCall = swapObjectLeaderboardValidateBeforeCall(objectId, leaderboardSwapRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call swapObjectLeaderboardAsync(String objectId, LeaderboardSwapRequest leaderboardSwapRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = swapObjectLeaderboardValidateBeforeCall(objectId, leaderboardSwapRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SwapObjectLeaderboardRequestBuilder {
        private final Integer swapBase;
        private final Integer delta;
        private final String objectId;
        private Integer winnerId;
        private Integer loserId;

        private SwapObjectLeaderboardRequestBuilder(Integer swapBase, Integer delta, String objectId) {
            this.swapBase = swapBase;
            this.delta = delta;
            this.objectId = objectId;
        }

        /**
         * Set winnerId
         * @param winnerId  (optional)
         * @return SwapObjectLeaderboardRequestBuilder
         */
        public SwapObjectLeaderboardRequestBuilder winnerId(Integer winnerId) {
            this.winnerId = winnerId;
            return this;
        }
        
        /**
         * Set loserId
         * @param loserId  (optional)
         * @return SwapObjectLeaderboardRequestBuilder
         */
        public SwapObjectLeaderboardRequestBuilder loserId(Integer loserId) {
            this.loserId = loserId;
            return this;
        }
        
        /**
         * Build call for swapObjectLeaderboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaderboardSwapRequest leaderboardSwapRequest = buildBodyParams();
            return swapObjectLeaderboardCall(objectId, leaderboardSwapRequest, _callback);
        }

        private LeaderboardSwapRequest buildBodyParams() {
            LeaderboardSwapRequest leaderboardSwapRequest = new LeaderboardSwapRequest();
            leaderboardSwapRequest.winnerId(this.winnerId);
            leaderboardSwapRequest.loserId(this.loserId);
            leaderboardSwapRequest.swapBase(this.swapBase);
            leaderboardSwapRequest.delta(this.delta);
            return leaderboardSwapRequest;
        }

        /**
         * Execute swapObjectLeaderboard request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            LeaderboardSwapRequest leaderboardSwapRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = swapObjectLeaderboardWithHttpInfo(objectId, leaderboardSwapRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute swapObjectLeaderboard request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            LeaderboardSwapRequest leaderboardSwapRequest = buildBodyParams();
            return swapObjectLeaderboardWithHttpInfo(objectId, leaderboardSwapRequest);
        }

        /**
         * Execute swapObjectLeaderboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            LeaderboardSwapRequest leaderboardSwapRequest = buildBodyParams();
            return swapObjectLeaderboardAsync(objectId, leaderboardSwapRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return SwapObjectLeaderboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SwapObjectLeaderboardRequestBuilder swapObjectLeaderboard(Integer swapBase, Integer delta, String objectId) throws IllegalArgumentException {
        if (swapBase == null) throw new IllegalArgumentException("\"swapBase\" is required but got null");
        if (delta == null) throw new IllegalArgumentException("\"delta\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new SwapObjectLeaderboardRequestBuilder(swapBase, delta, objectId);
    }
    private okhttp3.Call updateEntryCall(String objectId, LeaderboardAddRequest leaderboardAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaderboardAddRequest;

        // create path and map variables
        String localVarPath = "/object/leaderboards/{objectId}/entry"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "scope" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntryValidateBeforeCall(String objectId, LeaderboardAddRequest leaderboardAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateEntry(Async)");
        }

        return updateEntryCall(objectId, leaderboardAddRequest, _callback);

    }


    private ApiResponse<CommonResponse> updateEntryWithHttpInfo(String objectId, LeaderboardAddRequest leaderboardAddRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(objectId, leaderboardAddRequest, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEntryAsync(String objectId, LeaderboardAddRequest leaderboardAddRequest, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(objectId, leaderboardAddRequest, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEntryRequestBuilder {
        private final Double score;
        private final Integer id;
        private final String objectId;
        private Double maxScore;
        private Map<String, Object> stats;
        private Double minScore;
        private Boolean increment;

        private UpdateEntryRequestBuilder(double score, Integer id, String objectId) {
            this.score = score;
            this.id = id;
            this.objectId = objectId;
        }

        /**
         * Set maxScore
         * @param maxScore  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder maxScore(Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }
        
        /**
         * Set stats
         * @param stats  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder stats(Map<String, Object> stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Set minScore
         * @param minScore  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder minScore(Double minScore) {
            this.minScore = minScore;
            return this;
        }
        
        /**
         * Set increment
         * @param increment  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder increment(Boolean increment) {
            this.increment = increment;
            return this;
        }
        
        /**
         * Build call for updateEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaderboardAddRequest leaderboardAddRequest = buildBodyParams();
            return updateEntryCall(objectId, leaderboardAddRequest, _callback);
        }

        private LeaderboardAddRequest buildBodyParams() {
            LeaderboardAddRequest leaderboardAddRequest = new LeaderboardAddRequest();
            leaderboardAddRequest.maxScore(this.maxScore);
            leaderboardAddRequest.stats(this.stats);
            leaderboardAddRequest.score(this.score);
            leaderboardAddRequest.minScore(this.minScore);
            leaderboardAddRequest.id(this.id);
            leaderboardAddRequest.increment(this.increment);
            return leaderboardAddRequest;
        }

        /**
         * Execute updateEntry request
         * @return CommonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public CommonResponse execute() throws ApiException {
            LeaderboardAddRequest leaderboardAddRequest = buildBodyParams();
            ApiResponse<CommonResponse> localVarResp = updateEntryWithHttpInfo(objectId, leaderboardAddRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEntry request with HTTP info returned
         * @return ApiResponse&lt;CommonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommonResponse> executeWithHttpInfo() throws ApiException {
            LeaderboardAddRequest leaderboardAddRequest = buildBodyParams();
            return updateEntryWithHttpInfo(objectId, leaderboardAddRequest);
        }

        /**
         * Execute updateEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommonResponse> _callback) throws ApiException {
            LeaderboardAddRequest leaderboardAddRequest = buildBodyParams();
            return updateEntryAsync(objectId, leaderboardAddRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param objectId  (required)
     * @return UpdateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEntryRequestBuilder updateEntry(double score, Integer id, String objectId) throws IllegalArgumentException {
        
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
            

        return new UpdateEntryRequestBuilder(score, id, objectId);
    }
}
