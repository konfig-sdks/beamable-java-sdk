/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PvpRewardDefinition;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PvpDefinition
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PvpDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NEXT_REWARD = "nextReward";
  @SerializedName(SERIALIZED_NAME_NEXT_REWARD)
  private Integer nextReward;

  public static final String SERIALIZED_NAME_LBID = "lbid";
  @SerializedName(SERIALIZED_NAME_LBID)
  private String lbid;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public static final String SERIALIZED_NAME_IDLE_DAYS = "idleDays";
  @SerializedName(SERIALIZED_NAME_IDLE_DAYS)
  private Integer idleDays;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  private String cron;

  public static final String SERIALIZED_NAME_REWARD_DEFINITION = "rewardDefinition";
  @SerializedName(SERIALIZED_NAME_REWARD_DEFINITION)
  private PvpRewardDefinition rewardDefinition;

  public static final String SERIALIZED_NAME_PROTECTED_RANKS = "protectedRanks";
  @SerializedName(SERIALIZED_NAME_PROTECTED_RANKS)
  private Integer protectedRanks;

  public static final String SERIALIZED_NAME_MIN_PLAYERS = "minPlayers";
  @SerializedName(SERIALIZED_NAME_MIN_PLAYERS)
  private Integer minPlayers;

  public PvpDefinition() {
  }

  public PvpDefinition description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PvpDefinition nextReward(Integer nextReward) {
    
    
    
    
    this.nextReward = nextReward;
    return this;
  }

   /**
   * Get nextReward
   * @return nextReward
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNextReward() {
    return nextReward;
  }


  public void setNextReward(Integer nextReward) {
    
    
    
    this.nextReward = nextReward;
  }


  public PvpDefinition lbid(String lbid) {
    
    
    
    
    this.lbid = lbid;
    return this;
  }

   /**
   * Get lbid
   * @return lbid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLbid() {
    return lbid;
  }


  public void setLbid(String lbid) {
    
    
    
    this.lbid = lbid;
  }


  public PvpDefinition state(Integer state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getState() {
    return state;
  }


  public void setState(Integer state) {
    
    
    
    this.state = state;
  }


  public PvpDefinition idleDays(Integer idleDays) {
    
    
    
    
    this.idleDays = idleDays;
    return this;
  }

   /**
   * Get idleDays
   * @return idleDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIdleDays() {
    return idleDays;
  }


  public void setIdleDays(Integer idleDays) {
    
    
    
    this.idleDays = idleDays;
  }


  public PvpDefinition cron(String cron) {
    
    
    
    
    this.cron = cron;
    return this;
  }

   /**
   * Get cron
   * @return cron
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCron() {
    return cron;
  }


  public void setCron(String cron) {
    
    
    
    this.cron = cron;
  }


  public PvpDefinition rewardDefinition(PvpRewardDefinition rewardDefinition) {
    
    
    
    
    this.rewardDefinition = rewardDefinition;
    return this;
  }

   /**
   * Get rewardDefinition
   * @return rewardDefinition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PvpRewardDefinition getRewardDefinition() {
    return rewardDefinition;
  }


  public void setRewardDefinition(PvpRewardDefinition rewardDefinition) {
    
    
    
    this.rewardDefinition = rewardDefinition;
  }


  public PvpDefinition protectedRanks(Integer protectedRanks) {
    
    
    
    
    this.protectedRanks = protectedRanks;
    return this;
  }

   /**
   * Get protectedRanks
   * @return protectedRanks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProtectedRanks() {
    return protectedRanks;
  }


  public void setProtectedRanks(Integer protectedRanks) {
    
    
    
    this.protectedRanks = protectedRanks;
  }


  public PvpDefinition minPlayers(Integer minPlayers) {
    
    
    
    
    this.minPlayers = minPlayers;
    return this;
  }

   /**
   * Get minPlayers
   * @return minPlayers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMinPlayers() {
    return minPlayers;
  }


  public void setMinPlayers(Integer minPlayers) {
    
    
    
    this.minPlayers = minPlayers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PvpDefinition instance itself
   */
  public PvpDefinition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PvpDefinition pvpDefinition = (PvpDefinition) o;
    return Objects.equals(this.description, pvpDefinition.description) &&
        Objects.equals(this.nextReward, pvpDefinition.nextReward) &&
        Objects.equals(this.lbid, pvpDefinition.lbid) &&
        Objects.equals(this.state, pvpDefinition.state) &&
        Objects.equals(this.idleDays, pvpDefinition.idleDays) &&
        Objects.equals(this.cron, pvpDefinition.cron) &&
        Objects.equals(this.rewardDefinition, pvpDefinition.rewardDefinition) &&
        Objects.equals(this.protectedRanks, pvpDefinition.protectedRanks) &&
        Objects.equals(this.minPlayers, pvpDefinition.minPlayers)&&
        Objects.equals(this.additionalProperties, pvpDefinition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, nextReward, lbid, state, idleDays, cron, rewardDefinition, protectedRanks, minPlayers, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PvpDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nextReward: ").append(toIndentedString(nextReward)).append("\n");
    sb.append("    lbid: ").append(toIndentedString(lbid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    idleDays: ").append(toIndentedString(idleDays)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    rewardDefinition: ").append(toIndentedString(rewardDefinition)).append("\n");
    sb.append("    protectedRanks: ").append(toIndentedString(protectedRanks)).append("\n");
    sb.append("    minPlayers: ").append(toIndentedString(minPlayers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("nextReward");
    openapiFields.add("lbid");
    openapiFields.add("state");
    openapiFields.add("idleDays");
    openapiFields.add("cron");
    openapiFields.add("rewardDefinition");
    openapiFields.add("protectedRanks");
    openapiFields.add("minPlayers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PvpDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PvpDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PvpDefinition is not found in the empty JSON string", PvpDefinition.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PvpDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("lbid") != null && !jsonObj.get("lbid").isJsonNull()) && !jsonObj.get("lbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lbid").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
      // validate the optional field `rewardDefinition`
      if (jsonObj.get("rewardDefinition") != null && !jsonObj.get("rewardDefinition").isJsonNull()) {
        PvpRewardDefinition.validateJsonObject(jsonObj.getAsJsonObject("rewardDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PvpDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PvpDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PvpDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PvpDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PvpDefinition>() {
           @Override
           public void write(JsonWriter out, PvpDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PvpDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PvpDefinition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PvpDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PvpDefinition
  * @throws IOException if the JSON string is invalid with respect to PvpDefinition
  */
  public static PvpDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PvpDefinition.class);
  }

 /**
  * Convert an instance of PvpDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

