/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AnnouncementAttachment;
import com.konfigthis.client.model.PlayerReward;
import com.konfigthis.client.model.PlayerStatRequirement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Announcement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Announcement {
  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_GIFT = "gift";
  @SerializedName(SERIALIZED_NAME_GIFT)
  private PlayerReward gift;

  public static final String SERIALIZED_NAME_MONGO_START_DATE = "mongo_start_date";
  @SerializedName(SERIALIZED_NAME_MONGO_START_DATE)
  private Integer mongoStartDate;

  public static final String SERIALIZED_NAME_STAT_REQUIREMENTS = "stat_requirements";
  @SerializedName(SERIALIZED_NAME_STAT_REQUIREMENTS)
  private List<PlayerStatRequirement> statRequirements = null;

  public static final String SERIALIZED_NAME_MONGO_END_DATE = "mongo_end_date";
  @SerializedName(SERIALIZED_NAME_MONGO_END_DATE)
  private Integer mongoEndDate;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private Map<String, Object> clientData = null;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "validationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<String> validationErrors = null;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AnnouncementAttachment> attachments = null;

  public Announcement() {
  }

  public Announcement summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public Announcement title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Announcement body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public Announcement channel(String channel) {
    
    
    
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChannel() {
    return channel;
  }


  public void setChannel(String channel) {
    
    
    
    this.channel = channel;
  }


  public Announcement startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Announcement gift(PlayerReward gift) {
    
    
    
    
    this.gift = gift;
    return this;
  }

   /**
   * Get gift
   * @return gift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PlayerReward getGift() {
    return gift;
  }


  public void setGift(PlayerReward gift) {
    
    
    
    this.gift = gift;
  }


  public Announcement mongoStartDate(Integer mongoStartDate) {
    
    
    
    
    this.mongoStartDate = mongoStartDate;
    return this;
  }

   /**
   * Get mongoStartDate
   * @return mongoStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMongoStartDate() {
    return mongoStartDate;
  }


  public void setMongoStartDate(Integer mongoStartDate) {
    
    
    
    this.mongoStartDate = mongoStartDate;
  }


  public Announcement statRequirements(List<PlayerStatRequirement> statRequirements) {
    
    
    
    
    this.statRequirements = statRequirements;
    return this;
  }

  public Announcement addStatRequirementsItem(PlayerStatRequirement statRequirementsItem) {
    if (this.statRequirements == null) {
      this.statRequirements = new ArrayList<>();
    }
    this.statRequirements.add(statRequirementsItem);
    return this;
  }

   /**
   * Get statRequirements
   * @return statRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PlayerStatRequirement> getStatRequirements() {
    return statRequirements;
  }


  public void setStatRequirements(List<PlayerStatRequirement> statRequirements) {
    
    
    
    this.statRequirements = statRequirements;
  }


  public Announcement mongoEndDate(Integer mongoEndDate) {
    
    
    
    
    this.mongoEndDate = mongoEndDate;
    return this;
  }

   /**
   * Get mongoEndDate
   * @return mongoEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMongoEndDate() {
    return mongoEndDate;
  }


  public void setMongoEndDate(Integer mongoEndDate) {
    
    
    
    this.mongoEndDate = mongoEndDate;
  }


  public Announcement symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public Announcement clientData(Map<String, Object> clientData) {
    
    
    
    
    this.clientData = clientData;
    return this;
  }

  public Announcement putClientDataItem(String key, Object clientDataItem) {
    if (this.clientData == null) {
      this.clientData = new HashMap<>();
    }
    this.clientData.put(key, clientDataItem);
    return this;
  }

   /**
   * Get clientData
   * @return clientData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getClientData() {
    return clientData;
  }


  public void setClientData(Map<String, Object> clientData) {
    
    
    
    this.clientData = clientData;
  }


  public Announcement validationErrors(List<String> validationErrors) {
    
    
    
    
    this.validationErrors = validationErrors;
    return this;
  }

  public Announcement addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Get validationErrors
   * @return validationErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getValidationErrors() {
    return validationErrors;
  }


  public void setValidationErrors(List<String> validationErrors) {
    
    
    
    this.validationErrors = validationErrors;
  }


  public Announcement endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Announcement attachments(List<AnnouncementAttachment> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public Announcement addAttachmentsItem(AnnouncementAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AnnouncementAttachment> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<AnnouncementAttachment> attachments) {
    
    
    
    this.attachments = attachments;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Announcement instance itself
   */
  public Announcement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Announcement announcement = (Announcement) o;
    return Objects.equals(this.summary, announcement.summary) &&
        Objects.equals(this.title, announcement.title) &&
        Objects.equals(this.body, announcement.body) &&
        Objects.equals(this.channel, announcement.channel) &&
        Objects.equals(this.startDate, announcement.startDate) &&
        Objects.equals(this.gift, announcement.gift) &&
        Objects.equals(this.mongoStartDate, announcement.mongoStartDate) &&
        Objects.equals(this.statRequirements, announcement.statRequirements) &&
        Objects.equals(this.mongoEndDate, announcement.mongoEndDate) &&
        Objects.equals(this.symbol, announcement.symbol) &&
        Objects.equals(this.clientData, announcement.clientData) &&
        Objects.equals(this.validationErrors, announcement.validationErrors) &&
        Objects.equals(this.endDate, announcement.endDate) &&
        Objects.equals(this.attachments, announcement.attachments)&&
        Objects.equals(this.additionalProperties, announcement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, title, body, channel, startDate, gift, mongoStartDate, statRequirements, mongoEndDate, symbol, clientData, validationErrors, endDate, attachments, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Announcement {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    mongoStartDate: ").append(toIndentedString(mongoStartDate)).append("\n");
    sb.append("    statRequirements: ").append(toIndentedString(statRequirements)).append("\n");
    sb.append("    mongoEndDate: ").append(toIndentedString(mongoEndDate)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summary");
    openapiFields.add("title");
    openapiFields.add("body");
    openapiFields.add("channel");
    openapiFields.add("start_date");
    openapiFields.add("gift");
    openapiFields.add("mongo_start_date");
    openapiFields.add("stat_requirements");
    openapiFields.add("mongo_end_date");
    openapiFields.add("symbol");
    openapiFields.add("clientData");
    openapiFields.add("validationErrors");
    openapiFields.add("end_date");
    openapiFields.add("attachments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Announcement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Announcement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Announcement is not found in the empty JSON string", Announcement.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      // validate the optional field `gift`
      if (jsonObj.get("gift") != null && !jsonObj.get("gift").isJsonNull()) {
        PlayerReward.validateJsonObject(jsonObj.getAsJsonObject("gift"));
      }
      if (jsonObj.get("stat_requirements") != null && !jsonObj.get("stat_requirements").isJsonNull()) {
        JsonArray jsonArraystatRequirements = jsonObj.getAsJsonArray("stat_requirements");
        if (jsonArraystatRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stat_requirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stat_requirements` to be an array in the JSON string but got `%s`", jsonObj.get("stat_requirements").toString()));
          }

          // validate the optional field `stat_requirements` (array)
          for (int i = 0; i < jsonArraystatRequirements.size(); i++) {
            PlayerStatRequirement.validateJsonObject(jsonArraystatRequirements.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validationErrors") != null && !jsonObj.get("validationErrors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("validationErrors").toString()));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AnnouncementAttachment.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Announcement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Announcement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Announcement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Announcement.class));

       return (TypeAdapter<T>) new TypeAdapter<Announcement>() {
           @Override
           public void write(JsonWriter out, Announcement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Announcement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Announcement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Announcement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Announcement
  * @throws IOException if the JSON string is invalid with respect to Announcement
  */
  public static Announcement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Announcement.class);
  }

 /**
  * Convert an instance of Announcement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

