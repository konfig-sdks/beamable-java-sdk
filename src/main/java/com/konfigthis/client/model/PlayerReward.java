/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CurrencyChangeReward;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.NewItemReward;
import com.konfigthis.client.model.WebhookReward;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlayerReward
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlayerReward {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADD_ITEM_REQUESTS = "addItemRequests";
  @SerializedName(SERIALIZED_NAME_ADD_ITEM_REQUESTS)
  private List<ItemCreateRequest> addItemRequests = null;

  public static final String SERIALIZED_NAME_CHANGE_CURRENCIES = "changeCurrencies";
  @SerializedName(SERIALIZED_NAME_CHANGE_CURRENCIES)
  private List<CurrencyChangeReward> changeCurrencies = null;

  public static final String SERIALIZED_NAME_CALL_WEBHOOKS = "callWebhooks";
  @SerializedName(SERIALIZED_NAME_CALL_WEBHOOKS)
  private List<WebhookReward> callWebhooks = null;

  public static final String SERIALIZED_NAME_ADD_ITEMS = "addItems";
  @SerializedName(SERIALIZED_NAME_ADD_ITEMS)
  private List<NewItemReward> addItems = null;

  public static final String SERIALIZED_NAME_APPLY_VIP_BONUS = "applyVipBonus";
  @SerializedName(SERIALIZED_NAME_APPLY_VIP_BONUS)
  private Boolean applyVipBonus;

  public static final String SERIALIZED_NAME_ADD_CURRENCY_MAP = "addCurrencyMap";
  @SerializedName(SERIALIZED_NAME_ADD_CURRENCY_MAP)
  private Map<String, Object> addCurrencyMap = null;

  public PlayerReward() {
  }

  public PlayerReward description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PlayerReward addItemRequests(List<ItemCreateRequest> addItemRequests) {
    
    
    
    
    this.addItemRequests = addItemRequests;
    return this;
  }

  public PlayerReward addAddItemRequestsItem(ItemCreateRequest addItemRequestsItem) {
    if (this.addItemRequests == null) {
      this.addItemRequests = new ArrayList<>();
    }
    this.addItemRequests.add(addItemRequestsItem);
    return this;
  }

   /**
   * Get addItemRequests
   * @return addItemRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ItemCreateRequest> getAddItemRequests() {
    return addItemRequests;
  }


  public void setAddItemRequests(List<ItemCreateRequest> addItemRequests) {
    
    
    
    this.addItemRequests = addItemRequests;
  }


  public PlayerReward changeCurrencies(List<CurrencyChangeReward> changeCurrencies) {
    
    
    
    
    this.changeCurrencies = changeCurrencies;
    return this;
  }

  public PlayerReward addChangeCurrenciesItem(CurrencyChangeReward changeCurrenciesItem) {
    if (this.changeCurrencies == null) {
      this.changeCurrencies = new ArrayList<>();
    }
    this.changeCurrencies.add(changeCurrenciesItem);
    return this;
  }

   /**
   * Get changeCurrencies
   * @return changeCurrencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CurrencyChangeReward> getChangeCurrencies() {
    return changeCurrencies;
  }


  public void setChangeCurrencies(List<CurrencyChangeReward> changeCurrencies) {
    
    
    
    this.changeCurrencies = changeCurrencies;
  }


  public PlayerReward callWebhooks(List<WebhookReward> callWebhooks) {
    
    
    
    
    this.callWebhooks = callWebhooks;
    return this;
  }

  public PlayerReward addCallWebhooksItem(WebhookReward callWebhooksItem) {
    if (this.callWebhooks == null) {
      this.callWebhooks = new ArrayList<>();
    }
    this.callWebhooks.add(callWebhooksItem);
    return this;
  }

   /**
   * Get callWebhooks
   * @return callWebhooks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<WebhookReward> getCallWebhooks() {
    return callWebhooks;
  }


  public void setCallWebhooks(List<WebhookReward> callWebhooks) {
    
    
    
    this.callWebhooks = callWebhooks;
  }


  public PlayerReward addItems(List<NewItemReward> addItems) {
    
    
    
    
    this.addItems = addItems;
    return this;
  }

  public PlayerReward addAddItemsItem(NewItemReward addItemsItem) {
    if (this.addItems == null) {
      this.addItems = new ArrayList<>();
    }
    this.addItems.add(addItemsItem);
    return this;
  }

   /**
   * Get addItems
   * @return addItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NewItemReward> getAddItems() {
    return addItems;
  }


  public void setAddItems(List<NewItemReward> addItems) {
    
    
    
    this.addItems = addItems;
  }


  public PlayerReward applyVipBonus(Boolean applyVipBonus) {
    
    
    
    
    this.applyVipBonus = applyVipBonus;
    return this;
  }

   /**
   * Get applyVipBonus
   * @return applyVipBonus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getApplyVipBonus() {
    return applyVipBonus;
  }


  public void setApplyVipBonus(Boolean applyVipBonus) {
    
    
    
    this.applyVipBonus = applyVipBonus;
  }


  public PlayerReward addCurrencyMap(Map<String, Object> addCurrencyMap) {
    
    
    
    
    this.addCurrencyMap = addCurrencyMap;
    return this;
  }

  public PlayerReward putAddCurrencyMapItem(String key, Object addCurrencyMapItem) {
    if (this.addCurrencyMap == null) {
      this.addCurrencyMap = new HashMap<>();
    }
    this.addCurrencyMap.put(key, addCurrencyMapItem);
    return this;
  }

   /**
   * Get addCurrencyMap
   * @return addCurrencyMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getAddCurrencyMap() {
    return addCurrencyMap;
  }


  public void setAddCurrencyMap(Map<String, Object> addCurrencyMap) {
    
    
    
    this.addCurrencyMap = addCurrencyMap;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlayerReward instance itself
   */
  public PlayerReward putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerReward playerReward = (PlayerReward) o;
    return Objects.equals(this.description, playerReward.description) &&
        Objects.equals(this.addItemRequests, playerReward.addItemRequests) &&
        Objects.equals(this.changeCurrencies, playerReward.changeCurrencies) &&
        Objects.equals(this.callWebhooks, playerReward.callWebhooks) &&
        Objects.equals(this.addItems, playerReward.addItems) &&
        Objects.equals(this.applyVipBonus, playerReward.applyVipBonus) &&
        Objects.equals(this.addCurrencyMap, playerReward.addCurrencyMap)&&
        Objects.equals(this.additionalProperties, playerReward.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, addItemRequests, changeCurrencies, callWebhooks, addItems, applyVipBonus, addCurrencyMap, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerReward {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addItemRequests: ").append(toIndentedString(addItemRequests)).append("\n");
    sb.append("    changeCurrencies: ").append(toIndentedString(changeCurrencies)).append("\n");
    sb.append("    callWebhooks: ").append(toIndentedString(callWebhooks)).append("\n");
    sb.append("    addItems: ").append(toIndentedString(addItems)).append("\n");
    sb.append("    applyVipBonus: ").append(toIndentedString(applyVipBonus)).append("\n");
    sb.append("    addCurrencyMap: ").append(toIndentedString(addCurrencyMap)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("addItemRequests");
    openapiFields.add("changeCurrencies");
    openapiFields.add("callWebhooks");
    openapiFields.add("addItems");
    openapiFields.add("applyVipBonus");
    openapiFields.add("addCurrencyMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerReward
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayerReward.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerReward is not found in the empty JSON string", PlayerReward.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("addItemRequests") != null && !jsonObj.get("addItemRequests").isJsonNull()) {
        JsonArray jsonArrayaddItemRequests = jsonObj.getAsJsonArray("addItemRequests");
        if (jsonArrayaddItemRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addItemRequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addItemRequests` to be an array in the JSON string but got `%s`", jsonObj.get("addItemRequests").toString()));
          }

          // validate the optional field `addItemRequests` (array)
          for (int i = 0; i < jsonArrayaddItemRequests.size(); i++) {
            ItemCreateRequest.validateJsonObject(jsonArrayaddItemRequests.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("changeCurrencies") != null && !jsonObj.get("changeCurrencies").isJsonNull()) {
        JsonArray jsonArraychangeCurrencies = jsonObj.getAsJsonArray("changeCurrencies");
        if (jsonArraychangeCurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changeCurrencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changeCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("changeCurrencies").toString()));
          }

          // validate the optional field `changeCurrencies` (array)
          for (int i = 0; i < jsonArraychangeCurrencies.size(); i++) {
            CurrencyChangeReward.validateJsonObject(jsonArraychangeCurrencies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("callWebhooks") != null && !jsonObj.get("callWebhooks").isJsonNull()) {
        JsonArray jsonArraycallWebhooks = jsonObj.getAsJsonArray("callWebhooks");
        if (jsonArraycallWebhooks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("callWebhooks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `callWebhooks` to be an array in the JSON string but got `%s`", jsonObj.get("callWebhooks").toString()));
          }

          // validate the optional field `callWebhooks` (array)
          for (int i = 0; i < jsonArraycallWebhooks.size(); i++) {
            WebhookReward.validateJsonObject(jsonArraycallWebhooks.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("addItems") != null && !jsonObj.get("addItems").isJsonNull()) {
        JsonArray jsonArrayaddItems = jsonObj.getAsJsonArray("addItems");
        if (jsonArrayaddItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addItems` to be an array in the JSON string but got `%s`", jsonObj.get("addItems").toString()));
          }

          // validate the optional field `addItems` (array)
          for (int i = 0; i < jsonArrayaddItems.size(); i++) {
            NewItemReward.validateJsonObject(jsonArrayaddItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerReward.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerReward' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerReward> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerReward.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerReward>() {
           @Override
           public void write(JsonWriter out, PlayerReward value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerReward read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlayerReward instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerReward given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerReward
  * @throws IOException if the JSON string is invalid with respect to PlayerReward
  */
  public static PlayerReward fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerReward.class);
  }

 /**
  * Convert an instance of PlayerReward to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

