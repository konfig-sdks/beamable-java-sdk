/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupUpdate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupUpdate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPE = "enrollmentType";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPE)
  private String enrollmentType;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_SLOGAN = "slogan";
  @SerializedName(SERIALIZED_NAME_SLOGAN)
  private String slogan;

  public static final String SERIALIZED_NAME_REQUIREMENT = "requirement";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT)
  private Integer requirement;

  public static final String SERIALIZED_NAME_MOTD = "motd";
  @SerializedName(SERIALIZED_NAME_MOTD)
  private String motd;

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private String clientData;

  public static final String SERIALIZED_NAME_SUB_GROUP = "subGroup";
  @SerializedName(SERIALIZED_NAME_SUB_GROUP)
  private Integer subGroup;

  public GroupUpdate() {
  }

  public GroupUpdate name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public GroupUpdate enrollmentType(String enrollmentType) {
    
    
    
    
    this.enrollmentType = enrollmentType;
    return this;
  }

   /**
   * Get enrollmentType
   * @return enrollmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEnrollmentType() {
    return enrollmentType;
  }


  public void setEnrollmentType(String enrollmentType) {
    
    
    
    this.enrollmentType = enrollmentType;
  }


  public GroupUpdate tag(String tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    
    
    
    this.tag = tag;
  }


  public GroupUpdate slogan(String slogan) {
    
    
    
    
    this.slogan = slogan;
    return this;
  }

   /**
   * Get slogan
   * @return slogan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSlogan() {
    return slogan;
  }


  public void setSlogan(String slogan) {
    
    
    
    this.slogan = slogan;
  }


  public GroupUpdate requirement(Integer requirement) {
    
    
    
    
    this.requirement = requirement;
    return this;
  }

   /**
   * Get requirement
   * @return requirement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRequirement() {
    return requirement;
  }


  public void setRequirement(Integer requirement) {
    
    
    
    this.requirement = requirement;
  }


  public GroupUpdate motd(String motd) {
    
    
    
    
    this.motd = motd;
    return this;
  }

   /**
   * Get motd
   * @return motd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMotd() {
    return motd;
  }


  public void setMotd(String motd) {
    
    
    
    this.motd = motd;
  }


  public GroupUpdate clientData(String clientData) {
    
    
    
    
    this.clientData = clientData;
    return this;
  }

   /**
   * Get clientData
   * @return clientData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientData() {
    return clientData;
  }


  public void setClientData(String clientData) {
    
    
    
    this.clientData = clientData;
  }


  public GroupUpdate subGroup(Integer subGroup) {
    
    
    
    
    this.subGroup = subGroup;
    return this;
  }

   /**
   * Get subGroup
   * @return subGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSubGroup() {
    return subGroup;
  }


  public void setSubGroup(Integer subGroup) {
    
    
    
    this.subGroup = subGroup;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupUpdate instance itself
   */
  public GroupUpdate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupUpdate groupUpdate = (GroupUpdate) o;
    return Objects.equals(this.name, groupUpdate.name) &&
        Objects.equals(this.enrollmentType, groupUpdate.enrollmentType) &&
        Objects.equals(this.tag, groupUpdate.tag) &&
        Objects.equals(this.slogan, groupUpdate.slogan) &&
        Objects.equals(this.requirement, groupUpdate.requirement) &&
        Objects.equals(this.motd, groupUpdate.motd) &&
        Objects.equals(this.clientData, groupUpdate.clientData) &&
        Objects.equals(this.subGroup, groupUpdate.subGroup)&&
        Objects.equals(this.additionalProperties, groupUpdate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, enrollmentType, tag, slogan, requirement, motd, clientData, subGroup, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupUpdate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enrollmentType: ").append(toIndentedString(enrollmentType)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    slogan: ").append(toIndentedString(slogan)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    motd: ").append(toIndentedString(motd)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    subGroup: ").append(toIndentedString(subGroup)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("enrollmentType");
    openapiFields.add("tag");
    openapiFields.add("slogan");
    openapiFields.add("requirement");
    openapiFields.add("motd");
    openapiFields.add("clientData");
    openapiFields.add("subGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupUpdate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupUpdate is not found in the empty JSON string", GroupUpdate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("enrollmentType") != null && !jsonObj.get("enrollmentType").isJsonNull()) && !jsonObj.get("enrollmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentType").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("slogan") != null && !jsonObj.get("slogan").isJsonNull()) && !jsonObj.get("slogan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slogan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slogan").toString()));
      }
      if ((jsonObj.get("motd") != null && !jsonObj.get("motd").isJsonNull()) && !jsonObj.get("motd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motd").toString()));
      }
      if ((jsonObj.get("clientData") != null && !jsonObj.get("clientData").isJsonNull()) && !jsonObj.get("clientData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupUpdate>() {
           @Override
           public void write(JsonWriter out, GroupUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupUpdate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupUpdate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupUpdate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupUpdate
  * @throws IOException if the JSON string is invalid with respect to GroupUpdate
  */
  public static GroupUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupUpdate.class);
  }

 /**
  * Convert an instance of GroupUpdate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

