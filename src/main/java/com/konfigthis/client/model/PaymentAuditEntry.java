/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CurrencyChange;
import com.konfigthis.client.model.EntitlementGenerator;
import com.konfigthis.client.model.InFlightMessage;
import com.konfigthis.client.model.ItemCreateRequest;
import com.konfigthis.client.model.PaymentDetailsEntry;
import com.konfigthis.client.model.PaymentHistoryEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentAuditEntry
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentAuditEntry {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_IN_FLIGHT = "inFlight";
  @SerializedName(SERIALIZED_NAME_IN_FLIGHT)
  private List<InFlightMessage> inFlight = null;

  public static final String SERIALIZED_NAME_PROVIDERID = "providerid";
  @SerializedName(SERIALIZED_NAME_PROVIDERID)
  private String providerid;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<PaymentHistoryEntry> history = null;

  public static final String SERIALIZED_NAME_TXID = "txid";
  @SerializedName(SERIALIZED_NAME_TXID)
  private Integer txid;

  public static final String SERIALIZED_NAME_PROVIDERNAME = "providername";
  @SerializedName(SERIALIZED_NAME_PROVIDERNAME)
  private String providername;

  public static final String SERIALIZED_NAME_OBTAIN_ITEMS = "obtainItems";
  @SerializedName(SERIALIZED_NAME_OBTAIN_ITEMS)
  private List<ItemCreateRequest> obtainItems = null;

  public static final String SERIALIZED_NAME_TXSTATE = "txstate";
  @SerializedName(SERIALIZED_NAME_TXSTATE)
  private String txstate;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private Integer updated;

  public static final String SERIALIZED_NAME_OBTAIN_CURRENCY = "obtainCurrency";
  @SerializedName(SERIALIZED_NAME_OBTAIN_CURRENCY)
  private List<CurrencyChange> obtainCurrency = null;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<EntitlementGenerator> entitlements = null;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private PaymentDetailsEntry details;

  public static final String SERIALIZED_NAME_REPLAY_GUARD_VALUE = "replayGuardValue";
  @SerializedName(SERIALIZED_NAME_REPLAY_GUARD_VALUE)
  private String replayGuardValue;

  public static final String SERIALIZED_NAME_GT = "gt";
  @SerializedName(SERIALIZED_NAME_GT)
  private Integer gt;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public PaymentAuditEntry() {
  }

  public PaymentAuditEntry version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public PaymentAuditEntry inFlight(List<InFlightMessage> inFlight) {
    
    
    
    
    this.inFlight = inFlight;
    return this;
  }

  public PaymentAuditEntry addInFlightItem(InFlightMessage inFlightItem) {
    if (this.inFlight == null) {
      this.inFlight = new ArrayList<>();
    }
    this.inFlight.add(inFlightItem);
    return this;
  }

   /**
   * Get inFlight
   * @return inFlight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InFlightMessage> getInFlight() {
    return inFlight;
  }


  public void setInFlight(List<InFlightMessage> inFlight) {
    
    
    
    this.inFlight = inFlight;
  }


  public PaymentAuditEntry providerid(String providerid) {
    
    
    
    
    this.providerid = providerid;
    return this;
  }

   /**
   * Get providerid
   * @return providerid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProviderid() {
    return providerid;
  }


  public void setProviderid(String providerid) {
    
    
    
    this.providerid = providerid;
  }


  public PaymentAuditEntry history(List<PaymentHistoryEntry> history) {
    
    
    
    
    this.history = history;
    return this;
  }

  public PaymentAuditEntry addHistoryItem(PaymentHistoryEntry historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaymentHistoryEntry> getHistory() {
    return history;
  }


  public void setHistory(List<PaymentHistoryEntry> history) {
    
    
    
    this.history = history;
  }


  public PaymentAuditEntry txid(Integer txid) {
    
    
    
    
    this.txid = txid;
    return this;
  }

   /**
   * Get txid
   * @return txid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTxid() {
    return txid;
  }


  public void setTxid(Integer txid) {
    
    
    
    this.txid = txid;
  }


  public PaymentAuditEntry providername(String providername) {
    
    
    
    
    this.providername = providername;
    return this;
  }

   /**
   * Get providername
   * @return providername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProvidername() {
    return providername;
  }


  public void setProvidername(String providername) {
    
    
    
    this.providername = providername;
  }


  public PaymentAuditEntry obtainItems(List<ItemCreateRequest> obtainItems) {
    
    
    
    
    this.obtainItems = obtainItems;
    return this;
  }

  public PaymentAuditEntry addObtainItemsItem(ItemCreateRequest obtainItemsItem) {
    if (this.obtainItems == null) {
      this.obtainItems = new ArrayList<>();
    }
    this.obtainItems.add(obtainItemsItem);
    return this;
  }

   /**
   * Get obtainItems
   * @return obtainItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ItemCreateRequest> getObtainItems() {
    return obtainItems;
  }


  public void setObtainItems(List<ItemCreateRequest> obtainItems) {
    
    
    
    this.obtainItems = obtainItems;
  }


  public PaymentAuditEntry txstate(String txstate) {
    
    
    
    
    this.txstate = txstate;
    return this;
  }

   /**
   * Get txstate
   * @return txstate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTxstate() {
    return txstate;
  }


  public void setTxstate(String txstate) {
    
    
    
    this.txstate = txstate;
  }


  public PaymentAuditEntry updated(Integer updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUpdated() {
    return updated;
  }


  public void setUpdated(Integer updated) {
    
    
    
    this.updated = updated;
  }


  public PaymentAuditEntry obtainCurrency(List<CurrencyChange> obtainCurrency) {
    
    
    
    
    this.obtainCurrency = obtainCurrency;
    return this;
  }

  public PaymentAuditEntry addObtainCurrencyItem(CurrencyChange obtainCurrencyItem) {
    if (this.obtainCurrency == null) {
      this.obtainCurrency = new ArrayList<>();
    }
    this.obtainCurrency.add(obtainCurrencyItem);
    return this;
  }

   /**
   * Get obtainCurrency
   * @return obtainCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CurrencyChange> getObtainCurrency() {
    return obtainCurrency;
  }


  public void setObtainCurrency(List<CurrencyChange> obtainCurrency) {
    
    
    
    this.obtainCurrency = obtainCurrency;
  }


  public PaymentAuditEntry entitlements(List<EntitlementGenerator> entitlements) {
    
    
    
    
    this.entitlements = entitlements;
    return this;
  }

  public PaymentAuditEntry addEntitlementsItem(EntitlementGenerator entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

   /**
   * Get entitlements
   * @return entitlements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EntitlementGenerator> getEntitlements() {
    return entitlements;
  }


  public void setEntitlements(List<EntitlementGenerator> entitlements) {
    
    
    
    this.entitlements = entitlements;
  }


  public PaymentAuditEntry details(PaymentDetailsEntry details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentDetailsEntry getDetails() {
    return details;
  }


  public void setDetails(PaymentDetailsEntry details) {
    
    
    
    this.details = details;
  }


  public PaymentAuditEntry replayGuardValue(String replayGuardValue) {
    
    
    
    
    this.replayGuardValue = replayGuardValue;
    return this;
  }

   /**
   * Get replayGuardValue
   * @return replayGuardValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReplayGuardValue() {
    return replayGuardValue;
  }


  public void setReplayGuardValue(String replayGuardValue) {
    
    
    
    this.replayGuardValue = replayGuardValue;
  }


  public PaymentAuditEntry gt(Integer gt) {
    
    
    
    
    this.gt = gt;
    return this;
  }

   /**
   * Get gt
   * @return gt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getGt() {
    return gt;
  }


  public void setGt(Integer gt) {
    
    
    
    this.gt = gt;
  }


  public PaymentAuditEntry created(Integer created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreated() {
    return created;
  }


  public void setCreated(Integer created) {
    
    
    
    this.created = created;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentAuditEntry instance itself
   */
  public PaymentAuditEntry putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAuditEntry paymentAuditEntry = (PaymentAuditEntry) o;
    return Objects.equals(this.version, paymentAuditEntry.version) &&
        Objects.equals(this.inFlight, paymentAuditEntry.inFlight) &&
        Objects.equals(this.providerid, paymentAuditEntry.providerid) &&
        Objects.equals(this.history, paymentAuditEntry.history) &&
        Objects.equals(this.txid, paymentAuditEntry.txid) &&
        Objects.equals(this.providername, paymentAuditEntry.providername) &&
        Objects.equals(this.obtainItems, paymentAuditEntry.obtainItems) &&
        Objects.equals(this.txstate, paymentAuditEntry.txstate) &&
        Objects.equals(this.updated, paymentAuditEntry.updated) &&
        Objects.equals(this.obtainCurrency, paymentAuditEntry.obtainCurrency) &&
        Objects.equals(this.entitlements, paymentAuditEntry.entitlements) &&
        Objects.equals(this.details, paymentAuditEntry.details) &&
        Objects.equals(this.replayGuardValue, paymentAuditEntry.replayGuardValue) &&
        Objects.equals(this.gt, paymentAuditEntry.gt) &&
        Objects.equals(this.created, paymentAuditEntry.created)&&
        Objects.equals(this.additionalProperties, paymentAuditEntry.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, inFlight, providerid, history, txid, providername, obtainItems, txstate, updated, obtainCurrency, entitlements, details, replayGuardValue, gt, created, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAuditEntry {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    inFlight: ").append(toIndentedString(inFlight)).append("\n");
    sb.append("    providerid: ").append(toIndentedString(providerid)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    providername: ").append(toIndentedString(providername)).append("\n");
    sb.append("    obtainItems: ").append(toIndentedString(obtainItems)).append("\n");
    sb.append("    txstate: ").append(toIndentedString(txstate)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    obtainCurrency: ").append(toIndentedString(obtainCurrency)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    replayGuardValue: ").append(toIndentedString(replayGuardValue)).append("\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("inFlight");
    openapiFields.add("providerid");
    openapiFields.add("history");
    openapiFields.add("txid");
    openapiFields.add("providername");
    openapiFields.add("obtainItems");
    openapiFields.add("txstate");
    openapiFields.add("updated");
    openapiFields.add("obtainCurrency");
    openapiFields.add("entitlements");
    openapiFields.add("details");
    openapiFields.add("replayGuardValue");
    openapiFields.add("gt");
    openapiFields.add("created");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("txid");
    openapiRequiredFields.add("gt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentAuditEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentAuditEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAuditEntry is not found in the empty JSON string", PaymentAuditEntry.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentAuditEntry.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("inFlight") != null && !jsonObj.get("inFlight").isJsonNull()) {
        JsonArray jsonArrayinFlight = jsonObj.getAsJsonArray("inFlight");
        if (jsonArrayinFlight != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inFlight").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inFlight` to be an array in the JSON string but got `%s`", jsonObj.get("inFlight").toString()));
          }

          // validate the optional field `inFlight` (array)
          for (int i = 0; i < jsonArrayinFlight.size(); i++) {
            InFlightMessage.validateJsonObject(jsonArrayinFlight.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("providerid") != null && !jsonObj.get("providerid").isJsonNull()) && !jsonObj.get("providerid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerid").toString()));
      }
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        JsonArray jsonArrayhistory = jsonObj.getAsJsonArray("history");
        if (jsonArrayhistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
          }

          // validate the optional field `history` (array)
          for (int i = 0; i < jsonArrayhistory.size(); i++) {
            PaymentHistoryEntry.validateJsonObject(jsonArrayhistory.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("providername") != null && !jsonObj.get("providername").isJsonNull()) && !jsonObj.get("providername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providername").toString()));
      }
      if (jsonObj.get("obtainItems") != null && !jsonObj.get("obtainItems").isJsonNull()) {
        JsonArray jsonArrayobtainItems = jsonObj.getAsJsonArray("obtainItems");
        if (jsonArrayobtainItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obtainItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obtainItems` to be an array in the JSON string but got `%s`", jsonObj.get("obtainItems").toString()));
          }

          // validate the optional field `obtainItems` (array)
          for (int i = 0; i < jsonArrayobtainItems.size(); i++) {
            ItemCreateRequest.validateJsonObject(jsonArrayobtainItems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("txstate") != null && !jsonObj.get("txstate").isJsonNull()) && !jsonObj.get("txstate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txstate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txstate").toString()));
      }
      if (jsonObj.get("obtainCurrency") != null && !jsonObj.get("obtainCurrency").isJsonNull()) {
        JsonArray jsonArrayobtainCurrency = jsonObj.getAsJsonArray("obtainCurrency");
        if (jsonArrayobtainCurrency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obtainCurrency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obtainCurrency` to be an array in the JSON string but got `%s`", jsonObj.get("obtainCurrency").toString()));
          }

          // validate the optional field `obtainCurrency` (array)
          for (int i = 0; i < jsonArrayobtainCurrency.size(); i++) {
            CurrencyChange.validateJsonObject(jsonArrayobtainCurrency.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonNull()) {
        JsonArray jsonArrayentitlements = jsonObj.getAsJsonArray("entitlements");
        if (jsonArrayentitlements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
          }

          // validate the optional field `entitlements` (array)
          for (int i = 0; i < jsonArrayentitlements.size(); i++) {
            EntitlementGenerator.validateJsonObject(jsonArrayentitlements.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        PaymentDetailsEntry.validateJsonObject(jsonObj.getAsJsonObject("details"));
      }
      if ((jsonObj.get("replayGuardValue") != null && !jsonObj.get("replayGuardValue").isJsonNull()) && !jsonObj.get("replayGuardValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replayGuardValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replayGuardValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAuditEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAuditEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAuditEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAuditEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAuditEntry>() {
           @Override
           public void write(JsonWriter out, PaymentAuditEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAuditEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentAuditEntry instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentAuditEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentAuditEntry
  * @throws IOException if the JSON string is invalid with respect to PaymentAuditEntry
  */
  public static PaymentAuditEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAuditEntry.class);
  }

 /**
  * Convert an instance of PaymentAuditEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

