/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.StateChangeTrigger;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EntitlementDefinition
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EntitlementDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MAX_GRANTS = "maxGrants";
  @SerializedName(SERIALIZED_NAME_MAX_GRANTS)
  private Integer maxGrants;

  public static final String SERIALIZED_NAME_GROUP_SYMBOLS = "groupSymbols";
  @SerializedName(SERIALIZED_NAME_GROUP_SYMBOLS)
  private List<String> groupSymbols = null;

  public static final String SERIALIZED_NAME_TRANSFERABLE = "transferable";
  @SerializedName(SERIALIZED_NAME_TRANSFERABLE)
  private Boolean transferable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CLAIM_TRIGGER = "claimTrigger";
  @SerializedName(SERIALIZED_NAME_CLAIM_TRIGGER)
  private StateChangeTrigger claimTrigger;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_GRANT_TRIGGER = "grantTrigger";
  @SerializedName(SERIALIZED_NAME_GRANT_TRIGGER)
  private StateChangeTrigger grantTrigger;

  public static final String SERIALIZED_NAME_TERMINAL_EXPIRATION_SECS = "terminalExpirationSecs";
  @SerializedName(SERIALIZED_NAME_TERMINAL_EXPIRATION_SECS)
  private Integer terminalExpirationSecs;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_REVOKE_MODE = "revokeMode";
  @SerializedName(SERIALIZED_NAME_REVOKE_MODE)
  private Integer revokeMode;

  public static final String SERIALIZED_NAME_REPLACES = "replaces";
  @SerializedName(SERIALIZED_NAME_REPLACES)
  private String replaces;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_PARAMETERIZED = "parameterized";
  @SerializedName(SERIALIZED_NAME_PARAMETERIZED)
  private Boolean parameterized;

  public EntitlementDefinition() {
  }

  public EntitlementDefinition description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public EntitlementDefinition maxGrants(Integer maxGrants) {
    
    
    
    
    this.maxGrants = maxGrants;
    return this;
  }

   /**
   * Get maxGrants
   * @return maxGrants
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaxGrants() {
    return maxGrants;
  }


  public void setMaxGrants(Integer maxGrants) {
    
    
    
    this.maxGrants = maxGrants;
  }


  public EntitlementDefinition groupSymbols(List<String> groupSymbols) {
    
    
    
    
    this.groupSymbols = groupSymbols;
    return this;
  }

  public EntitlementDefinition addGroupSymbolsItem(String groupSymbolsItem) {
    if (this.groupSymbols == null) {
      this.groupSymbols = new ArrayList<>();
    }
    this.groupSymbols.add(groupSymbolsItem);
    return this;
  }

   /**
   * Get groupSymbols
   * @return groupSymbols
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getGroupSymbols() {
    return groupSymbols;
  }


  public void setGroupSymbols(List<String> groupSymbols) {
    
    
    
    this.groupSymbols = groupSymbols;
  }


  public EntitlementDefinition transferable(Boolean transferable) {
    
    
    
    
    this.transferable = transferable;
    return this;
  }

   /**
   * Get transferable
   * @return transferable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getTransferable() {
    return transferable;
  }


  public void setTransferable(Boolean transferable) {
    
    
    
    this.transferable = transferable;
  }


  public EntitlementDefinition name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EntitlementDefinition claimTrigger(StateChangeTrigger claimTrigger) {
    
    
    
    
    this.claimTrigger = claimTrigger;
    return this;
  }

   /**
   * Get claimTrigger
   * @return claimTrigger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateChangeTrigger getClaimTrigger() {
    return claimTrigger;
  }


  public void setClaimTrigger(StateChangeTrigger claimTrigger) {
    
    
    
    this.claimTrigger = claimTrigger;
  }


  public EntitlementDefinition image(String image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    
    
    
    this.image = image;
  }


  public EntitlementDefinition grantTrigger(StateChangeTrigger grantTrigger) {
    
    
    
    
    this.grantTrigger = grantTrigger;
    return this;
  }

   /**
   * Get grantTrigger
   * @return grantTrigger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateChangeTrigger getGrantTrigger() {
    return grantTrigger;
  }


  public void setGrantTrigger(StateChangeTrigger grantTrigger) {
    
    
    
    this.grantTrigger = grantTrigger;
  }


  public EntitlementDefinition terminalExpirationSecs(Integer terminalExpirationSecs) {
    
    
    
    
    this.terminalExpirationSecs = terminalExpirationSecs;
    return this;
  }

   /**
   * Get terminalExpirationSecs
   * @return terminalExpirationSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTerminalExpirationSecs() {
    return terminalExpirationSecs;
  }


  public void setTerminalExpirationSecs(Integer terminalExpirationSecs) {
    
    
    
    this.terminalExpirationSecs = terminalExpirationSecs;
  }


  public EntitlementDefinition symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public EntitlementDefinition revokeMode(Integer revokeMode) {
    
    
    
    
    this.revokeMode = revokeMode;
    return this;
  }

   /**
   * Get revokeMode
   * @return revokeMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRevokeMode() {
    return revokeMode;
  }


  public void setRevokeMode(Integer revokeMode) {
    
    
    
    this.revokeMode = revokeMode;
  }


  public EntitlementDefinition replaces(String replaces) {
    
    
    
    
    this.replaces = replaces;
    return this;
  }

   /**
   * Get replaces
   * @return replaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReplaces() {
    return replaces;
  }


  public void setReplaces(String replaces) {
    
    
    
    this.replaces = replaces;
  }


  public EntitlementDefinition created(Integer created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCreated() {
    return created;
  }


  public void setCreated(Integer created) {
    
    
    
    this.created = created;
  }


  public EntitlementDefinition parameterized(Boolean parameterized) {
    
    
    
    
    this.parameterized = parameterized;
    return this;
  }

   /**
   * Get parameterized
   * @return parameterized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getParameterized() {
    return parameterized;
  }


  public void setParameterized(Boolean parameterized) {
    
    
    
    this.parameterized = parameterized;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EntitlementDefinition instance itself
   */
  public EntitlementDefinition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitlementDefinition entitlementDefinition = (EntitlementDefinition) o;
    return Objects.equals(this.description, entitlementDefinition.description) &&
        Objects.equals(this.maxGrants, entitlementDefinition.maxGrants) &&
        Objects.equals(this.groupSymbols, entitlementDefinition.groupSymbols) &&
        Objects.equals(this.transferable, entitlementDefinition.transferable) &&
        Objects.equals(this.name, entitlementDefinition.name) &&
        Objects.equals(this.claimTrigger, entitlementDefinition.claimTrigger) &&
        Objects.equals(this.image, entitlementDefinition.image) &&
        Objects.equals(this.grantTrigger, entitlementDefinition.grantTrigger) &&
        Objects.equals(this.terminalExpirationSecs, entitlementDefinition.terminalExpirationSecs) &&
        Objects.equals(this.symbol, entitlementDefinition.symbol) &&
        Objects.equals(this.revokeMode, entitlementDefinition.revokeMode) &&
        Objects.equals(this.replaces, entitlementDefinition.replaces) &&
        Objects.equals(this.created, entitlementDefinition.created) &&
        Objects.equals(this.parameterized, entitlementDefinition.parameterized)&&
        Objects.equals(this.additionalProperties, entitlementDefinition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, maxGrants, groupSymbols, transferable, name, claimTrigger, image, grantTrigger, terminalExpirationSecs, symbol, revokeMode, replaces, created, parameterized, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitlementDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maxGrants: ").append(toIndentedString(maxGrants)).append("\n");
    sb.append("    groupSymbols: ").append(toIndentedString(groupSymbols)).append("\n");
    sb.append("    transferable: ").append(toIndentedString(transferable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    claimTrigger: ").append(toIndentedString(claimTrigger)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    grantTrigger: ").append(toIndentedString(grantTrigger)).append("\n");
    sb.append("    terminalExpirationSecs: ").append(toIndentedString(terminalExpirationSecs)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    revokeMode: ").append(toIndentedString(revokeMode)).append("\n");
    sb.append("    replaces: ").append(toIndentedString(replaces)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    parameterized: ").append(toIndentedString(parameterized)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("maxGrants");
    openapiFields.add("groupSymbols");
    openapiFields.add("transferable");
    openapiFields.add("name");
    openapiFields.add("claimTrigger");
    openapiFields.add("image");
    openapiFields.add("grantTrigger");
    openapiFields.add("terminalExpirationSecs");
    openapiFields.add("symbol");
    openapiFields.add("revokeMode");
    openapiFields.add("replaces");
    openapiFields.add("created");
    openapiFields.add("parameterized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maxGrants");
    openapiRequiredFields.add("transferable");
    openapiRequiredFields.add("revokeMode");
    openapiRequiredFields.add("created");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntitlementDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntitlementDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitlementDefinition is not found in the empty JSON string", EntitlementDefinition.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntitlementDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupSymbols") != null && !jsonObj.get("groupSymbols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupSymbols` to be an array in the JSON string but got `%s`", jsonObj.get("groupSymbols").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `claimTrigger`
      if (jsonObj.get("claimTrigger") != null && !jsonObj.get("claimTrigger").isJsonNull()) {
        StateChangeTrigger.validateJsonObject(jsonObj.getAsJsonObject("claimTrigger"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `grantTrigger`
      if (jsonObj.get("grantTrigger") != null && !jsonObj.get("grantTrigger").isJsonNull()) {
        StateChangeTrigger.validateJsonObject(jsonObj.getAsJsonObject("grantTrigger"));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("replaces") != null && !jsonObj.get("replaces").isJsonNull()) && !jsonObj.get("replaces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaces").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitlementDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitlementDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitlementDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitlementDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitlementDefinition>() {
           @Override
           public void write(JsonWriter out, EntitlementDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitlementDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EntitlementDefinition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntitlementDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntitlementDefinition
  * @throws IOException if the JSON string is invalid with respect to EntitlementDefinition
  */
  public static EntitlementDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitlementDefinition.class);
  }

 /**
  * Convert an instance of EntitlementDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

