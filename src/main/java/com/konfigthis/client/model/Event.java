/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ClientPermission;
import com.konfigthis.client.model.EventGroupRewards;
import com.konfigthis.client.model.EventPhase;
import com.konfigthis.client.model.EventRewardItem;
import com.konfigthis.client.model.LeaderboardCohortSettings;
import com.konfigthis.client.model.Schedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Event
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Event {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<EventPhase> phases = null;

  public static final String SERIALIZED_NAME_PARTITION_SIZE = "partition_size";
  @SerializedName(SERIALIZED_NAME_PARTITION_SIZE)
  private Integer partitionSize;

  public static final String SERIALIZED_NAME_GROUP_REWARDS = "group_rewards";
  @SerializedName(SERIALIZED_NAME_GROUP_REWARDS)
  private EventGroupRewards groupRewards;

  public static final String SERIALIZED_NAME_COHORT_SETTINGS = "cohortSettings";
  @SerializedName(SERIALIZED_NAME_COHORT_SETTINGS)
  private LeaderboardCohortSettings cohortSettings;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private ClientPermission permissions;

  public static final String SERIALIZED_NAME_STORES = "stores";
  @SerializedName(SERIALIZED_NAME_STORES)
  private List<String> stores = null;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_SCORE_REWARDS = "score_rewards";
  @SerializedName(SERIALIZED_NAME_SCORE_REWARDS)
  private List<EventRewardItem> scoreRewards = null;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  public static final String SERIALIZED_NAME_RANK_REWARDS = "rank_rewards";
  @SerializedName(SERIALIZED_NAME_RANK_REWARDS)
  private List<EventRewardItem> rankRewards = null;

  public Event() {
  }

  public Event name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Event startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Event phases(List<EventPhase> phases) {
    
    
    
    
    this.phases = phases;
    return this;
  }

  public Event addPhasesItem(EventPhase phasesItem) {
    if (this.phases == null) {
      this.phases = new ArrayList<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * Get phases
   * @return phases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventPhase> getPhases() {
    return phases;
  }


  public void setPhases(List<EventPhase> phases) {
    
    
    
    this.phases = phases;
  }


  public Event partitionSize(Integer partitionSize) {
    
    
    
    
    this.partitionSize = partitionSize;
    return this;
  }

   /**
   * Get partitionSize
   * @return partitionSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPartitionSize() {
    return partitionSize;
  }


  public void setPartitionSize(Integer partitionSize) {
    
    
    
    this.partitionSize = partitionSize;
  }


  public Event groupRewards(EventGroupRewards groupRewards) {
    
    
    
    
    this.groupRewards = groupRewards;
    return this;
  }

   /**
   * Get groupRewards
   * @return groupRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventGroupRewards getGroupRewards() {
    return groupRewards;
  }


  public void setGroupRewards(EventGroupRewards groupRewards) {
    
    
    
    this.groupRewards = groupRewards;
  }


  public Event cohortSettings(LeaderboardCohortSettings cohortSettings) {
    
    
    
    
    this.cohortSettings = cohortSettings;
    return this;
  }

   /**
   * Get cohortSettings
   * @return cohortSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LeaderboardCohortSettings getCohortSettings() {
    return cohortSettings;
  }


  public void setCohortSettings(LeaderboardCohortSettings cohortSettings) {
    
    
    
    this.cohortSettings = cohortSettings;
  }


  public Event permissions(ClientPermission permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClientPermission getPermissions() {
    return permissions;
  }


  public void setPermissions(ClientPermission permissions) {
    
    
    
    this.permissions = permissions;
  }


  public Event stores(List<String> stores) {
    
    
    
    
    this.stores = stores;
    return this;
  }

  public Event addStoresItem(String storesItem) {
    if (this.stores == null) {
      this.stores = new ArrayList<>();
    }
    this.stores.add(storesItem);
    return this;
  }

   /**
   * Get stores
   * @return stores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getStores() {
    return stores;
  }


  public void setStores(List<String> stores) {
    
    
    
    this.stores = stores;
  }


  public Event symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public Event scoreRewards(List<EventRewardItem> scoreRewards) {
    
    
    
    
    this.scoreRewards = scoreRewards;
    return this;
  }

  public Event addScoreRewardsItem(EventRewardItem scoreRewardsItem) {
    if (this.scoreRewards == null) {
      this.scoreRewards = new ArrayList<>();
    }
    this.scoreRewards.add(scoreRewardsItem);
    return this;
  }

   /**
   * Get scoreRewards
   * @return scoreRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventRewardItem> getScoreRewards() {
    return scoreRewards;
  }


  public void setScoreRewards(List<EventRewardItem> scoreRewards) {
    
    
    
    this.scoreRewards = scoreRewards;
  }


  public Event schedule(Schedule schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Schedule getSchedule() {
    return schedule;
  }


  public void setSchedule(Schedule schedule) {
    
    
    
    this.schedule = schedule;
  }


  public Event rankRewards(List<EventRewardItem> rankRewards) {
    
    
    
    
    this.rankRewards = rankRewards;
    return this;
  }

  public Event addRankRewardsItem(EventRewardItem rankRewardsItem) {
    if (this.rankRewards == null) {
      this.rankRewards = new ArrayList<>();
    }
    this.rankRewards.add(rankRewardsItem);
    return this;
  }

   /**
   * Get rankRewards
   * @return rankRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventRewardItem> getRankRewards() {
    return rankRewards;
  }


  public void setRankRewards(List<EventRewardItem> rankRewards) {
    
    
    
    this.rankRewards = rankRewards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Event instance itself
   */
  public Event putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.name, event.name) &&
        Objects.equals(this.startDate, event.startDate) &&
        Objects.equals(this.phases, event.phases) &&
        Objects.equals(this.partitionSize, event.partitionSize) &&
        Objects.equals(this.groupRewards, event.groupRewards) &&
        Objects.equals(this.cohortSettings, event.cohortSettings) &&
        Objects.equals(this.permissions, event.permissions) &&
        Objects.equals(this.stores, event.stores) &&
        Objects.equals(this.symbol, event.symbol) &&
        Objects.equals(this.scoreRewards, event.scoreRewards) &&
        Objects.equals(this.schedule, event.schedule) &&
        Objects.equals(this.rankRewards, event.rankRewards)&&
        Objects.equals(this.additionalProperties, event.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, startDate, phases, partitionSize, groupRewards, cohortSettings, permissions, stores, symbol, scoreRewards, schedule, rankRewards, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    partitionSize: ").append(toIndentedString(partitionSize)).append("\n");
    sb.append("    groupRewards: ").append(toIndentedString(groupRewards)).append("\n");
    sb.append("    cohortSettings: ").append(toIndentedString(cohortSettings)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    stores: ").append(toIndentedString(stores)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    scoreRewards: ").append(toIndentedString(scoreRewards)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    rankRewards: ").append(toIndentedString(rankRewards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("start_date");
    openapiFields.add("phases");
    openapiFields.add("partition_size");
    openapiFields.add("group_rewards");
    openapiFields.add("cohortSettings");
    openapiFields.add("permissions");
    openapiFields.add("stores");
    openapiFields.add("symbol");
    openapiFields.add("score_rewards");
    openapiFields.add("schedule");
    openapiFields.add("rank_rewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Event
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            EventPhase.validateJsonObject(jsonArrayphases.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `group_rewards`
      if (jsonObj.get("group_rewards") != null && !jsonObj.get("group_rewards").isJsonNull()) {
        EventGroupRewards.validateJsonObject(jsonObj.getAsJsonObject("group_rewards"));
      }
      // validate the optional field `cohortSettings`
      if (jsonObj.get("cohortSettings") != null && !jsonObj.get("cohortSettings").isJsonNull()) {
        LeaderboardCohortSettings.validateJsonObject(jsonObj.getAsJsonObject("cohortSettings"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        ClientPermission.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stores") != null && !jsonObj.get("stores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stores` to be an array in the JSON string but got `%s`", jsonObj.get("stores").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (jsonObj.get("score_rewards") != null && !jsonObj.get("score_rewards").isJsonNull()) {
        JsonArray jsonArrayscoreRewards = jsonObj.getAsJsonArray("score_rewards");
        if (jsonArrayscoreRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("score_rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `score_rewards` to be an array in the JSON string but got `%s`", jsonObj.get("score_rewards").toString()));
          }

          // validate the optional field `score_rewards` (array)
          for (int i = 0; i < jsonArrayscoreRewards.size(); i++) {
            EventRewardItem.validateJsonObject(jsonArrayscoreRewards.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        Schedule.validateJsonObject(jsonObj.getAsJsonObject("schedule"));
      }
      if (jsonObj.get("rank_rewards") != null && !jsonObj.get("rank_rewards").isJsonNull()) {
        JsonArray jsonArrayrankRewards = jsonObj.getAsJsonArray("rank_rewards");
        if (jsonArrayrankRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rank_rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rank_rewards` to be an array in the JSON string but got `%s`", jsonObj.get("rank_rewards").toString()));
          }

          // validate the optional field `rank_rewards` (array)
          for (int i = 0; i < jsonArrayrankRewards.size(); i++) {
            EventRewardItem.validateJsonObject(jsonArrayrankRewards.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Event instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Event given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Event
  * @throws IOException if the JSON string is invalid with respect to Event
  */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

 /**
  * Convert an instance of Event to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

