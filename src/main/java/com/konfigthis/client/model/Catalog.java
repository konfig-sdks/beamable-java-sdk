/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OfferDefinition;
import com.konfigthis.client.model.SKUDefinitions;
import com.konfigthis.client.model.Store;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Catalog
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Catalog {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_LISTING_INFO$DEFAULT$2 = "listingInfo$default$2";
  @SerializedName(SERIALIZED_NAME_LISTING_INFO$DEFAULT$2)
  private Object listingInfo$default$2;

  public static final String SERIALIZED_NAME_OFFER_DEFINITIONS = "offerDefinitions";
  @SerializedName(SERIALIZED_NAME_OFFER_DEFINITIONS)
  private List<OfferDefinition> offerDefinitions = null;

  public static final String SERIALIZED_NAME_STORES = "stores";
  @SerializedName(SERIALIZED_NAME_STORES)
  private List<Store> stores = null;

  public static final String SERIALIZED_NAME_LISTING_INFO$DEFAULT$3 = "listingInfo$default$3";
  @SerializedName(SERIALIZED_NAME_LISTING_INFO$DEFAULT$3)
  private SKUDefinitions listingInfo$default$3;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public Catalog() {
  }

  public Catalog version(Integer version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    
    
    
    this.version = version;
  }


  public Catalog listingInfo$default$2(Object listingInfo$default$2) {
    
    
    
    
    this.listingInfo$default$2 = listingInfo$default$2;
    return this;
  }

   /**
   * Get listingInfo$default$2
   * @return listingInfo$default$2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getListingInfo$default$2() {
    return listingInfo$default$2;
  }


  public void setListingInfo$default$2(Object listingInfo$default$2) {
    
    
    
    this.listingInfo$default$2 = listingInfo$default$2;
  }


  public Catalog offerDefinitions(List<OfferDefinition> offerDefinitions) {
    
    
    
    
    this.offerDefinitions = offerDefinitions;
    return this;
  }

  public Catalog addOfferDefinitionsItem(OfferDefinition offerDefinitionsItem) {
    if (this.offerDefinitions == null) {
      this.offerDefinitions = new ArrayList<>();
    }
    this.offerDefinitions.add(offerDefinitionsItem);
    return this;
  }

   /**
   * Get offerDefinitions
   * @return offerDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OfferDefinition> getOfferDefinitions() {
    return offerDefinitions;
  }


  public void setOfferDefinitions(List<OfferDefinition> offerDefinitions) {
    
    
    
    this.offerDefinitions = offerDefinitions;
  }


  public Catalog stores(List<Store> stores) {
    
    
    
    
    this.stores = stores;
    return this;
  }

  public Catalog addStoresItem(Store storesItem) {
    if (this.stores == null) {
      this.stores = new ArrayList<>();
    }
    this.stores.add(storesItem);
    return this;
  }

   /**
   * Get stores
   * @return stores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Store> getStores() {
    return stores;
  }


  public void setStores(List<Store> stores) {
    
    
    
    this.stores = stores;
  }


  public Catalog listingInfo$default$3(SKUDefinitions listingInfo$default$3) {
    
    
    
    
    this.listingInfo$default$3 = listingInfo$default$3;
    return this;
  }

   /**
   * Get listingInfo$default$3
   * @return listingInfo$default$3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SKUDefinitions getListingInfo$default$3() {
    return listingInfo$default$3;
  }


  public void setListingInfo$default$3(SKUDefinitions listingInfo$default$3) {
    
    
    
    this.listingInfo$default$3 = listingInfo$default$3;
  }


  public Catalog created(Integer created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreated() {
    return created;
  }


  public void setCreated(Integer created) {
    
    
    
    this.created = created;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Catalog instance itself
   */
  public Catalog putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Catalog catalog = (Catalog) o;
    return Objects.equals(this.version, catalog.version) &&
        Objects.equals(this.listingInfo$default$2, catalog.listingInfo$default$2) &&
        Objects.equals(this.offerDefinitions, catalog.offerDefinitions) &&
        Objects.equals(this.stores, catalog.stores) &&
        Objects.equals(this.listingInfo$default$3, catalog.listingInfo$default$3) &&
        Objects.equals(this.created, catalog.created)&&
        Objects.equals(this.additionalProperties, catalog.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, listingInfo$default$2, offerDefinitions, stores, listingInfo$default$3, created, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Catalog {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    listingInfo$default$2: ").append(toIndentedString(listingInfo$default$2)).append("\n");
    sb.append("    offerDefinitions: ").append(toIndentedString(offerDefinitions)).append("\n");
    sb.append("    stores: ").append(toIndentedString(stores)).append("\n");
    sb.append("    listingInfo$default$3: ").append(toIndentedString(listingInfo$default$3)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("listingInfo$default$2");
    openapiFields.add("offerDefinitions");
    openapiFields.add("stores");
    openapiFields.add("listingInfo$default$3");
    openapiFields.add("created");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Catalog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Catalog.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Catalog is not found in the empty JSON string", Catalog.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Catalog.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("offerDefinitions") != null && !jsonObj.get("offerDefinitions").isJsonNull()) {
        JsonArray jsonArrayofferDefinitions = jsonObj.getAsJsonArray("offerDefinitions");
        if (jsonArrayofferDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("offerDefinitions").toString()));
          }

          // validate the optional field `offerDefinitions` (array)
          for (int i = 0; i < jsonArrayofferDefinitions.size(); i++) {
            OfferDefinition.validateJsonObject(jsonArrayofferDefinitions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("stores") != null && !jsonObj.get("stores").isJsonNull()) {
        JsonArray jsonArraystores = jsonObj.getAsJsonArray("stores");
        if (jsonArraystores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stores` to be an array in the JSON string but got `%s`", jsonObj.get("stores").toString()));
          }

          // validate the optional field `stores` (array)
          for (int i = 0; i < jsonArraystores.size(); i++) {
            Store.validateJsonObject(jsonArraystores.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `listingInfo$default$3`
      if (jsonObj.get("listingInfo$default$3") != null && !jsonObj.get("listingInfo$default$3").isJsonNull()) {
        SKUDefinitions.validateJsonObject(jsonObj.getAsJsonObject("listingInfo$default$3"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Catalog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Catalog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Catalog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Catalog.class));

       return (TypeAdapter<T>) new TypeAdapter<Catalog>() {
           @Override
           public void write(JsonWriter out, Catalog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Catalog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Catalog instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Catalog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Catalog
  * @throws IOException if the JSON string is invalid with respect to Catalog
  */
  public static Catalog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Catalog.class);
  }

 /**
  * Convert an instance of Catalog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

