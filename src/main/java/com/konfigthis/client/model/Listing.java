/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CohortRequirement;
import com.konfigthis.client.model.EntitlementRequirement;
import com.konfigthis.client.model.OfferRequirement;
import com.konfigthis.client.model.Period;
import com.konfigthis.client.model.PlayerStatRequirement;
import com.konfigthis.client.model.Price;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Listing
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Listing {
  public static final String SERIALIZED_NAME_COHORT_REQUIREMENTS = "cohortRequirements";
  @SerializedName(SERIALIZED_NAME_COHORT_REQUIREMENTS)
  private List<CohortRequirement> cohortRequirements = null;

  public static final String SERIALIZED_NAME_OFFER_SYMBOL = "offerSymbol";
  @SerializedName(SERIALIZED_NAME_OFFER_SYMBOL)
  private String offerSymbol;

  public static final String SERIALIZED_NAME_PURCHASE_LIMIT = "purchaseLimit";
  @SerializedName(SERIALIZED_NAME_PURCHASE_LIMIT)
  private Integer purchaseLimit;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_PLAYER_STAT_REQUIREMENTS = "playerStatRequirements";
  @SerializedName(SERIALIZED_NAME_PLAYER_STAT_REQUIREMENTS)
  private List<PlayerStatRequirement> playerStatRequirements = null;

  public static final String SERIALIZED_NAME_BUTTON_TEXT = "buttonText";
  @SerializedName(SERIALIZED_NAME_BUTTON_TEXT)
  private Map<String, Object> buttonText = null;

  public static final String SERIALIZED_NAME_ENTITLEMENT_REQUIREMENTS = "entitlementRequirements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_REQUIREMENTS)
  private List<EntitlementRequirement> entitlementRequirements = null;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private Map<String, Object> clientData = null;

  public static final String SERIALIZED_NAME_ACTIVE_DURATION_COOL_DOWN_SECONDS = "activeDurationCoolDownSeconds";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DURATION_COOL_DOWN_SECONDS)
  private Integer activeDurationCoolDownSeconds;

  public static final String SERIALIZED_NAME_ACTIVE_DURATION_SECONDS = "activeDurationSeconds";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DURATION_SECONDS)
  private Integer activeDurationSeconds;

  public static final String SERIALIZED_NAME_ACTIVE_DURATION_PURCHASE_LIMIT = "activeDurationPurchaseLimit";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DURATION_PURCHASE_LIMIT)
  private Integer activeDurationPurchaseLimit;

  public static final String SERIALIZED_NAME_OFFER_REQUIREMENTS = "offerRequirements";
  @SerializedName(SERIALIZED_NAME_OFFER_REQUIREMENTS)
  private List<OfferRequirement> offerRequirements = null;

  public static final String SERIALIZED_NAME_ACTIVE_PERIOD = "activePeriod";
  @SerializedName(SERIALIZED_NAME_ACTIVE_PERIOD)
  private Period activePeriod;

  public Listing() {
  }

  public Listing cohortRequirements(List<CohortRequirement> cohortRequirements) {
    
    
    
    
    this.cohortRequirements = cohortRequirements;
    return this;
  }

  public Listing addCohortRequirementsItem(CohortRequirement cohortRequirementsItem) {
    if (this.cohortRequirements == null) {
      this.cohortRequirements = new ArrayList<>();
    }
    this.cohortRequirements.add(cohortRequirementsItem);
    return this;
  }

   /**
   * Get cohortRequirements
   * @return cohortRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CohortRequirement> getCohortRequirements() {
    return cohortRequirements;
  }


  public void setCohortRequirements(List<CohortRequirement> cohortRequirements) {
    
    
    
    this.cohortRequirements = cohortRequirements;
  }


  public Listing offerSymbol(String offerSymbol) {
    
    
    
    
    this.offerSymbol = offerSymbol;
    return this;
  }

   /**
   * Get offerSymbol
   * @return offerSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOfferSymbol() {
    return offerSymbol;
  }


  public void setOfferSymbol(String offerSymbol) {
    
    
    
    this.offerSymbol = offerSymbol;
  }


  public Listing purchaseLimit(Integer purchaseLimit) {
    
    
    
    
    this.purchaseLimit = purchaseLimit;
    return this;
  }

   /**
   * Get purchaseLimit
   * @return purchaseLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPurchaseLimit() {
    return purchaseLimit;
  }


  public void setPurchaseLimit(Integer purchaseLimit) {
    
    
    
    this.purchaseLimit = purchaseLimit;
  }


  public Listing price(Price price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Price getPrice() {
    return price;
  }


  public void setPrice(Price price) {
    
    
    
    this.price = price;
  }


  public Listing playerStatRequirements(List<PlayerStatRequirement> playerStatRequirements) {
    
    
    
    
    this.playerStatRequirements = playerStatRequirements;
    return this;
  }

  public Listing addPlayerStatRequirementsItem(PlayerStatRequirement playerStatRequirementsItem) {
    if (this.playerStatRequirements == null) {
      this.playerStatRequirements = new ArrayList<>();
    }
    this.playerStatRequirements.add(playerStatRequirementsItem);
    return this;
  }

   /**
   * Get playerStatRequirements
   * @return playerStatRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PlayerStatRequirement> getPlayerStatRequirements() {
    return playerStatRequirements;
  }


  public void setPlayerStatRequirements(List<PlayerStatRequirement> playerStatRequirements) {
    
    
    
    this.playerStatRequirements = playerStatRequirements;
  }


  public Listing buttonText(Map<String, Object> buttonText) {
    
    
    
    
    this.buttonText = buttonText;
    return this;
  }

  public Listing putButtonTextItem(String key, Object buttonTextItem) {
    if (this.buttonText == null) {
      this.buttonText = new HashMap<>();
    }
    this.buttonText.put(key, buttonTextItem);
    return this;
  }

   /**
   * Get buttonText
   * @return buttonText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getButtonText() {
    return buttonText;
  }


  public void setButtonText(Map<String, Object> buttonText) {
    
    
    
    this.buttonText = buttonText;
  }


  public Listing entitlementRequirements(List<EntitlementRequirement> entitlementRequirements) {
    
    
    
    
    this.entitlementRequirements = entitlementRequirements;
    return this;
  }

  public Listing addEntitlementRequirementsItem(EntitlementRequirement entitlementRequirementsItem) {
    if (this.entitlementRequirements == null) {
      this.entitlementRequirements = new ArrayList<>();
    }
    this.entitlementRequirements.add(entitlementRequirementsItem);
    return this;
  }

   /**
   * Get entitlementRequirements
   * @return entitlementRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EntitlementRequirement> getEntitlementRequirements() {
    return entitlementRequirements;
  }


  public void setEntitlementRequirements(List<EntitlementRequirement> entitlementRequirements) {
    
    
    
    this.entitlementRequirements = entitlementRequirements;
  }


  public Listing symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public Listing clientData(Map<String, Object> clientData) {
    
    
    
    
    this.clientData = clientData;
    return this;
  }

  public Listing putClientDataItem(String key, Object clientDataItem) {
    if (this.clientData == null) {
      this.clientData = new HashMap<>();
    }
    this.clientData.put(key, clientDataItem);
    return this;
  }

   /**
   * Get clientData
   * @return clientData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getClientData() {
    return clientData;
  }


  public void setClientData(Map<String, Object> clientData) {
    
    
    
    this.clientData = clientData;
  }


  public Listing activeDurationCoolDownSeconds(Integer activeDurationCoolDownSeconds) {
    
    
    
    
    this.activeDurationCoolDownSeconds = activeDurationCoolDownSeconds;
    return this;
  }

   /**
   * Get activeDurationCoolDownSeconds
   * @return activeDurationCoolDownSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getActiveDurationCoolDownSeconds() {
    return activeDurationCoolDownSeconds;
  }


  public void setActiveDurationCoolDownSeconds(Integer activeDurationCoolDownSeconds) {
    
    
    
    this.activeDurationCoolDownSeconds = activeDurationCoolDownSeconds;
  }


  public Listing activeDurationSeconds(Integer activeDurationSeconds) {
    
    
    
    
    this.activeDurationSeconds = activeDurationSeconds;
    return this;
  }

   /**
   * Get activeDurationSeconds
   * @return activeDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getActiveDurationSeconds() {
    return activeDurationSeconds;
  }


  public void setActiveDurationSeconds(Integer activeDurationSeconds) {
    
    
    
    this.activeDurationSeconds = activeDurationSeconds;
  }


  public Listing activeDurationPurchaseLimit(Integer activeDurationPurchaseLimit) {
    
    
    
    
    this.activeDurationPurchaseLimit = activeDurationPurchaseLimit;
    return this;
  }

   /**
   * Get activeDurationPurchaseLimit
   * @return activeDurationPurchaseLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getActiveDurationPurchaseLimit() {
    return activeDurationPurchaseLimit;
  }


  public void setActiveDurationPurchaseLimit(Integer activeDurationPurchaseLimit) {
    
    
    
    this.activeDurationPurchaseLimit = activeDurationPurchaseLimit;
  }


  public Listing offerRequirements(List<OfferRequirement> offerRequirements) {
    
    
    
    
    this.offerRequirements = offerRequirements;
    return this;
  }

  public Listing addOfferRequirementsItem(OfferRequirement offerRequirementsItem) {
    if (this.offerRequirements == null) {
      this.offerRequirements = new ArrayList<>();
    }
    this.offerRequirements.add(offerRequirementsItem);
    return this;
  }

   /**
   * Get offerRequirements
   * @return offerRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OfferRequirement> getOfferRequirements() {
    return offerRequirements;
  }


  public void setOfferRequirements(List<OfferRequirement> offerRequirements) {
    
    
    
    this.offerRequirements = offerRequirements;
  }


  public Listing activePeriod(Period activePeriod) {
    
    
    
    
    this.activePeriod = activePeriod;
    return this;
  }

   /**
   * Get activePeriod
   * @return activePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Period getActivePeriod() {
    return activePeriod;
  }


  public void setActivePeriod(Period activePeriod) {
    
    
    
    this.activePeriod = activePeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Listing instance itself
   */
  public Listing putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listing listing = (Listing) o;
    return Objects.equals(this.cohortRequirements, listing.cohortRequirements) &&
        Objects.equals(this.offerSymbol, listing.offerSymbol) &&
        Objects.equals(this.purchaseLimit, listing.purchaseLimit) &&
        Objects.equals(this.price, listing.price) &&
        Objects.equals(this.playerStatRequirements, listing.playerStatRequirements) &&
        Objects.equals(this.buttonText, listing.buttonText) &&
        Objects.equals(this.entitlementRequirements, listing.entitlementRequirements) &&
        Objects.equals(this.symbol, listing.symbol) &&
        Objects.equals(this.clientData, listing.clientData) &&
        Objects.equals(this.activeDurationCoolDownSeconds, listing.activeDurationCoolDownSeconds) &&
        Objects.equals(this.activeDurationSeconds, listing.activeDurationSeconds) &&
        Objects.equals(this.activeDurationPurchaseLimit, listing.activeDurationPurchaseLimit) &&
        Objects.equals(this.offerRequirements, listing.offerRequirements) &&
        Objects.equals(this.activePeriod, listing.activePeriod)&&
        Objects.equals(this.additionalProperties, listing.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cohortRequirements, offerSymbol, purchaseLimit, price, playerStatRequirements, buttonText, entitlementRequirements, symbol, clientData, activeDurationCoolDownSeconds, activeDurationSeconds, activeDurationPurchaseLimit, offerRequirements, activePeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listing {\n");
    sb.append("    cohortRequirements: ").append(toIndentedString(cohortRequirements)).append("\n");
    sb.append("    offerSymbol: ").append(toIndentedString(offerSymbol)).append("\n");
    sb.append("    purchaseLimit: ").append(toIndentedString(purchaseLimit)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    playerStatRequirements: ").append(toIndentedString(playerStatRequirements)).append("\n");
    sb.append("    buttonText: ").append(toIndentedString(buttonText)).append("\n");
    sb.append("    entitlementRequirements: ").append(toIndentedString(entitlementRequirements)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    activeDurationCoolDownSeconds: ").append(toIndentedString(activeDurationCoolDownSeconds)).append("\n");
    sb.append("    activeDurationSeconds: ").append(toIndentedString(activeDurationSeconds)).append("\n");
    sb.append("    activeDurationPurchaseLimit: ").append(toIndentedString(activeDurationPurchaseLimit)).append("\n");
    sb.append("    offerRequirements: ").append(toIndentedString(offerRequirements)).append("\n");
    sb.append("    activePeriod: ").append(toIndentedString(activePeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cohortRequirements");
    openapiFields.add("offerSymbol");
    openapiFields.add("purchaseLimit");
    openapiFields.add("price");
    openapiFields.add("playerStatRequirements");
    openapiFields.add("buttonText");
    openapiFields.add("entitlementRequirements");
    openapiFields.add("symbol");
    openapiFields.add("clientData");
    openapiFields.add("activeDurationCoolDownSeconds");
    openapiFields.add("activeDurationSeconds");
    openapiFields.add("activeDurationPurchaseLimit");
    openapiFields.add("offerRequirements");
    openapiFields.add("activePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Listing
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Listing.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Listing is not found in the empty JSON string", Listing.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("cohortRequirements") != null && !jsonObj.get("cohortRequirements").isJsonNull()) {
        JsonArray jsonArraycohortRequirements = jsonObj.getAsJsonArray("cohortRequirements");
        if (jsonArraycohortRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cohortRequirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cohortRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("cohortRequirements").toString()));
          }

          // validate the optional field `cohortRequirements` (array)
          for (int i = 0; i < jsonArraycohortRequirements.size(); i++) {
            CohortRequirement.validateJsonObject(jsonArraycohortRequirements.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("offerSymbol") != null && !jsonObj.get("offerSymbol").isJsonNull()) && !jsonObj.get("offerSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerSymbol").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      if (jsonObj.get("playerStatRequirements") != null && !jsonObj.get("playerStatRequirements").isJsonNull()) {
        JsonArray jsonArrayplayerStatRequirements = jsonObj.getAsJsonArray("playerStatRequirements");
        if (jsonArrayplayerStatRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerStatRequirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerStatRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("playerStatRequirements").toString()));
          }

          // validate the optional field `playerStatRequirements` (array)
          for (int i = 0; i < jsonArrayplayerStatRequirements.size(); i++) {
            PlayerStatRequirement.validateJsonObject(jsonArrayplayerStatRequirements.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("entitlementRequirements") != null && !jsonObj.get("entitlementRequirements").isJsonNull()) {
        JsonArray jsonArrayentitlementRequirements = jsonObj.getAsJsonArray("entitlementRequirements");
        if (jsonArrayentitlementRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlementRequirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlementRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlementRequirements").toString()));
          }

          // validate the optional field `entitlementRequirements` (array)
          for (int i = 0; i < jsonArrayentitlementRequirements.size(); i++) {
            EntitlementRequirement.validateJsonObject(jsonArrayentitlementRequirements.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (jsonObj.get("offerRequirements") != null && !jsonObj.get("offerRequirements").isJsonNull()) {
        JsonArray jsonArrayofferRequirements = jsonObj.getAsJsonArray("offerRequirements");
        if (jsonArrayofferRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerRequirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("offerRequirements").toString()));
          }

          // validate the optional field `offerRequirements` (array)
          for (int i = 0; i < jsonArrayofferRequirements.size(); i++) {
            OfferRequirement.validateJsonObject(jsonArrayofferRequirements.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `activePeriod`
      if (jsonObj.get("activePeriod") != null && !jsonObj.get("activePeriod").isJsonNull()) {
        Period.validateJsonObject(jsonObj.getAsJsonObject("activePeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Listing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Listing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Listing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Listing.class));

       return (TypeAdapter<T>) new TypeAdapter<Listing>() {
           @Override
           public void write(JsonWriter out, Listing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Listing read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Listing instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Listing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Listing
  * @throws IOException if the JSON string is invalid with respect to Listing
  */
  public static Listing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Listing.class);
  }

 /**
  * Convert an instance of Listing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

