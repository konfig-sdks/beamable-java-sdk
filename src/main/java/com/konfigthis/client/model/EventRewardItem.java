/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EventInventoryRewardCurrency;
import com.konfigthis.client.model.EventInventoryRewardItem;
import com.konfigthis.client.model.EventRewardObtain;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EventRewardItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventRewardItem {
  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<EventInventoryRewardCurrency> currencies = null;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<EventInventoryRewardItem> items = null;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_OBTAIN = "obtain";
  @SerializedName(SERIALIZED_NAME_OBTAIN)
  private List<EventRewardObtain> obtain = null;

  public EventRewardItem() {
  }

  public EventRewardItem currencies(List<EventInventoryRewardCurrency> currencies) {
    
    
    
    
    this.currencies = currencies;
    return this;
  }

  public EventRewardItem addCurrenciesItem(EventInventoryRewardCurrency currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

   /**
   * Get currencies
   * @return currencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventInventoryRewardCurrency> getCurrencies() {
    return currencies;
  }


  public void setCurrencies(List<EventInventoryRewardCurrency> currencies) {
    
    
    
    this.currencies = currencies;
  }


  public EventRewardItem items(List<EventInventoryRewardItem> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public EventRewardItem addItemsItem(EventInventoryRewardItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventInventoryRewardItem> getItems() {
    return items;
  }


  public void setItems(List<EventInventoryRewardItem> items) {
    
    
    
    this.items = items;
  }


  public EventRewardItem min(Double min) {
    
    
    
    
    this.min = min;
    return this;
  }

  public EventRewardItem min(Integer min) {
    
    
    
    
    this.min = min.doubleValue();
    return this;
  }

   /**
   * Get min
   * @return min
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getMin() {
    return min;
  }


  public void setMin(Double min) {
    
    
    
    this.min = min;
  }


  public EventRewardItem max(Double max) {
    
    
    
    
    this.max = max;
    return this;
  }

  public EventRewardItem max(Integer max) {
    
    
    
    
    this.max = max.doubleValue();
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMax() {
    return max;
  }


  public void setMax(Double max) {
    
    
    
    this.max = max;
  }


  public EventRewardItem obtain(List<EventRewardObtain> obtain) {
    
    
    
    
    this.obtain = obtain;
    return this;
  }

  public EventRewardItem addObtainItem(EventRewardObtain obtainItem) {
    if (this.obtain == null) {
      this.obtain = new ArrayList<>();
    }
    this.obtain.add(obtainItem);
    return this;
  }

   /**
   * Get obtain
   * @return obtain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventRewardObtain> getObtain() {
    return obtain;
  }


  public void setObtain(List<EventRewardObtain> obtain) {
    
    
    
    this.obtain = obtain;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventRewardItem instance itself
   */
  public EventRewardItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRewardItem eventRewardItem = (EventRewardItem) o;
    return Objects.equals(this.currencies, eventRewardItem.currencies) &&
        Objects.equals(this.items, eventRewardItem.items) &&
        Objects.equals(this.min, eventRewardItem.min) &&
        Objects.equals(this.max, eventRewardItem.max) &&
        Objects.equals(this.obtain, eventRewardItem.obtain)&&
        Objects.equals(this.additionalProperties, eventRewardItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencies, items, min, max, obtain, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRewardItem {\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    obtain: ").append(toIndentedString(obtain)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencies");
    openapiFields.add("items");
    openapiFields.add("min");
    openapiFields.add("max");
    openapiFields.add("obtain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("min");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventRewardItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventRewardItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventRewardItem is not found in the empty JSON string", EventRewardItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventRewardItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull()) {
        JsonArray jsonArraycurrencies = jsonObj.getAsJsonArray("currencies");
        if (jsonArraycurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
          }

          // validate the optional field `currencies` (array)
          for (int i = 0; i < jsonArraycurrencies.size(); i++) {
            EventInventoryRewardCurrency.validateJsonObject(jsonArraycurrencies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            EventInventoryRewardItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("obtain") != null && !jsonObj.get("obtain").isJsonNull()) {
        JsonArray jsonArrayobtain = jsonObj.getAsJsonArray("obtain");
        if (jsonArrayobtain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obtain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obtain` to be an array in the JSON string but got `%s`", jsonObj.get("obtain").toString()));
          }

          // validate the optional field `obtain` (array)
          for (int i = 0; i < jsonArrayobtain.size(); i++) {
            EventRewardObtain.validateJsonObject(jsonArrayobtain.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventRewardItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventRewardItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventRewardItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventRewardItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EventRewardItem>() {
           @Override
           public void write(JsonWriter out, EventRewardItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventRewardItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventRewardItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventRewardItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventRewardItem
  * @throws IOException if the JSON string is invalid with respect to EventRewardItem
  */
  public static EventRewardItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventRewardItem.class);
  }

 /**
  * Convert an instance of EventRewardItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

