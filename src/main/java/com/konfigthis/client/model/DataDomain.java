/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RedisShard;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DataDomain
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DataDomain {
  public static final String SERIALIZED_NAME_MESSAGE_BUS_ANALYTICS = "messageBusAnalytics";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BUS_ANALYTICS)
  private List<String> messageBusAnalytics = null;

  public static final String SERIALIZED_NAME_MEMCACHED_HOSTS = "memcachedHosts";
  @SerializedName(SERIALIZED_NAME_MEMCACHED_HOSTS)
  private List<String> memcachedHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONGO_SHARDED = "mongoSharded";
  @SerializedName(SERIALIZED_NAME_MONGO_SHARDED)
  private Boolean mongoSharded;

  public static final String SERIALIZED_NAME_MONGO_S_S_L = "mongoSSL";
  @SerializedName(SERIALIZED_NAME_MONGO_S_S_L)
  private Boolean mongoSSL;

  public static final String SERIALIZED_NAME_MONGO_HOSTS = "mongoHosts";
  @SerializedName(SERIALIZED_NAME_MONGO_HOSTS)
  private List<String> mongoHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONGO_S_S_L_ENABLED = "mongoSSLEnabled";
  @SerializedName(SERIALIZED_NAME_MONGO_S_S_L_ENABLED)
  private Boolean mongoSSLEnabled;

  public static final String SERIALIZED_NAME_MESSAGE_BUS_COMMON = "messageBusCommon";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BUS_COMMON)
  private List<String> messageBusCommon = null;

  public static final String SERIALIZED_NAME_REDIS_SHARDS = "redisShards";
  @SerializedName(SERIALIZED_NAME_REDIS_SHARDS)
  private List<RedisShard> redisShards = null;

  public DataDomain() {
  }

  public DataDomain messageBusAnalytics(List<String> messageBusAnalytics) {
    
    
    
    
    this.messageBusAnalytics = messageBusAnalytics;
    return this;
  }

  public DataDomain addMessageBusAnalyticsItem(String messageBusAnalyticsItem) {
    if (this.messageBusAnalytics == null) {
      this.messageBusAnalytics = new ArrayList<>();
    }
    this.messageBusAnalytics.add(messageBusAnalyticsItem);
    return this;
  }

   /**
   * Get messageBusAnalytics
   * @return messageBusAnalytics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMessageBusAnalytics() {
    return messageBusAnalytics;
  }


  public void setMessageBusAnalytics(List<String> messageBusAnalytics) {
    
    
    
    this.messageBusAnalytics = messageBusAnalytics;
  }


  public DataDomain memcachedHosts(List<String> memcachedHosts) {
    
    
    
    
    this.memcachedHosts = memcachedHosts;
    return this;
  }

  public DataDomain addMemcachedHostsItem(String memcachedHostsItem) {
    this.memcachedHosts.add(memcachedHostsItem);
    return this;
  }

   /**
   * Get memcachedHosts
   * @return memcachedHosts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getMemcachedHosts() {
    return memcachedHosts;
  }


  public void setMemcachedHosts(List<String> memcachedHosts) {
    
    
    
    this.memcachedHosts = memcachedHosts;
  }


  public DataDomain mongoSharded(Boolean mongoSharded) {
    
    
    
    
    this.mongoSharded = mongoSharded;
    return this;
  }

   /**
   * Get mongoSharded
   * @return mongoSharded
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getMongoSharded() {
    return mongoSharded;
  }


  public void setMongoSharded(Boolean mongoSharded) {
    
    
    
    this.mongoSharded = mongoSharded;
  }


  public DataDomain mongoSSL(Boolean mongoSSL) {
    
    
    
    
    this.mongoSSL = mongoSSL;
    return this;
  }

   /**
   * Get mongoSSL
   * @return mongoSSL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMongoSSL() {
    return mongoSSL;
  }


  public void setMongoSSL(Boolean mongoSSL) {
    
    
    
    this.mongoSSL = mongoSSL;
  }


  public DataDomain mongoHosts(List<String> mongoHosts) {
    
    
    
    
    this.mongoHosts = mongoHosts;
    return this;
  }

  public DataDomain addMongoHostsItem(String mongoHostsItem) {
    this.mongoHosts.add(mongoHostsItem);
    return this;
  }

   /**
   * Get mongoHosts
   * @return mongoHosts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getMongoHosts() {
    return mongoHosts;
  }


  public void setMongoHosts(List<String> mongoHosts) {
    
    
    
    this.mongoHosts = mongoHosts;
  }


  public DataDomain mongoSSLEnabled(Boolean mongoSSLEnabled) {
    
    
    
    
    this.mongoSSLEnabled = mongoSSLEnabled;
    return this;
  }

   /**
   * Get mongoSSLEnabled
   * @return mongoSSLEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getMongoSSLEnabled() {
    return mongoSSLEnabled;
  }


  public void setMongoSSLEnabled(Boolean mongoSSLEnabled) {
    
    
    
    this.mongoSSLEnabled = mongoSSLEnabled;
  }


  public DataDomain messageBusCommon(List<String> messageBusCommon) {
    
    
    
    
    this.messageBusCommon = messageBusCommon;
    return this;
  }

  public DataDomain addMessageBusCommonItem(String messageBusCommonItem) {
    if (this.messageBusCommon == null) {
      this.messageBusCommon = new ArrayList<>();
    }
    this.messageBusCommon.add(messageBusCommonItem);
    return this;
  }

   /**
   * Get messageBusCommon
   * @return messageBusCommon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMessageBusCommon() {
    return messageBusCommon;
  }


  public void setMessageBusCommon(List<String> messageBusCommon) {
    
    
    
    this.messageBusCommon = messageBusCommon;
  }


  public DataDomain redisShards(List<RedisShard> redisShards) {
    
    
    
    
    this.redisShards = redisShards;
    return this;
  }

  public DataDomain addRedisShardsItem(RedisShard redisShardsItem) {
    if (this.redisShards == null) {
      this.redisShards = new ArrayList<>();
    }
    this.redisShards.add(redisShardsItem);
    return this;
  }

   /**
   * Get redisShards
   * @return redisShards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RedisShard> getRedisShards() {
    return redisShards;
  }


  public void setRedisShards(List<RedisShard> redisShards) {
    
    
    
    this.redisShards = redisShards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataDomain instance itself
   */
  public DataDomain putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataDomain dataDomain = (DataDomain) o;
    return Objects.equals(this.messageBusAnalytics, dataDomain.messageBusAnalytics) &&
        Objects.equals(this.memcachedHosts, dataDomain.memcachedHosts) &&
        Objects.equals(this.mongoSharded, dataDomain.mongoSharded) &&
        Objects.equals(this.mongoSSL, dataDomain.mongoSSL) &&
        Objects.equals(this.mongoHosts, dataDomain.mongoHosts) &&
        Objects.equals(this.mongoSSLEnabled, dataDomain.mongoSSLEnabled) &&
        Objects.equals(this.messageBusCommon, dataDomain.messageBusCommon) &&
        Objects.equals(this.redisShards, dataDomain.redisShards)&&
        Objects.equals(this.additionalProperties, dataDomain.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageBusAnalytics, memcachedHosts, mongoSharded, mongoSSL, mongoHosts, mongoSSLEnabled, messageBusCommon, redisShards, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataDomain {\n");
    sb.append("    messageBusAnalytics: ").append(toIndentedString(messageBusAnalytics)).append("\n");
    sb.append("    memcachedHosts: ").append(toIndentedString(memcachedHosts)).append("\n");
    sb.append("    mongoSharded: ").append(toIndentedString(mongoSharded)).append("\n");
    sb.append("    mongoSSL: ").append(toIndentedString(mongoSSL)).append("\n");
    sb.append("    mongoHosts: ").append(toIndentedString(mongoHosts)).append("\n");
    sb.append("    mongoSSLEnabled: ").append(toIndentedString(mongoSSLEnabled)).append("\n");
    sb.append("    messageBusCommon: ").append(toIndentedString(messageBusCommon)).append("\n");
    sb.append("    redisShards: ").append(toIndentedString(redisShards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageBusAnalytics");
    openapiFields.add("memcachedHosts");
    openapiFields.add("mongoSharded");
    openapiFields.add("mongoSSL");
    openapiFields.add("mongoHosts");
    openapiFields.add("mongoSSLEnabled");
    openapiFields.add("messageBusCommon");
    openapiFields.add("redisShards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("memcachedHosts");
    openapiRequiredFields.add("mongoSharded");
    openapiRequiredFields.add("mongoHosts");
    openapiRequiredFields.add("mongoSSLEnabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataDomain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DataDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataDomain is not found in the empty JSON string", DataDomain.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataDomain.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageBusAnalytics") != null && !jsonObj.get("messageBusAnalytics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBusAnalytics` to be an array in the JSON string but got `%s`", jsonObj.get("messageBusAnalytics").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("memcachedHosts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("memcachedHosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `memcachedHosts` to be an array in the JSON string but got `%s`", jsonObj.get("memcachedHosts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("mongoHosts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mongoHosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongoHosts` to be an array in the JSON string but got `%s`", jsonObj.get("mongoHosts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageBusCommon") != null && !jsonObj.get("messageBusCommon").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBusCommon` to be an array in the JSON string but got `%s`", jsonObj.get("messageBusCommon").toString()));
      }
      if (jsonObj.get("redisShards") != null && !jsonObj.get("redisShards").isJsonNull()) {
        JsonArray jsonArrayredisShards = jsonObj.getAsJsonArray("redisShards");
        if (jsonArrayredisShards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("redisShards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `redisShards` to be an array in the JSON string but got `%s`", jsonObj.get("redisShards").toString()));
          }

          // validate the optional field `redisShards` (array)
          for (int i = 0; i < jsonArrayredisShards.size(); i++) {
            RedisShard.validateJsonObject(jsonArrayredisShards.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<DataDomain>() {
           @Override
           public void write(JsonWriter out, DataDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataDomain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DataDomain instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataDomain
  * @throws IOException if the JSON string is invalid with respect to DataDomain
  */
  public static DataDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataDomain.class);
  }

 /**
  * Convert an instance of DataDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

