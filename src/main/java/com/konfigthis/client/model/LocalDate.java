/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Era;
import com.konfigthis.client.model.IsoChronology;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LocalDate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LocalDate {
  public static final String SERIALIZED_NAME_DAY_OF_YEAR = "dayOfYear";
  @SerializedName(SERIALIZED_NAME_DAY_OF_YEAR)
  private Integer dayOfYear;

  public static final String SERIALIZED_NAME_LEAP_YEAR = "leapYear";
  @SerializedName(SERIALIZED_NAME_LEAP_YEAR)
  private Boolean leapYear;

  public static final String SERIALIZED_NAME_CHRONOLOGY = "chronology";
  @SerializedName(SERIALIZED_NAME_CHRONOLOGY)
  private IsoChronology chronology;

  /**
   * Gets or Sets dayOfWeek
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
 public enum DayOfWeekEnum {
    SATURDAY("SATURDAY"),
    
    MONDAY("MONDAY"),
    
    THURSDAY("THURSDAY"),
    
    TUESDAY("TUESDAY"),
    
    FRIDAY("FRIDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_MONTH_VALUE = "monthValue";
  @SerializedName(SERIALIZED_NAME_MONTH_VALUE)
  private Integer monthValue;

  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "dayOfMonth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private Integer dayOfMonth;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public static final String SERIALIZED_NAME_ERA = "era";
  @SerializedName(SERIALIZED_NAME_ERA)
  private Era era;

  /**
   * Gets or Sets month
   */
  @JsonAdapter(MonthEnum.Adapter.class)
 public enum MonthEnum {
    DECEMBER("DECEMBER"),
    
    APRIL("APRIL"),
    
    JULY("JULY"),
    
    SEPTEMBER("SEPTEMBER"),
    
    JUNE("JUNE"),
    
    FEBRUARY("FEBRUARY"),
    
    OCTOBER("OCTOBER"),
    
    AUGUST("AUGUST"),
    
    NOVEMBER("NOVEMBER"),
    
    MARCH("MARCH"),
    
    MAY("MAY"),
    
    JANUARY("JANUARY");

    private String value;

    MonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthEnum fromValue(String value) {
      for (MonthEnum b : MonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private MonthEnum month;

  public LocalDate() {
  }

  public LocalDate dayOfYear(Integer dayOfYear) {
    
    
    
    
    this.dayOfYear = dayOfYear;
    return this;
  }

   /**
   * Get dayOfYear
   * @return dayOfYear
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDayOfYear() {
    return dayOfYear;
  }


  public void setDayOfYear(Integer dayOfYear) {
    
    
    
    this.dayOfYear = dayOfYear;
  }


  public LocalDate leapYear(Boolean leapYear) {
    
    
    
    
    this.leapYear = leapYear;
    return this;
  }

   /**
   * Get leapYear
   * @return leapYear
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getLeapYear() {
    return leapYear;
  }


  public void setLeapYear(Boolean leapYear) {
    
    
    
    this.leapYear = leapYear;
  }


  public LocalDate chronology(IsoChronology chronology) {
    
    
    
    
    this.chronology = chronology;
    return this;
  }

   /**
   * Get chronology
   * @return chronology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IsoChronology getChronology() {
    return chronology;
  }


  public void setChronology(IsoChronology chronology) {
    
    
    
    this.chronology = chronology;
  }


  public LocalDate dayOfWeek(DayOfWeekEnum dayOfWeek) {
    
    
    
    
    this.dayOfWeek = dayOfWeek;
    return this;
  }

   /**
   * Get dayOfWeek
   * @return dayOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }


  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    
    
    
    this.dayOfWeek = dayOfWeek;
  }


  public LocalDate monthValue(Integer monthValue) {
    
    
    
    
    this.monthValue = monthValue;
    return this;
  }

   /**
   * Get monthValue
   * @return monthValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMonthValue() {
    return monthValue;
  }


  public void setMonthValue(Integer monthValue) {
    
    
    
    this.monthValue = monthValue;
  }


  public LocalDate dayOfMonth(Integer dayOfMonth) {
    
    
    
    
    this.dayOfMonth = dayOfMonth;
    return this;
  }

   /**
   * Get dayOfMonth
   * @return dayOfMonth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDayOfMonth() {
    return dayOfMonth;
  }


  public void setDayOfMonth(Integer dayOfMonth) {
    
    
    
    this.dayOfMonth = dayOfMonth;
  }


  public LocalDate year(Integer year) {
    
    
    
    
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getYear() {
    return year;
  }


  public void setYear(Integer year) {
    
    
    
    this.year = year;
  }


  public LocalDate era(Era era) {
    
    
    
    
    this.era = era;
    return this;
  }

   /**
   * Get era
   * @return era
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Era getEra() {
    return era;
  }


  public void setEra(Era era) {
    
    
    
    this.era = era;
  }


  public LocalDate month(MonthEnum month) {
    
    
    
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MonthEnum getMonth() {
    return month;
  }


  public void setMonth(MonthEnum month) {
    
    
    
    this.month = month;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LocalDate instance itself
   */
  public LocalDate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalDate localDate = (LocalDate) o;
    return Objects.equals(this.dayOfYear, localDate.dayOfYear) &&
        Objects.equals(this.leapYear, localDate.leapYear) &&
        Objects.equals(this.chronology, localDate.chronology) &&
        Objects.equals(this.dayOfWeek, localDate.dayOfWeek) &&
        Objects.equals(this.monthValue, localDate.monthValue) &&
        Objects.equals(this.dayOfMonth, localDate.dayOfMonth) &&
        Objects.equals(this.year, localDate.year) &&
        Objects.equals(this.era, localDate.era) &&
        Objects.equals(this.month, localDate.month)&&
        Objects.equals(this.additionalProperties, localDate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfYear, leapYear, chronology, dayOfWeek, monthValue, dayOfMonth, year, era, month, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalDate {\n");
    sb.append("    dayOfYear: ").append(toIndentedString(dayOfYear)).append("\n");
    sb.append("    leapYear: ").append(toIndentedString(leapYear)).append("\n");
    sb.append("    chronology: ").append(toIndentedString(chronology)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    monthValue: ").append(toIndentedString(monthValue)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    era: ").append(toIndentedString(era)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfYear");
    openapiFields.add("leapYear");
    openapiFields.add("chronology");
    openapiFields.add("dayOfWeek");
    openapiFields.add("monthValue");
    openapiFields.add("dayOfMonth");
    openapiFields.add("year");
    openapiFields.add("era");
    openapiFields.add("month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dayOfYear");
    openapiRequiredFields.add("leapYear");
    openapiRequiredFields.add("monthValue");
    openapiRequiredFields.add("dayOfMonth");
    openapiRequiredFields.add("year");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocalDate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocalDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalDate is not found in the empty JSON string", LocalDate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LocalDate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `chronology`
      if (jsonObj.get("chronology") != null && !jsonObj.get("chronology").isJsonNull()) {
        IsoChronology.validateJsonObject(jsonObj.getAsJsonObject("chronology"));
      }
      if ((jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) && !jsonObj.get("dayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      // validate the optional field `era`
      if (jsonObj.get("era") != null && !jsonObj.get("era").isJsonNull()) {
        Era.validateJsonObject(jsonObj.getAsJsonObject("era"));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalDate.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalDate>() {
           @Override
           public void write(JsonWriter out, LocalDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalDate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LocalDate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocalDate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocalDate
  * @throws IOException if the JSON string is invalid with respect to LocalDate
  */
  public static LocalDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalDate.class);
  }

 /**
  * Convert an instance of LocalDate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

