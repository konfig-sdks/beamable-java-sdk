/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DonationRequest;
import com.konfigthis.client.model.GroupRole;
import com.konfigthis.client.model.InFlightMessage;
import com.konfigthis.client.model.Member;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Group
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Group {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_IN_FLIGHT = "inFlight";
  @SerializedName(SERIALIZED_NAME_IN_FLIGHT)
  private List<InFlightMessage> inFlight = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPE = "enrollmentType";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPE)
  private String enrollmentType;

  public static final String SERIALIZED_NAME_DONATIONS = "donations";
  @SerializedName(SERIALIZED_NAME_DONATIONS)
  private List<DonationRequest> donations = null;

  public static final String SERIALIZED_NAME_FREE_SLOTS = "freeSlots";
  @SerializedName(SERIALIZED_NAME_FREE_SLOTS)
  private Integer freeSlots;

  public static final String SERIALIZED_NAME_MAYBE_DONATIONS = "maybeDonations";
  @SerializedName(SERIALIZED_NAME_MAYBE_DONATIONS)
  private Map<String, Object> maybeDonations = null;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_CAN_UPDATE_M_O_T_D = "canUpdateMOTD";
  @SerializedName(SERIALIZED_NAME_CAN_UPDATE_M_O_T_D)
  private Boolean canUpdateMOTD;

  public static final String SERIALIZED_NAME_SHARD = "shard";
  @SerializedName(SERIALIZED_NAME_SHARD)
  private String shard;

  public static final String SERIALIZED_NAME_CAN_UPDATE_SLOGAN = "canUpdateSlogan";
  @SerializedName(SERIALIZED_NAME_CAN_UPDATE_SLOGAN)
  private Boolean canUpdateSlogan;

  public static final String SERIALIZED_NAME_LEADER = "leader";
  @SerializedName(SERIALIZED_NAME_LEADER)
  private Integer leader;

  public static final String SERIALIZED_NAME_SLOGAN = "slogan";
  @SerializedName(SERIALIZED_NAME_SLOGAN)
  private String slogan;

  public static final String SERIALIZED_NAME_REQUIREMENT = "requirement";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT)
  private Integer requirement;

  public static final String SERIALIZED_NAME_MOTD = "motd";
  @SerializedName(SERIALIZED_NAME_MOTD)
  private String motd;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private String clientData;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<GroupRole> roles = null;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private Map<String, Object> scores = null;

  public static final String SERIALIZED_NAME_CAN_UPDATE_ENROLLMENT = "canUpdateEnrollment";
  @SerializedName(SERIALIZED_NAME_CAN_UPDATE_ENROLLMENT)
  private Boolean canUpdateEnrollment;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<Member> members = null;

  public static final String SERIALIZED_NAME_CAN_DISBAND = "canDisband";
  @SerializedName(SERIALIZED_NAME_CAN_DISBAND)
  private Boolean canDisband;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NOT_AVAILABLE("not-available");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_MAX_SIZE = "maxSize";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private Integer maxSize;

  public static final String SERIALIZED_NAME_SUB_GROUPS = "subGroups";
  @SerializedName(SERIALIZED_NAME_SUB_GROUPS)
  private List<Group> subGroups = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public Group() {
  }

  public Group version(Integer version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    
    
    
    this.version = version;
  }


  public Group inFlight(List<InFlightMessage> inFlight) {
    
    
    
    
    this.inFlight = inFlight;
    return this;
  }

  public Group addInFlightItem(InFlightMessage inFlightItem) {
    if (this.inFlight == null) {
      this.inFlight = new ArrayList<>();
    }
    this.inFlight.add(inFlightItem);
    return this;
  }

   /**
   * Get inFlight
   * @return inFlight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InFlightMessage> getInFlight() {
    return inFlight;
  }


  public void setInFlight(List<InFlightMessage> inFlight) {
    
    
    
    this.inFlight = inFlight;
  }


  public Group name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Group enrollmentType(String enrollmentType) {
    
    
    
    
    this.enrollmentType = enrollmentType;
    return this;
  }

   /**
   * Get enrollmentType
   * @return enrollmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEnrollmentType() {
    return enrollmentType;
  }


  public void setEnrollmentType(String enrollmentType) {
    
    
    
    this.enrollmentType = enrollmentType;
  }


  public Group donations(List<DonationRequest> donations) {
    
    
    
    
    this.donations = donations;
    return this;
  }

  public Group addDonationsItem(DonationRequest donationsItem) {
    if (this.donations == null) {
      this.donations = new ArrayList<>();
    }
    this.donations.add(donationsItem);
    return this;
  }

   /**
   * Get donations
   * @return donations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DonationRequest> getDonations() {
    return donations;
  }


  public void setDonations(List<DonationRequest> donations) {
    
    
    
    this.donations = donations;
  }


  public Group freeSlots(Integer freeSlots) {
    
    
    
    
    this.freeSlots = freeSlots;
    return this;
  }

   /**
   * Get freeSlots
   * @return freeSlots
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFreeSlots() {
    return freeSlots;
  }


  public void setFreeSlots(Integer freeSlots) {
    
    
    
    this.freeSlots = freeSlots;
  }


  public Group maybeDonations(Map<String, Object> maybeDonations) {
    
    
    
    
    this.maybeDonations = maybeDonations;
    return this;
  }

  public Group putMaybeDonationsItem(String key, Object maybeDonationsItem) {
    if (this.maybeDonations == null) {
      this.maybeDonations = new HashMap<>();
    }
    this.maybeDonations.put(key, maybeDonationsItem);
    return this;
  }

   /**
   * Get maybeDonations
   * @return maybeDonations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getMaybeDonations() {
    return maybeDonations;
  }


  public void setMaybeDonations(Map<String, Object> maybeDonations) {
    
    
    
    this.maybeDonations = maybeDonations;
  }


  public Group tag(String tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    
    
    
    this.tag = tag;
  }


  public Group canUpdateMOTD(Boolean canUpdateMOTD) {
    
    
    
    
    this.canUpdateMOTD = canUpdateMOTD;
    return this;
  }

   /**
   * Get canUpdateMOTD
   * @return canUpdateMOTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanUpdateMOTD() {
    return canUpdateMOTD;
  }


  public void setCanUpdateMOTD(Boolean canUpdateMOTD) {
    
    
    
    this.canUpdateMOTD = canUpdateMOTD;
  }


  public Group shard(String shard) {
    
    
    
    
    this.shard = shard;
    return this;
  }

   /**
   * Get shard
   * @return shard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShard() {
    return shard;
  }


  public void setShard(String shard) {
    
    
    
    this.shard = shard;
  }


  public Group canUpdateSlogan(Boolean canUpdateSlogan) {
    
    
    
    
    this.canUpdateSlogan = canUpdateSlogan;
    return this;
  }

   /**
   * Get canUpdateSlogan
   * @return canUpdateSlogan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanUpdateSlogan() {
    return canUpdateSlogan;
  }


  public void setCanUpdateSlogan(Boolean canUpdateSlogan) {
    
    
    
    this.canUpdateSlogan = canUpdateSlogan;
  }


  public Group leader(Integer leader) {
    
    
    
    
    this.leader = leader;
    return this;
  }

   /**
   * Get leader
   * @return leader
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLeader() {
    return leader;
  }


  public void setLeader(Integer leader) {
    
    
    
    this.leader = leader;
  }


  public Group slogan(String slogan) {
    
    
    
    
    this.slogan = slogan;
    return this;
  }

   /**
   * Get slogan
   * @return slogan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSlogan() {
    return slogan;
  }


  public void setSlogan(String slogan) {
    
    
    
    this.slogan = slogan;
  }


  public Group requirement(Integer requirement) {
    
    
    
    
    this.requirement = requirement;
    return this;
  }

   /**
   * Get requirement
   * @return requirement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRequirement() {
    return requirement;
  }


  public void setRequirement(Integer requirement) {
    
    
    
    this.requirement = requirement;
  }


  public Group motd(String motd) {
    
    
    
    
    this.motd = motd;
    return this;
  }

   /**
   * Get motd
   * @return motd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMotd() {
    return motd;
  }


  public void setMotd(String motd) {
    
    
    
    this.motd = motd;
  }


  public Group id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public Group clientData(String clientData) {
    
    
    
    
    this.clientData = clientData;
    return this;
  }

   /**
   * Get clientData
   * @return clientData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientData() {
    return clientData;
  }


  public void setClientData(String clientData) {
    
    
    
    this.clientData = clientData;
  }


  public Group roles(List<GroupRole> roles) {
    
    
    
    
    this.roles = roles;
    return this;
  }

  public Group addRolesItem(GroupRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<GroupRole> getRoles() {
    return roles;
  }


  public void setRoles(List<GroupRole> roles) {
    
    
    
    this.roles = roles;
  }


  public Group scores(Map<String, Object> scores) {
    
    
    
    
    this.scores = scores;
    return this;
  }

  public Group putScoresItem(String key, Object scoresItem) {
    if (this.scores == null) {
      this.scores = new HashMap<>();
    }
    this.scores.put(key, scoresItem);
    return this;
  }

   /**
   * Get scores
   * @return scores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getScores() {
    return scores;
  }


  public void setScores(Map<String, Object> scores) {
    
    
    
    this.scores = scores;
  }


  public Group canUpdateEnrollment(Boolean canUpdateEnrollment) {
    
    
    
    
    this.canUpdateEnrollment = canUpdateEnrollment;
    return this;
  }

   /**
   * Get canUpdateEnrollment
   * @return canUpdateEnrollment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanUpdateEnrollment() {
    return canUpdateEnrollment;
  }


  public void setCanUpdateEnrollment(Boolean canUpdateEnrollment) {
    
    
    
    this.canUpdateEnrollment = canUpdateEnrollment;
  }


  public Group members(List<Member> members) {
    
    
    
    
    this.members = members;
    return this;
  }

  public Group addMembersItem(Member membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Member> getMembers() {
    return members;
  }


  public void setMembers(List<Member> members) {
    
    
    
    this.members = members;
  }


  public Group canDisband(Boolean canDisband) {
    
    
    
    
    this.canDisband = canDisband;
    return this;
  }

   /**
   * Get canDisband
   * @return canDisband
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanDisband() {
    return canDisband;
  }


  public void setCanDisband(Boolean canDisband) {
    
    
    
    this.canDisband = canDisband;
  }


  public Group type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Group maxSize(Integer maxSize) {
    
    
    
    
    this.maxSize = maxSize;
    return this;
  }

   /**
   * Get maxSize
   * @return maxSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaxSize() {
    return maxSize;
  }


  public void setMaxSize(Integer maxSize) {
    
    
    
    this.maxSize = maxSize;
  }


  public Group subGroups(List<Group> subGroups) {
    
    
    
    
    this.subGroups = subGroups;
    return this;
  }

  public Group addSubGroupsItem(Group subGroupsItem) {
    if (this.subGroups == null) {
      this.subGroups = new ArrayList<>();
    }
    this.subGroups.add(subGroupsItem);
    return this;
  }

   /**
   * Get subGroups
   * @return subGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Group> getSubGroups() {
    return subGroups;
  }


  public void setSubGroups(List<Group> subGroups) {
    
    
    
    this.subGroups = subGroups;
  }


  public Group created(Integer created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreated() {
    return created;
  }


  public void setCreated(Integer created) {
    
    
    
    this.created = created;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Group instance itself
   */
  public Group putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.version, group.version) &&
        Objects.equals(this.inFlight, group.inFlight) &&
        Objects.equals(this.name, group.name) &&
        Objects.equals(this.enrollmentType, group.enrollmentType) &&
        Objects.equals(this.donations, group.donations) &&
        Objects.equals(this.freeSlots, group.freeSlots) &&
        Objects.equals(this.maybeDonations, group.maybeDonations) &&
        Objects.equals(this.tag, group.tag) &&
        Objects.equals(this.canUpdateMOTD, group.canUpdateMOTD) &&
        Objects.equals(this.shard, group.shard) &&
        Objects.equals(this.canUpdateSlogan, group.canUpdateSlogan) &&
        Objects.equals(this.leader, group.leader) &&
        Objects.equals(this.slogan, group.slogan) &&
        Objects.equals(this.requirement, group.requirement) &&
        Objects.equals(this.motd, group.motd) &&
        Objects.equals(this.id, group.id) &&
        Objects.equals(this.clientData, group.clientData) &&
        Objects.equals(this.roles, group.roles) &&
        Objects.equals(this.scores, group.scores) &&
        Objects.equals(this.canUpdateEnrollment, group.canUpdateEnrollment) &&
        Objects.equals(this.members, group.members) &&
        Objects.equals(this.canDisband, group.canDisband) &&
        Objects.equals(this.type, group.type) &&
        Objects.equals(this.maxSize, group.maxSize) &&
        Objects.equals(this.subGroups, group.subGroups) &&
        Objects.equals(this.created, group.created)&&
        Objects.equals(this.additionalProperties, group.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, inFlight, name, enrollmentType, donations, freeSlots, maybeDonations, tag, canUpdateMOTD, shard, canUpdateSlogan, leader, slogan, requirement, motd, id, clientData, roles, scores, canUpdateEnrollment, members, canDisband, type, maxSize, subGroups, created, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    inFlight: ").append(toIndentedString(inFlight)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enrollmentType: ").append(toIndentedString(enrollmentType)).append("\n");
    sb.append("    donations: ").append(toIndentedString(donations)).append("\n");
    sb.append("    freeSlots: ").append(toIndentedString(freeSlots)).append("\n");
    sb.append("    maybeDonations: ").append(toIndentedString(maybeDonations)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    canUpdateMOTD: ").append(toIndentedString(canUpdateMOTD)).append("\n");
    sb.append("    shard: ").append(toIndentedString(shard)).append("\n");
    sb.append("    canUpdateSlogan: ").append(toIndentedString(canUpdateSlogan)).append("\n");
    sb.append("    leader: ").append(toIndentedString(leader)).append("\n");
    sb.append("    slogan: ").append(toIndentedString(slogan)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    motd: ").append(toIndentedString(motd)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    canUpdateEnrollment: ").append(toIndentedString(canUpdateEnrollment)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    canDisband: ").append(toIndentedString(canDisband)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    subGroups: ").append(toIndentedString(subGroups)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("inFlight");
    openapiFields.add("name");
    openapiFields.add("enrollmentType");
    openapiFields.add("donations");
    openapiFields.add("freeSlots");
    openapiFields.add("maybeDonations");
    openapiFields.add("tag");
    openapiFields.add("canUpdateMOTD");
    openapiFields.add("shard");
    openapiFields.add("canUpdateSlogan");
    openapiFields.add("leader");
    openapiFields.add("slogan");
    openapiFields.add("requirement");
    openapiFields.add("motd");
    openapiFields.add("id");
    openapiFields.add("clientData");
    openapiFields.add("roles");
    openapiFields.add("scores");
    openapiFields.add("canUpdateEnrollment");
    openapiFields.add("members");
    openapiFields.add("canDisband");
    openapiFields.add("type");
    openapiFields.add("maxSize");
    openapiFields.add("subGroups");
    openapiFields.add("created");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("freeSlots");
    openapiRequiredFields.add("leader");
    openapiRequiredFields.add("requirement");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("maxSize");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Group
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Group.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("inFlight") != null && !jsonObj.get("inFlight").isJsonNull()) {
        JsonArray jsonArrayinFlight = jsonObj.getAsJsonArray("inFlight");
        if (jsonArrayinFlight != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inFlight").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inFlight` to be an array in the JSON string but got `%s`", jsonObj.get("inFlight").toString()));
          }

          // validate the optional field `inFlight` (array)
          for (int i = 0; i < jsonArrayinFlight.size(); i++) {
            InFlightMessage.validateJsonObject(jsonArrayinFlight.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("enrollmentType") != null && !jsonObj.get("enrollmentType").isJsonNull()) && !jsonObj.get("enrollmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentType").toString()));
      }
      if (jsonObj.get("donations") != null && !jsonObj.get("donations").isJsonNull()) {
        JsonArray jsonArraydonations = jsonObj.getAsJsonArray("donations");
        if (jsonArraydonations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("donations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `donations` to be an array in the JSON string but got `%s`", jsonObj.get("donations").toString()));
          }

          // validate the optional field `donations` (array)
          for (int i = 0; i < jsonArraydonations.size(); i++) {
            DonationRequest.validateJsonObject(jsonArraydonations.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("shard") != null && !jsonObj.get("shard").isJsonNull()) && !jsonObj.get("shard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shard").toString()));
      }
      if ((jsonObj.get("slogan") != null && !jsonObj.get("slogan").isJsonNull()) && !jsonObj.get("slogan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slogan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slogan").toString()));
      }
      if ((jsonObj.get("motd") != null && !jsonObj.get("motd").isJsonNull()) && !jsonObj.get("motd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motd").toString()));
      }
      if ((jsonObj.get("clientData") != null && !jsonObj.get("clientData").isJsonNull()) && !jsonObj.get("clientData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientData").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            GroupRole.validateJsonObject(jsonArrayroles.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            Member.validateJsonObject(jsonArraymembers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("subGroups") != null && !jsonObj.get("subGroups").isJsonNull()) {
        JsonArray jsonArraysubGroups = jsonObj.getAsJsonArray("subGroups");
        if (jsonArraysubGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subGroups` to be an array in the JSON string but got `%s`", jsonObj.get("subGroups").toString()));
          }

          // validate the optional field `subGroups` (array)
          for (int i = 0; i < jsonArraysubGroups.size(); i++) {
            Group.validateJsonObject(jsonArraysubGroups.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Group instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Group given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Group
  * @throws IOException if the JSON string is invalid with respect to Group
  */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

 /**
  * Convert an instance of Group to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

