/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Listing;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Store
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Store {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ACTIVE_LISTING_LIMIT = "activeListingLimit";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LISTING_LIMIT)
  private Integer activeListingLimit;

  public static final String SERIALIZED_NAME_CHOOSE = "choose";
  @SerializedName(SERIALIZED_NAME_CHOOSE)
  private Integer choose;

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private List<Listing> listings = null;

  public static final String SERIALIZED_NAME_SHOW_INACTIVE_LISTINGS = "showInactiveListings";
  @SerializedName(SERIALIZED_NAME_SHOW_INACTIVE_LISTINGS)
  private Boolean showInactiveListings;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_REFRESH_TIME = "refreshTime";
  @SerializedName(SERIALIZED_NAME_REFRESH_TIME)
  private Integer refreshTime;

  public static final String SERIALIZED_NAME_STORE_WITH_ANNOTATIONS$DEFAULT$3 = "storeWithAnnotations$default$3";
  @SerializedName(SERIALIZED_NAME_STORE_WITH_ANNOTATIONS$DEFAULT$3)
  private Boolean storeWithAnnotations$default$3;

  public static final String SERIALIZED_NAME_STORE_WITH_ANNOTATIONS$DEFAULT$2 = "storeWithAnnotations$default$2";
  @SerializedName(SERIALIZED_NAME_STORE_WITH_ANNOTATIONS$DEFAULT$2)
  private OffsetDateTime storeWithAnnotations$default$2;

  public Store() {
  }

  public Store title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Store activeListingLimit(Integer activeListingLimit) {
    
    
    
    
    this.activeListingLimit = activeListingLimit;
    return this;
  }

   /**
   * Get activeListingLimit
   * @return activeListingLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getActiveListingLimit() {
    return activeListingLimit;
  }


  public void setActiveListingLimit(Integer activeListingLimit) {
    
    
    
    this.activeListingLimit = activeListingLimit;
  }


  public Store choose(Integer choose) {
    
    
    
    
    this.choose = choose;
    return this;
  }

   /**
   * Get choose
   * @return choose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getChoose() {
    return choose;
  }


  public void setChoose(Integer choose) {
    
    
    
    this.choose = choose;
  }


  public Store listings(List<Listing> listings) {
    
    
    
    
    this.listings = listings;
    return this;
  }

  public Store addListingsItem(Listing listingsItem) {
    if (this.listings == null) {
      this.listings = new ArrayList<>();
    }
    this.listings.add(listingsItem);
    return this;
  }

   /**
   * Get listings
   * @return listings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Listing> getListings() {
    return listings;
  }


  public void setListings(List<Listing> listings) {
    
    
    
    this.listings = listings;
  }


  public Store showInactiveListings(Boolean showInactiveListings) {
    
    
    
    
    this.showInactiveListings = showInactiveListings;
    return this;
  }

   /**
   * Get showInactiveListings
   * @return showInactiveListings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getShowInactiveListings() {
    return showInactiveListings;
  }


  public void setShowInactiveListings(Boolean showInactiveListings) {
    
    
    
    this.showInactiveListings = showInactiveListings;
  }


  public Store symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public Store refreshTime(Integer refreshTime) {
    
    
    
    
    this.refreshTime = refreshTime;
    return this;
  }

   /**
   * Get refreshTime
   * @return refreshTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRefreshTime() {
    return refreshTime;
  }


  public void setRefreshTime(Integer refreshTime) {
    
    
    
    this.refreshTime = refreshTime;
  }


  public Store storeWithAnnotations$default$3(Boolean storeWithAnnotations$default$3) {
    
    
    
    
    this.storeWithAnnotations$default$3 = storeWithAnnotations$default$3;
    return this;
  }

   /**
   * Get storeWithAnnotations$default$3
   * @return storeWithAnnotations$default$3
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getStoreWithAnnotations$default$3() {
    return storeWithAnnotations$default$3;
  }


  public void setStoreWithAnnotations$default$3(Boolean storeWithAnnotations$default$3) {
    
    
    
    this.storeWithAnnotations$default$3 = storeWithAnnotations$default$3;
  }


  public Store storeWithAnnotations$default$2(OffsetDateTime storeWithAnnotations$default$2) {
    
    
    
    
    this.storeWithAnnotations$default$2 = storeWithAnnotations$default$2;
    return this;
  }

   /**
   * Get storeWithAnnotations$default$2
   * @return storeWithAnnotations$default$2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStoreWithAnnotations$default$2() {
    return storeWithAnnotations$default$2;
  }


  public void setStoreWithAnnotations$default$2(OffsetDateTime storeWithAnnotations$default$2) {
    
    
    
    this.storeWithAnnotations$default$2 = storeWithAnnotations$default$2;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Store instance itself
   */
  public Store putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Store store = (Store) o;
    return Objects.equals(this.title, store.title) &&
        Objects.equals(this.activeListingLimit, store.activeListingLimit) &&
        Objects.equals(this.choose, store.choose) &&
        Objects.equals(this.listings, store.listings) &&
        Objects.equals(this.showInactiveListings, store.showInactiveListings) &&
        Objects.equals(this.symbol, store.symbol) &&
        Objects.equals(this.refreshTime, store.refreshTime) &&
        Objects.equals(this.storeWithAnnotations$default$3, store.storeWithAnnotations$default$3) &&
        Objects.equals(this.storeWithAnnotations$default$2, store.storeWithAnnotations$default$2)&&
        Objects.equals(this.additionalProperties, store.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, activeListingLimit, choose, listings, showInactiveListings, symbol, refreshTime, storeWithAnnotations$default$3, storeWithAnnotations$default$2, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Store {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    activeListingLimit: ").append(toIndentedString(activeListingLimit)).append("\n");
    sb.append("    choose: ").append(toIndentedString(choose)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    showInactiveListings: ").append(toIndentedString(showInactiveListings)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    refreshTime: ").append(toIndentedString(refreshTime)).append("\n");
    sb.append("    storeWithAnnotations$default$3: ").append(toIndentedString(storeWithAnnotations$default$3)).append("\n");
    sb.append("    storeWithAnnotations$default$2: ").append(toIndentedString(storeWithAnnotations$default$2)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("activeListingLimit");
    openapiFields.add("choose");
    openapiFields.add("listings");
    openapiFields.add("showInactiveListings");
    openapiFields.add("symbol");
    openapiFields.add("refreshTime");
    openapiFields.add("storeWithAnnotations$default$3");
    openapiFields.add("storeWithAnnotations$default$2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storeWithAnnotations$default$3");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Store
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Store.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Store is not found in the empty JSON string", Store.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Store.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("listings") != null && !jsonObj.get("listings").isJsonNull()) {
        JsonArray jsonArraylistings = jsonObj.getAsJsonArray("listings");
        if (jsonArraylistings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listings` to be an array in the JSON string but got `%s`", jsonObj.get("listings").toString()));
          }

          // validate the optional field `listings` (array)
          for (int i = 0; i < jsonArraylistings.size(); i++) {
            Listing.validateJsonObject(jsonArraylistings.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      // validate the optional field `storeWithAnnotations$default$2`
      if (jsonObj.get("storeWithAnnotations$default$2") != null && !jsonObj.get("storeWithAnnotations$default$2").isJsonNull()) {
        OffsetDateTime.validateJsonObject(jsonObj.getAsJsonObject("storeWithAnnotations$default$2"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Store.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Store' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Store> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Store.class));

       return (TypeAdapter<T>) new TypeAdapter<Store>() {
           @Override
           public void write(JsonWriter out, Store value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Store read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Store instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Store given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Store
  * @throws IOException if the JSON string is invalid with respect to Store
  */
  public static Store fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Store.class);
  }

 /**
  * Convert an instance of Store to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

