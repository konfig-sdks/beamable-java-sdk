/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupSearchRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupSearchRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCORE_MIN = "scoreMin";
  @SerializedName(SERIALIZED_NAME_SCORE_MIN)
  private Integer scoreMin;

  public static final String SERIALIZED_NAME_SORT_FIELD = "sortField";
  @SerializedName(SERIALIZED_NAME_SORT_FIELD)
  private String sortField;

  public static final String SERIALIZED_NAME_USER_SCORE = "userScore";
  @SerializedName(SERIALIZED_NAME_USER_SCORE)
  private Integer userScore;

  public static final String SERIALIZED_NAME_HAS_SLOTS = "hasSlots";
  @SerializedName(SERIALIZED_NAME_HAS_SLOTS)
  private Boolean hasSlots;

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPES = "enrollmentTypes";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPES)
  private String enrollmentTypes;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_SCORE_MAX = "scoreMax";
  @SerializedName(SERIALIZED_NAME_SCORE_MAX)
  private Integer scoreMax;

  public static final String SERIALIZED_NAME_SUB_GROUP = "subGroup";
  @SerializedName(SERIALIZED_NAME_SUB_GROUP)
  private Boolean subGroup;

  public static final String SERIALIZED_NAME_SORT_VALUE = "sortValue";
  @SerializedName(SERIALIZED_NAME_SORT_VALUE)
  private Integer sortValue;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NOT_AVAILABLE("not-available");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public GroupSearchRequest() {
  }

  public GroupSearchRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public GroupSearchRequest scoreMin(Integer scoreMin) {
    
    
    
    
    this.scoreMin = scoreMin;
    return this;
  }

   /**
   * Get scoreMin
   * @return scoreMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getScoreMin() {
    return scoreMin;
  }


  public void setScoreMin(Integer scoreMin) {
    
    
    
    this.scoreMin = scoreMin;
  }


  public GroupSearchRequest sortField(String sortField) {
    
    
    
    
    this.sortField = sortField;
    return this;
  }

   /**
   * Get sortField
   * @return sortField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSortField() {
    return sortField;
  }


  public void setSortField(String sortField) {
    
    
    
    this.sortField = sortField;
  }


  public GroupSearchRequest userScore(Integer userScore) {
    
    
    
    
    this.userScore = userScore;
    return this;
  }

   /**
   * Get userScore
   * @return userScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserScore() {
    return userScore;
  }


  public void setUserScore(Integer userScore) {
    
    
    
    this.userScore = userScore;
  }


  public GroupSearchRequest hasSlots(Boolean hasSlots) {
    
    
    
    
    this.hasSlots = hasSlots;
    return this;
  }

   /**
   * Get hasSlots
   * @return hasSlots
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHasSlots() {
    return hasSlots;
  }


  public void setHasSlots(Boolean hasSlots) {
    
    
    
    this.hasSlots = hasSlots;
  }


  public GroupSearchRequest enrollmentTypes(String enrollmentTypes) {
    
    
    
    
    this.enrollmentTypes = enrollmentTypes;
    return this;
  }

   /**
   * Get enrollmentTypes
   * @return enrollmentTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEnrollmentTypes() {
    return enrollmentTypes;
  }


  public void setEnrollmentTypes(String enrollmentTypes) {
    
    
    
    this.enrollmentTypes = enrollmentTypes;
  }


  public GroupSearchRequest offset(Integer offset) {
    
    
    
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOffset() {
    return offset;
  }


  public void setOffset(Integer offset) {
    
    
    
    this.offset = offset;
  }


  public GroupSearchRequest scoreMax(Integer scoreMax) {
    
    
    
    
    this.scoreMax = scoreMax;
    return this;
  }

   /**
   * Get scoreMax
   * @return scoreMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getScoreMax() {
    return scoreMax;
  }


  public void setScoreMax(Integer scoreMax) {
    
    
    
    this.scoreMax = scoreMax;
  }


  public GroupSearchRequest subGroup(Boolean subGroup) {
    
    
    
    
    this.subGroup = subGroup;
    return this;
  }

   /**
   * Get subGroup
   * @return subGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSubGroup() {
    return subGroup;
  }


  public void setSubGroup(Boolean subGroup) {
    
    
    
    this.subGroup = subGroup;
  }


  public GroupSearchRequest sortValue(Integer sortValue) {
    
    
    
    
    this.sortValue = sortValue;
    return this;
  }

   /**
   * Get sortValue
   * @return sortValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSortValue() {
    return sortValue;
  }


  public void setSortValue(Integer sortValue) {
    
    
    
    this.sortValue = sortValue;
  }


  public GroupSearchRequest type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public GroupSearchRequest limit(Integer limit) {
    
    
    
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    
    
    
    this.limit = limit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupSearchRequest instance itself
   */
  public GroupSearchRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupSearchRequest groupSearchRequest = (GroupSearchRequest) o;
    return Objects.equals(this.name, groupSearchRequest.name) &&
        Objects.equals(this.scoreMin, groupSearchRequest.scoreMin) &&
        Objects.equals(this.sortField, groupSearchRequest.sortField) &&
        Objects.equals(this.userScore, groupSearchRequest.userScore) &&
        Objects.equals(this.hasSlots, groupSearchRequest.hasSlots) &&
        Objects.equals(this.enrollmentTypes, groupSearchRequest.enrollmentTypes) &&
        Objects.equals(this.offset, groupSearchRequest.offset) &&
        Objects.equals(this.scoreMax, groupSearchRequest.scoreMax) &&
        Objects.equals(this.subGroup, groupSearchRequest.subGroup) &&
        Objects.equals(this.sortValue, groupSearchRequest.sortValue) &&
        Objects.equals(this.type, groupSearchRequest.type) &&
        Objects.equals(this.limit, groupSearchRequest.limit)&&
        Objects.equals(this.additionalProperties, groupSearchRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, scoreMin, sortField, userScore, hasSlots, enrollmentTypes, offset, scoreMax, subGroup, sortValue, type, limit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupSearchRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scoreMin: ").append(toIndentedString(scoreMin)).append("\n");
    sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
    sb.append("    userScore: ").append(toIndentedString(userScore)).append("\n");
    sb.append("    hasSlots: ").append(toIndentedString(hasSlots)).append("\n");
    sb.append("    enrollmentTypes: ").append(toIndentedString(enrollmentTypes)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    scoreMax: ").append(toIndentedString(scoreMax)).append("\n");
    sb.append("    subGroup: ").append(toIndentedString(subGroup)).append("\n");
    sb.append("    sortValue: ").append(toIndentedString(sortValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("scoreMin");
    openapiFields.add("sortField");
    openapiFields.add("userScore");
    openapiFields.add("hasSlots");
    openapiFields.add("enrollmentTypes");
    openapiFields.add("offset");
    openapiFields.add("scoreMax");
    openapiFields.add("subGroup");
    openapiFields.add("sortValue");
    openapiFields.add("type");
    openapiFields.add("limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupSearchRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupSearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupSearchRequest is not found in the empty JSON string", GroupSearchRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sortField") != null && !jsonObj.get("sortField").isJsonNull()) && !jsonObj.get("sortField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortField").toString()));
      }
      if ((jsonObj.get("enrollmentTypes") != null && !jsonObj.get("enrollmentTypes").isJsonNull()) && !jsonObj.get("enrollmentTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentTypes").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupSearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupSearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupSearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupSearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupSearchRequest>() {
           @Override
           public void write(JsonWriter out, GroupSearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupSearchRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupSearchRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupSearchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupSearchRequest
  * @throws IOException if the JSON string is invalid with respect to GroupSearchRequest
  */
  public static GroupSearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupSearchRequest.class);
  }

 /**
  * Convert an instance of GroupSearchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

