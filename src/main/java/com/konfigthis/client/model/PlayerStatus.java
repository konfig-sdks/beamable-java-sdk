/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TournamentReward;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlayerStatus
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlayerStatus {
  public static final String SERIALIZED_NAME_LAST_UPDATE_CYCLE = "lastUpdateCycle";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_CYCLE)
  private Integer lastUpdateCycle;

  public static final String SERIALIZED_NAME_TOURNAMENT_ID = "tournamentId";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_ID)
  private String tournamentId;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private Integer stage;

  public static final String SERIALIZED_NAME_UNCLAIMED_REWARDS = "unclaimedRewards";
  @SerializedName(SERIALIZED_NAME_UNCLAIMED_REWARDS)
  private List<TournamentReward> unclaimedRewards = null;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private Integer tier;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_CONTENT_ID = "contentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private String contentId;

  public PlayerStatus() {
  }

  public PlayerStatus lastUpdateCycle(Integer lastUpdateCycle) {
    
    
    
    
    this.lastUpdateCycle = lastUpdateCycle;
    return this;
  }

   /**
   * Get lastUpdateCycle
   * @return lastUpdateCycle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLastUpdateCycle() {
    return lastUpdateCycle;
  }


  public void setLastUpdateCycle(Integer lastUpdateCycle) {
    
    
    
    this.lastUpdateCycle = lastUpdateCycle;
  }


  public PlayerStatus tournamentId(String tournamentId) {
    
    
    
    
    this.tournamentId = tournamentId;
    return this;
  }

   /**
   * Get tournamentId
   * @return tournamentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTournamentId() {
    return tournamentId;
  }


  public void setTournamentId(String tournamentId) {
    
    
    
    this.tournamentId = tournamentId;
  }


  public PlayerStatus stage(Integer stage) {
    
    
    
    
    this.stage = stage;
    return this;
  }

   /**
   * Get stage
   * @return stage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getStage() {
    return stage;
  }


  public void setStage(Integer stage) {
    
    
    
    this.stage = stage;
  }


  public PlayerStatus unclaimedRewards(List<TournamentReward> unclaimedRewards) {
    
    
    
    
    this.unclaimedRewards = unclaimedRewards;
    return this;
  }

  public PlayerStatus addUnclaimedRewardsItem(TournamentReward unclaimedRewardsItem) {
    if (this.unclaimedRewards == null) {
      this.unclaimedRewards = new ArrayList<>();
    }
    this.unclaimedRewards.add(unclaimedRewardsItem);
    return this;
  }

   /**
   * Get unclaimedRewards
   * @return unclaimedRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TournamentReward> getUnclaimedRewards() {
    return unclaimedRewards;
  }


  public void setUnclaimedRewards(List<TournamentReward> unclaimedRewards) {
    
    
    
    this.unclaimedRewards = unclaimedRewards;
  }


  public PlayerStatus tier(Integer tier) {
    
    
    
    
    this.tier = tier;
    return this;
  }

   /**
   * Get tier
   * @return tier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTier() {
    return tier;
  }


  public void setTier(Integer tier) {
    
    
    
    this.tier = tier;
  }


  public PlayerStatus playerId(Integer playerId) {
    
    
    
    
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPlayerId() {
    return playerId;
  }


  public void setPlayerId(Integer playerId) {
    
    
    
    this.playerId = playerId;
  }


  public PlayerStatus contentId(String contentId) {
    
    
    
    
    this.contentId = contentId;
    return this;
  }

   /**
   * Get contentId
   * @return contentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContentId() {
    return contentId;
  }


  public void setContentId(String contentId) {
    
    
    
    this.contentId = contentId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlayerStatus instance itself
   */
  public PlayerStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerStatus playerStatus = (PlayerStatus) o;
    return Objects.equals(this.lastUpdateCycle, playerStatus.lastUpdateCycle) &&
        Objects.equals(this.tournamentId, playerStatus.tournamentId) &&
        Objects.equals(this.stage, playerStatus.stage) &&
        Objects.equals(this.unclaimedRewards, playerStatus.unclaimedRewards) &&
        Objects.equals(this.tier, playerStatus.tier) &&
        Objects.equals(this.playerId, playerStatus.playerId) &&
        Objects.equals(this.contentId, playerStatus.contentId)&&
        Objects.equals(this.additionalProperties, playerStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdateCycle, tournamentId, stage, unclaimedRewards, tier, playerId, contentId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerStatus {\n");
    sb.append("    lastUpdateCycle: ").append(toIndentedString(lastUpdateCycle)).append("\n");
    sb.append("    tournamentId: ").append(toIndentedString(tournamentId)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    unclaimedRewards: ").append(toIndentedString(unclaimedRewards)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastUpdateCycle");
    openapiFields.add("tournamentId");
    openapiFields.add("stage");
    openapiFields.add("unclaimedRewards");
    openapiFields.add("tier");
    openapiFields.add("playerId");
    openapiFields.add("contentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lastUpdateCycle");
    openapiRequiredFields.add("stage");
    openapiRequiredFields.add("tier");
    openapiRequiredFields.add("playerId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayerStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerStatus is not found in the empty JSON string", PlayerStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlayerStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("tournamentId") != null && !jsonObj.get("tournamentId").isJsonNull()) && !jsonObj.get("tournamentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tournamentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tournamentId").toString()));
      }
      if (jsonObj.get("unclaimedRewards") != null && !jsonObj.get("unclaimedRewards").isJsonNull()) {
        JsonArray jsonArrayunclaimedRewards = jsonObj.getAsJsonArray("unclaimedRewards");
        if (jsonArrayunclaimedRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unclaimedRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unclaimedRewards` to be an array in the JSON string but got `%s`", jsonObj.get("unclaimedRewards").toString()));
          }

          // validate the optional field `unclaimedRewards` (array)
          for (int i = 0; i < jsonArrayunclaimedRewards.size(); i++) {
            TournamentReward.validateJsonObject(jsonArrayunclaimedRewards.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("contentId") != null && !jsonObj.get("contentId").isJsonNull()) && !jsonObj.get("contentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerStatus>() {
           @Override
           public void write(JsonWriter out, PlayerStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlayerStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerStatus
  * @throws IOException if the JSON string is invalid with respect to PlayerStatus
  */
  public static PlayerStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerStatus.class);
  }

 /**
  * Convert an instance of PlayerStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

