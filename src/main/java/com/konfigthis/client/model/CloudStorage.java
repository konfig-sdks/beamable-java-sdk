/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CloudStorage
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CloudStorage {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_RETRIEVED = "retrieved";
  @SerializedName(SERIALIZED_NAME_RETRIEVED)
  private Integer retrieved;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data = null;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private Integer added;

  public static final String SERIALIZED_NAME_STYPE = "stype";
  @SerializedName(SERIALIZED_NAME_STYPE)
  private Integer stype;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private Integer updated;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private Integer expiration;

  public static final String SERIALIZED_NAME_GT = "gt";
  @SerializedName(SERIALIZED_NAME_GT)
  private Integer gt;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private Integer sid;

  public CloudStorage() {
  }

  public CloudStorage version(Integer version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    
    
    
    this.version = version;
  }


  public CloudStorage retrieved(Integer retrieved) {
    
    
    
    
    this.retrieved = retrieved;
    return this;
  }

   /**
   * Get retrieved
   * @return retrieved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRetrieved() {
    return retrieved;
  }


  public void setRetrieved(Integer retrieved) {
    
    
    
    this.retrieved = retrieved;
  }


  public CloudStorage uniqueIdentifier(String uniqueIdentifier) {
    
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

   /**
   * Get uniqueIdentifier
   * @return uniqueIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }


  public void setUniqueIdentifier(String uniqueIdentifier) {
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public CloudStorage data(Object data) {
    
    
    
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    
    
    
    this.data = data;
  }


  public CloudStorage ref(String ref) {
    
    
    
    
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    
    
    
    this.ref = ref;
  }


  public CloudStorage added(Integer added) {
    
    
    
    
    this.added = added;
    return this;
  }

   /**
   * Get added
   * @return added
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAdded() {
    return added;
  }


  public void setAdded(Integer added) {
    
    
    
    this.added = added;
  }


  public CloudStorage stype(Integer stype) {
    
    
    
    
    this.stype = stype;
    return this;
  }

   /**
   * Get stype
   * @return stype
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getStype() {
    return stype;
  }


  public void setStype(Integer stype) {
    
    
    
    this.stype = stype;
  }


  public CloudStorage updated(Integer updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUpdated() {
    return updated;
  }


  public void setUpdated(Integer updated) {
    
    
    
    this.updated = updated;
  }


  public CloudStorage expiration(Integer expiration) {
    
    
    
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpiration() {
    return expiration;
  }


  public void setExpiration(Integer expiration) {
    
    
    
    this.expiration = expiration;
  }


  public CloudStorage gt(Integer gt) {
    
    
    
    
    this.gt = gt;
    return this;
  }

   /**
   * Get gt
   * @return gt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGt() {
    return gt;
  }


  public void setGt(Integer gt) {
    
    
    
    this.gt = gt;
  }


  public CloudStorage sid(Integer sid) {
    
    
    
    
    this.sid = sid;
    return this;
  }

   /**
   * Get sid
   * @return sid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSid() {
    return sid;
  }


  public void setSid(Integer sid) {
    
    
    
    this.sid = sid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CloudStorage instance itself
   */
  public CloudStorage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudStorage cloudStorage = (CloudStorage) o;
    return Objects.equals(this.version, cloudStorage.version) &&
        Objects.equals(this.retrieved, cloudStorage.retrieved) &&
        Objects.equals(this.uniqueIdentifier, cloudStorage.uniqueIdentifier) &&
        Objects.equals(this.data, cloudStorage.data) &&
        Objects.equals(this.ref, cloudStorage.ref) &&
        Objects.equals(this.added, cloudStorage.added) &&
        Objects.equals(this.stype, cloudStorage.stype) &&
        Objects.equals(this.updated, cloudStorage.updated) &&
        Objects.equals(this.expiration, cloudStorage.expiration) &&
        Objects.equals(this.gt, cloudStorage.gt) &&
        Objects.equals(this.sid, cloudStorage.sid)&&
        Objects.equals(this.additionalProperties, cloudStorage.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, retrieved, uniqueIdentifier, data, ref, added, stype, updated, expiration, gt, sid, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudStorage {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    retrieved: ").append(toIndentedString(retrieved)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    stype: ").append(toIndentedString(stype)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("retrieved");
    openapiFields.add("uniqueIdentifier");
    openapiFields.add("data");
    openapiFields.add("ref");
    openapiFields.add("added");
    openapiFields.add("stype");
    openapiFields.add("updated");
    openapiFields.add("expiration");
    openapiFields.add("gt");
    openapiFields.add("sid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stype");
    openapiRequiredFields.add("sid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CloudStorage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CloudStorage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudStorage is not found in the empty JSON string", CloudStorage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CloudStorage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudStorage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudStorage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudStorage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudStorage.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudStorage>() {
           @Override
           public void write(JsonWriter out, CloudStorage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudStorage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CloudStorage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CloudStorage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CloudStorage
  * @throws IOException if the JSON string is invalid with respect to CloudStorage
  */
  public static CloudStorage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudStorage.class);
  }

 /**
  * Convert an instance of CloudStorage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

