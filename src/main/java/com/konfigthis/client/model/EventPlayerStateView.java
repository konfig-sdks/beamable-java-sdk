/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EventPlayerPhaseView;
import com.konfigthis.client.model.EventPlayerReward;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EventPlayerStateView
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventPlayerStateView {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNNING = "running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Boolean running;

  public static final String SERIALIZED_NAME_ALL_PHASES = "allPhases";
  @SerializedName(SERIALIZED_NAME_ALL_PHASES)
  private List<EventPlayerPhaseView> allPhases = null;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_CURRENT_PHASE = "currentPhase";
  @SerializedName(SERIALIZED_NAME_CURRENT_PHASE)
  private EventPlayerPhaseView currentPhase;

  public static final String SERIALIZED_NAME_SECONDS_REMAINING = "secondsRemaining";
  @SerializedName(SERIALIZED_NAME_SECONDS_REMAINING)
  private Integer secondsRemaining;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LEADERBOARD_ID = "leaderboardId";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD_ID)
  private String leaderboardId;

  public static final String SERIALIZED_NAME_RANK_REWARDS = "rankRewards";
  @SerializedName(SERIALIZED_NAME_RANK_REWARDS)
  private List<EventPlayerReward> rankRewards = null;

  public static final String SERIALIZED_NAME_SCORE_REWARDS = "scoreRewards";
  @SerializedName(SERIALIZED_NAME_SCORE_REWARDS)
  private List<EventPlayerReward> scoreRewards = null;

  public EventPlayerStateView() {
  }

  public EventPlayerStateView name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EventPlayerStateView running(Boolean running) {
    
    
    
    
    this.running = running;
    return this;
  }

   /**
   * Get running
   * @return running
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getRunning() {
    return running;
  }


  public void setRunning(Boolean running) {
    
    
    
    this.running = running;
  }


  public EventPlayerStateView allPhases(List<EventPlayerPhaseView> allPhases) {
    
    
    
    
    this.allPhases = allPhases;
    return this;
  }

  public EventPlayerStateView addAllPhasesItem(EventPlayerPhaseView allPhasesItem) {
    if (this.allPhases == null) {
      this.allPhases = new ArrayList<>();
    }
    this.allPhases.add(allPhasesItem);
    return this;
  }

   /**
   * Get allPhases
   * @return allPhases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventPlayerPhaseView> getAllPhases() {
    return allPhases;
  }


  public void setAllPhases(List<EventPlayerPhaseView> allPhases) {
    
    
    
    this.allPhases = allPhases;
  }


  public EventPlayerStateView rank(Integer rank) {
    
    
    
    
    this.rank = rank;
    return this;
  }

   /**
   * Get rank
   * @return rank
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    
    
    
    this.rank = rank;
  }


  public EventPlayerStateView score(Double score) {
    
    
    
    
    this.score = score;
    return this;
  }

  public EventPlayerStateView score(Integer score) {
    
    
    
    
    this.score = score.doubleValue();
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    
    
    
    this.score = score;
  }


  public EventPlayerStateView currentPhase(EventPlayerPhaseView currentPhase) {
    
    
    
    
    this.currentPhase = currentPhase;
    return this;
  }

   /**
   * Get currentPhase
   * @return currentPhase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventPlayerPhaseView getCurrentPhase() {
    return currentPhase;
  }


  public void setCurrentPhase(EventPlayerPhaseView currentPhase) {
    
    
    
    this.currentPhase = currentPhase;
  }


  public EventPlayerStateView secondsRemaining(Integer secondsRemaining) {
    
    
    
    
    this.secondsRemaining = secondsRemaining;
    return this;
  }

   /**
   * Get secondsRemaining
   * @return secondsRemaining
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSecondsRemaining() {
    return secondsRemaining;
  }


  public void setSecondsRemaining(Integer secondsRemaining) {
    
    
    
    this.secondsRemaining = secondsRemaining;
  }


  public EventPlayerStateView id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EventPlayerStateView leaderboardId(String leaderboardId) {
    
    
    
    
    this.leaderboardId = leaderboardId;
    return this;
  }

   /**
   * Get leaderboardId
   * @return leaderboardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLeaderboardId() {
    return leaderboardId;
  }


  public void setLeaderboardId(String leaderboardId) {
    
    
    
    this.leaderboardId = leaderboardId;
  }


  public EventPlayerStateView rankRewards(List<EventPlayerReward> rankRewards) {
    
    
    
    
    this.rankRewards = rankRewards;
    return this;
  }

  public EventPlayerStateView addRankRewardsItem(EventPlayerReward rankRewardsItem) {
    if (this.rankRewards == null) {
      this.rankRewards = new ArrayList<>();
    }
    this.rankRewards.add(rankRewardsItem);
    return this;
  }

   /**
   * Get rankRewards
   * @return rankRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventPlayerReward> getRankRewards() {
    return rankRewards;
  }


  public void setRankRewards(List<EventPlayerReward> rankRewards) {
    
    
    
    this.rankRewards = rankRewards;
  }


  public EventPlayerStateView scoreRewards(List<EventPlayerReward> scoreRewards) {
    
    
    
    
    this.scoreRewards = scoreRewards;
    return this;
  }

  public EventPlayerStateView addScoreRewardsItem(EventPlayerReward scoreRewardsItem) {
    if (this.scoreRewards == null) {
      this.scoreRewards = new ArrayList<>();
    }
    this.scoreRewards.add(scoreRewardsItem);
    return this;
  }

   /**
   * Get scoreRewards
   * @return scoreRewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EventPlayerReward> getScoreRewards() {
    return scoreRewards;
  }


  public void setScoreRewards(List<EventPlayerReward> scoreRewards) {
    
    
    
    this.scoreRewards = scoreRewards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventPlayerStateView instance itself
   */
  public EventPlayerStateView putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventPlayerStateView eventPlayerStateView = (EventPlayerStateView) o;
    return Objects.equals(this.name, eventPlayerStateView.name) &&
        Objects.equals(this.running, eventPlayerStateView.running) &&
        Objects.equals(this.allPhases, eventPlayerStateView.allPhases) &&
        Objects.equals(this.rank, eventPlayerStateView.rank) &&
        Objects.equals(this.score, eventPlayerStateView.score) &&
        Objects.equals(this.currentPhase, eventPlayerStateView.currentPhase) &&
        Objects.equals(this.secondsRemaining, eventPlayerStateView.secondsRemaining) &&
        Objects.equals(this.id, eventPlayerStateView.id) &&
        Objects.equals(this.leaderboardId, eventPlayerStateView.leaderboardId) &&
        Objects.equals(this.rankRewards, eventPlayerStateView.rankRewards) &&
        Objects.equals(this.scoreRewards, eventPlayerStateView.scoreRewards)&&
        Objects.equals(this.additionalProperties, eventPlayerStateView.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, running, allPhases, rank, score, currentPhase, secondsRemaining, id, leaderboardId, rankRewards, scoreRewards, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventPlayerStateView {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    allPhases: ").append(toIndentedString(allPhases)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    currentPhase: ").append(toIndentedString(currentPhase)).append("\n");
    sb.append("    secondsRemaining: ").append(toIndentedString(secondsRemaining)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    leaderboardId: ").append(toIndentedString(leaderboardId)).append("\n");
    sb.append("    rankRewards: ").append(toIndentedString(rankRewards)).append("\n");
    sb.append("    scoreRewards: ").append(toIndentedString(scoreRewards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("running");
    openapiFields.add("allPhases");
    openapiFields.add("rank");
    openapiFields.add("score");
    openapiFields.add("currentPhase");
    openapiFields.add("secondsRemaining");
    openapiFields.add("id");
    openapiFields.add("leaderboardId");
    openapiFields.add("rankRewards");
    openapiFields.add("scoreRewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("running");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("secondsRemaining");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventPlayerStateView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventPlayerStateView.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventPlayerStateView is not found in the empty JSON string", EventPlayerStateView.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventPlayerStateView.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("allPhases") != null && !jsonObj.get("allPhases").isJsonNull()) {
        JsonArray jsonArrayallPhases = jsonObj.getAsJsonArray("allPhases");
        if (jsonArrayallPhases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allPhases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allPhases` to be an array in the JSON string but got `%s`", jsonObj.get("allPhases").toString()));
          }

          // validate the optional field `allPhases` (array)
          for (int i = 0; i < jsonArrayallPhases.size(); i++) {
            EventPlayerPhaseView.validateJsonObject(jsonArrayallPhases.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `currentPhase`
      if (jsonObj.get("currentPhase") != null && !jsonObj.get("currentPhase").isJsonNull()) {
        EventPlayerPhaseView.validateJsonObject(jsonObj.getAsJsonObject("currentPhase"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("leaderboardId") != null && !jsonObj.get("leaderboardId").isJsonNull()) && !jsonObj.get("leaderboardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaderboardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaderboardId").toString()));
      }
      if (jsonObj.get("rankRewards") != null && !jsonObj.get("rankRewards").isJsonNull()) {
        JsonArray jsonArrayrankRewards = jsonObj.getAsJsonArray("rankRewards");
        if (jsonArrayrankRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewards` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewards").toString()));
          }

          // validate the optional field `rankRewards` (array)
          for (int i = 0; i < jsonArrayrankRewards.size(); i++) {
            EventPlayerReward.validateJsonObject(jsonArrayrankRewards.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("scoreRewards") != null && !jsonObj.get("scoreRewards").isJsonNull()) {
        JsonArray jsonArrayscoreRewards = jsonObj.getAsJsonArray("scoreRewards");
        if (jsonArrayscoreRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scoreRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scoreRewards` to be an array in the JSON string but got `%s`", jsonObj.get("scoreRewards").toString()));
          }

          // validate the optional field `scoreRewards` (array)
          for (int i = 0; i < jsonArrayscoreRewards.size(); i++) {
            EventPlayerReward.validateJsonObject(jsonArrayscoreRewards.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventPlayerStateView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventPlayerStateView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventPlayerStateView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventPlayerStateView.class));

       return (TypeAdapter<T>) new TypeAdapter<EventPlayerStateView>() {
           @Override
           public void write(JsonWriter out, EventPlayerStateView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventPlayerStateView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventPlayerStateView instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventPlayerStateView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventPlayerStateView
  * @throws IOException if the JSON string is invalid with respect to EventPlayerStateView
  */
  public static EventPlayerStateView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventPlayerStateView.class);
  }

 /**
  * Convert an instance of EventPlayerStateView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

