/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.GroupScoreBinding;
import com.konfigthis.client.model.GroupUserMember;
import com.konfigthis.client.model.InFlightMessage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupUser
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupUser {
  public static final String SERIALIZED_NAME_IN_FLIGHT = "inFlight";
  @SerializedName(SERIALIZED_NAME_IN_FLIGHT)
  private List<InFlightMessage> inFlight = null;

  public static final String SERIALIZED_NAME_GAMER_TAG = "gamerTag";
  @SerializedName(SERIALIZED_NAME_GAMER_TAG)
  private Integer gamerTag;

  public static final String SERIALIZED_NAME_ALL_GROUPS = "allGroups";
  @SerializedName(SERIALIZED_NAME_ALL_GROUPS)
  private List<GroupUserMember> allGroups = null;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private Integer updated;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private Map<String, Object> member = null;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private List<GroupScoreBinding> scores = null;

  public GroupUser() {
  }

  public GroupUser inFlight(List<InFlightMessage> inFlight) {
    
    
    
    
    this.inFlight = inFlight;
    return this;
  }

  public GroupUser addInFlightItem(InFlightMessage inFlightItem) {
    if (this.inFlight == null) {
      this.inFlight = new ArrayList<>();
    }
    this.inFlight.add(inFlightItem);
    return this;
  }

   /**
   * Get inFlight
   * @return inFlight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InFlightMessage> getInFlight() {
    return inFlight;
  }


  public void setInFlight(List<InFlightMessage> inFlight) {
    
    
    
    this.inFlight = inFlight;
  }


  public GroupUser gamerTag(Integer gamerTag) {
    
    
    
    
    this.gamerTag = gamerTag;
    return this;
  }

   /**
   * Get gamerTag
   * @return gamerTag
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getGamerTag() {
    return gamerTag;
  }


  public void setGamerTag(Integer gamerTag) {
    
    
    
    this.gamerTag = gamerTag;
  }


  public GroupUser allGroups(List<GroupUserMember> allGroups) {
    
    
    
    
    this.allGroups = allGroups;
    return this;
  }

  public GroupUser addAllGroupsItem(GroupUserMember allGroupsItem) {
    if (this.allGroups == null) {
      this.allGroups = new ArrayList<>();
    }
    this.allGroups.add(allGroupsItem);
    return this;
  }

   /**
   * Get allGroups
   * @return allGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<GroupUserMember> getAllGroups() {
    return allGroups;
  }


  public void setAllGroups(List<GroupUserMember> allGroups) {
    
    
    
    this.allGroups = allGroups;
  }


  public GroupUser updated(Integer updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUpdated() {
    return updated;
  }


  public void setUpdated(Integer updated) {
    
    
    
    this.updated = updated;
  }


  public GroupUser member(Map<String, Object> member) {
    
    
    
    
    this.member = member;
    return this;
  }

  public GroupUser putMemberItem(String key, Object memberItem) {
    if (this.member == null) {
      this.member = new HashMap<>();
    }
    this.member.put(key, memberItem);
    return this;
  }

   /**
   * Get member
   * @return member
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getMember() {
    return member;
  }


  public void setMember(Map<String, Object> member) {
    
    
    
    this.member = member;
  }


  public GroupUser scores(List<GroupScoreBinding> scores) {
    
    
    
    
    this.scores = scores;
    return this;
  }

  public GroupUser addScoresItem(GroupScoreBinding scoresItem) {
    if (this.scores == null) {
      this.scores = new ArrayList<>();
    }
    this.scores.add(scoresItem);
    return this;
  }

   /**
   * Get scores
   * @return scores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<GroupScoreBinding> getScores() {
    return scores;
  }


  public void setScores(List<GroupScoreBinding> scores) {
    
    
    
    this.scores = scores;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupUser instance itself
   */
  public GroupUser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupUser groupUser = (GroupUser) o;
    return Objects.equals(this.inFlight, groupUser.inFlight) &&
        Objects.equals(this.gamerTag, groupUser.gamerTag) &&
        Objects.equals(this.allGroups, groupUser.allGroups) &&
        Objects.equals(this.updated, groupUser.updated) &&
        Objects.equals(this.member, groupUser.member) &&
        Objects.equals(this.scores, groupUser.scores)&&
        Objects.equals(this.additionalProperties, groupUser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inFlight, gamerTag, allGroups, updated, member, scores, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupUser {\n");
    sb.append("    inFlight: ").append(toIndentedString(inFlight)).append("\n");
    sb.append("    gamerTag: ").append(toIndentedString(gamerTag)).append("\n");
    sb.append("    allGroups: ").append(toIndentedString(allGroups)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inFlight");
    openapiFields.add("gamerTag");
    openapiFields.add("allGroups");
    openapiFields.add("updated");
    openapiFields.add("member");
    openapiFields.add("scores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gamerTag");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupUser is not found in the empty JSON string", GroupUser.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("inFlight") != null && !jsonObj.get("inFlight").isJsonNull()) {
        JsonArray jsonArrayinFlight = jsonObj.getAsJsonArray("inFlight");
        if (jsonArrayinFlight != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inFlight").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inFlight` to be an array in the JSON string but got `%s`", jsonObj.get("inFlight").toString()));
          }

          // validate the optional field `inFlight` (array)
          for (int i = 0; i < jsonArrayinFlight.size(); i++) {
            InFlightMessage.validateJsonObject(jsonArrayinFlight.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("allGroups") != null && !jsonObj.get("allGroups").isJsonNull()) {
        JsonArray jsonArrayallGroups = jsonObj.getAsJsonArray("allGroups");
        if (jsonArrayallGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allGroups` to be an array in the JSON string but got `%s`", jsonObj.get("allGroups").toString()));
          }

          // validate the optional field `allGroups` (array)
          for (int i = 0; i < jsonArrayallGroups.size(); i++) {
            GroupUserMember.validateJsonObject(jsonArrayallGroups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull()) {
        JsonArray jsonArrayscores = jsonObj.getAsJsonArray("scores");
        if (jsonArrayscores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scores` to be an array in the JSON string but got `%s`", jsonObj.get("scores").toString()));
          }

          // validate the optional field `scores` (array)
          for (int i = 0; i < jsonArrayscores.size(); i++) {
            GroupScoreBinding.validateJsonObject(jsonArrayscores.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupUser.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupUser>() {
           @Override
           public void write(JsonWriter out, GroupUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupUser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupUser
  * @throws IOException if the JSON string is invalid with respect to GroupUser
  */
  public static GroupUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupUser.class);
  }

 /**
  * Convert an instance of GroupUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

