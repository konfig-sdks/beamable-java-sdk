/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RedisShardRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreatePlanRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreatePlanRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MESSAGE_BUS_ANALYTICS = "messageBusAnalytics";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BUS_ANALYTICS)
  private List<String> messageBusAnalytics = null;

  public static final String SERIALIZED_NAME_MEMCACHED_HOSTS = "memcachedHosts";
  @SerializedName(SERIALIZED_NAME_MEMCACHED_HOSTS)
  private String memcachedHosts;

  public static final String SERIALIZED_NAME_MONGO_S_S_L = "mongoSSL";
  @SerializedName(SERIALIZED_NAME_MONGO_S_S_L)
  private Boolean mongoSSL;

  public static final String SERIALIZED_NAME_PLATFORM_J_B_D_C = "platformJBDC";
  @SerializedName(SERIALIZED_NAME_PLATFORM_J_B_D_C)
  private String platformJBDC;

  public static final String SERIALIZED_NAME_SHARDED = "sharded";
  @SerializedName(SERIALIZED_NAME_SHARDED)
  private Boolean sharded;

  public static final String SERIALIZED_NAME_MONGO_HOSTS = "mongoHosts";
  @SerializedName(SERIALIZED_NAME_MONGO_HOSTS)
  private String mongoHosts;

  public static final String SERIALIZED_NAME_MESSAGE_BUS_COMMON = "messageBusCommon";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BUS_COMMON)
  private List<String> messageBusCommon = null;

  public static final String SERIALIZED_NAME_REDIS_SHARDS = "redisShards";
  @SerializedName(SERIALIZED_NAME_REDIS_SHARDS)
  private List<RedisShardRequest> redisShards = new ArrayList<>();

  public CreatePlanRequest() {
  }

  public CreatePlanRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreatePlanRequest messageBusAnalytics(List<String> messageBusAnalytics) {
    
    
    
    
    this.messageBusAnalytics = messageBusAnalytics;
    return this;
  }

  public CreatePlanRequest addMessageBusAnalyticsItem(String messageBusAnalyticsItem) {
    if (this.messageBusAnalytics == null) {
      this.messageBusAnalytics = new ArrayList<>();
    }
    this.messageBusAnalytics.add(messageBusAnalyticsItem);
    return this;
  }

   /**
   * Get messageBusAnalytics
   * @return messageBusAnalytics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMessageBusAnalytics() {
    return messageBusAnalytics;
  }


  public void setMessageBusAnalytics(List<String> messageBusAnalytics) {
    
    
    
    this.messageBusAnalytics = messageBusAnalytics;
  }


  public CreatePlanRequest memcachedHosts(String memcachedHosts) {
    
    
    
    
    this.memcachedHosts = memcachedHosts;
    return this;
  }

   /**
   * Get memcachedHosts
   * @return memcachedHosts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMemcachedHosts() {
    return memcachedHosts;
  }


  public void setMemcachedHosts(String memcachedHosts) {
    
    
    
    this.memcachedHosts = memcachedHosts;
  }


  public CreatePlanRequest mongoSSL(Boolean mongoSSL) {
    
    
    
    
    this.mongoSSL = mongoSSL;
    return this;
  }

   /**
   * Get mongoSSL
   * @return mongoSSL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getMongoSSL() {
    return mongoSSL;
  }


  public void setMongoSSL(Boolean mongoSSL) {
    
    
    
    this.mongoSSL = mongoSSL;
  }


  public CreatePlanRequest platformJBDC(String platformJBDC) {
    
    
    
    
    this.platformJBDC = platformJBDC;
    return this;
  }

   /**
   * Get platformJBDC
   * @return platformJBDC
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPlatformJBDC() {
    return platformJBDC;
  }


  public void setPlatformJBDC(String platformJBDC) {
    
    
    
    this.platformJBDC = platformJBDC;
  }


  public CreatePlanRequest sharded(Boolean sharded) {
    
    
    
    
    this.sharded = sharded;
    return this;
  }

   /**
   * Get sharded
   * @return sharded
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSharded() {
    return sharded;
  }


  public void setSharded(Boolean sharded) {
    
    
    
    this.sharded = sharded;
  }


  public CreatePlanRequest mongoHosts(String mongoHosts) {
    
    
    
    
    this.mongoHosts = mongoHosts;
    return this;
  }

   /**
   * Get mongoHosts
   * @return mongoHosts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMongoHosts() {
    return mongoHosts;
  }


  public void setMongoHosts(String mongoHosts) {
    
    
    
    this.mongoHosts = mongoHosts;
  }


  public CreatePlanRequest messageBusCommon(List<String> messageBusCommon) {
    
    
    
    
    this.messageBusCommon = messageBusCommon;
    return this;
  }

  public CreatePlanRequest addMessageBusCommonItem(String messageBusCommonItem) {
    if (this.messageBusCommon == null) {
      this.messageBusCommon = new ArrayList<>();
    }
    this.messageBusCommon.add(messageBusCommonItem);
    return this;
  }

   /**
   * Get messageBusCommon
   * @return messageBusCommon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMessageBusCommon() {
    return messageBusCommon;
  }


  public void setMessageBusCommon(List<String> messageBusCommon) {
    
    
    
    this.messageBusCommon = messageBusCommon;
  }


  public CreatePlanRequest redisShards(List<RedisShardRequest> redisShards) {
    
    
    
    
    this.redisShards = redisShards;
    return this;
  }

  public CreatePlanRequest addRedisShardsItem(RedisShardRequest redisShardsItem) {
    this.redisShards.add(redisShardsItem);
    return this;
  }

   /**
   * Get redisShards
   * @return redisShards
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<RedisShardRequest> getRedisShards() {
    return redisShards;
  }


  public void setRedisShards(List<RedisShardRequest> redisShards) {
    
    
    
    this.redisShards = redisShards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreatePlanRequest instance itself
   */
  public CreatePlanRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePlanRequest createPlanRequest = (CreatePlanRequest) o;
    return Objects.equals(this.name, createPlanRequest.name) &&
        Objects.equals(this.messageBusAnalytics, createPlanRequest.messageBusAnalytics) &&
        Objects.equals(this.memcachedHosts, createPlanRequest.memcachedHosts) &&
        Objects.equals(this.mongoSSL, createPlanRequest.mongoSSL) &&
        Objects.equals(this.platformJBDC, createPlanRequest.platformJBDC) &&
        Objects.equals(this.sharded, createPlanRequest.sharded) &&
        Objects.equals(this.mongoHosts, createPlanRequest.mongoHosts) &&
        Objects.equals(this.messageBusCommon, createPlanRequest.messageBusCommon) &&
        Objects.equals(this.redisShards, createPlanRequest.redisShards)&&
        Objects.equals(this.additionalProperties, createPlanRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, messageBusAnalytics, memcachedHosts, mongoSSL, platformJBDC, sharded, mongoHosts, messageBusCommon, redisShards, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePlanRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    messageBusAnalytics: ").append(toIndentedString(messageBusAnalytics)).append("\n");
    sb.append("    memcachedHosts: ").append(toIndentedString(memcachedHosts)).append("\n");
    sb.append("    mongoSSL: ").append(toIndentedString(mongoSSL)).append("\n");
    sb.append("    platformJBDC: ").append(toIndentedString(platformJBDC)).append("\n");
    sb.append("    sharded: ").append(toIndentedString(sharded)).append("\n");
    sb.append("    mongoHosts: ").append(toIndentedString(mongoHosts)).append("\n");
    sb.append("    messageBusCommon: ").append(toIndentedString(messageBusCommon)).append("\n");
    sb.append("    redisShards: ").append(toIndentedString(redisShards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("messageBusAnalytics");
    openapiFields.add("memcachedHosts");
    openapiFields.add("mongoSSL");
    openapiFields.add("platformJBDC");
    openapiFields.add("sharded");
    openapiFields.add("mongoHosts");
    openapiFields.add("messageBusCommon");
    openapiFields.add("redisShards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("memcachedHosts");
    openapiRequiredFields.add("mongoSSL");
    openapiRequiredFields.add("platformJBDC");
    openapiRequiredFields.add("sharded");
    openapiRequiredFields.add("mongoHosts");
    openapiRequiredFields.add("redisShards");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreatePlanRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreatePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePlanRequest is not found in the empty JSON string", CreatePlanRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePlanRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageBusAnalytics") != null && !jsonObj.get("messageBusAnalytics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBusAnalytics` to be an array in the JSON string but got `%s`", jsonObj.get("messageBusAnalytics").toString()));
      }
      if (!jsonObj.get("memcachedHosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memcachedHosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memcachedHosts").toString()));
      }
      if (!jsonObj.get("platformJBDC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformJBDC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformJBDC").toString()));
      }
      if (!jsonObj.get("mongoHosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongoHosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongoHosts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageBusCommon") != null && !jsonObj.get("messageBusCommon").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBusCommon` to be an array in the JSON string but got `%s`", jsonObj.get("messageBusCommon").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("redisShards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redisShards` to be an array in the JSON string but got `%s`", jsonObj.get("redisShards").toString()));
      }

      JsonArray jsonArrayredisShards = jsonObj.getAsJsonArray("redisShards");
      // validate the required field `redisShards` (array)
      for (int i = 0; i < jsonArrayredisShards.size(); i++) {
        RedisShardRequest.validateJsonObject(jsonArrayredisShards.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePlanRequest>() {
           @Override
           public void write(JsonWriter out, CreatePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePlanRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreatePlanRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreatePlanRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreatePlanRequest
  * @throws IOException if the JSON string is invalid with respect to CreatePlanRequest
  */
  public static CreatePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePlanRequest.class);
  }

 /**
  * Convert an instance of CreatePlanRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

