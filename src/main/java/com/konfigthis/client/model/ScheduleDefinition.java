/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScheduleDefinition
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScheduleDefinition {
  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private List<String> dayOfWeek = null;

  public static final String SERIALIZED_NAME_MINUTE = "minute";
  @SerializedName(SERIALIZED_NAME_MINUTE)
  private List<String> minute = null;

  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "dayOfMonth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private List<String> dayOfMonth = null;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<String> year = null;

  public static final String SERIALIZED_NAME_HOUR = "hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private List<String> hour = null;

  public static final String SERIALIZED_NAME_SECOND = "second";
  @SerializedName(SERIALIZED_NAME_SECOND)
  private List<String> second = null;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private List<String> month = null;

  public ScheduleDefinition() {
  }

  public ScheduleDefinition dayOfWeek(List<String> dayOfWeek) {
    
    
    
    
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  public ScheduleDefinition addDayOfWeekItem(String dayOfWeekItem) {
    if (this.dayOfWeek == null) {
      this.dayOfWeek = new ArrayList<>();
    }
    this.dayOfWeek.add(dayOfWeekItem);
    return this;
  }

   /**
   * Get dayOfWeek
   * @return dayOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDayOfWeek() {
    return dayOfWeek;
  }


  public void setDayOfWeek(List<String> dayOfWeek) {
    
    
    
    this.dayOfWeek = dayOfWeek;
  }


  public ScheduleDefinition minute(List<String> minute) {
    
    
    
    
    this.minute = minute;
    return this;
  }

  public ScheduleDefinition addMinuteItem(String minuteItem) {
    if (this.minute == null) {
      this.minute = new ArrayList<>();
    }
    this.minute.add(minuteItem);
    return this;
  }

   /**
   * Get minute
   * @return minute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMinute() {
    return minute;
  }


  public void setMinute(List<String> minute) {
    
    
    
    this.minute = minute;
  }


  public ScheduleDefinition dayOfMonth(List<String> dayOfMonth) {
    
    
    
    
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  public ScheduleDefinition addDayOfMonthItem(String dayOfMonthItem) {
    if (this.dayOfMonth == null) {
      this.dayOfMonth = new ArrayList<>();
    }
    this.dayOfMonth.add(dayOfMonthItem);
    return this;
  }

   /**
   * Get dayOfMonth
   * @return dayOfMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDayOfMonth() {
    return dayOfMonth;
  }


  public void setDayOfMonth(List<String> dayOfMonth) {
    
    
    
    this.dayOfMonth = dayOfMonth;
  }


  public ScheduleDefinition year(List<String> year) {
    
    
    
    
    this.year = year;
    return this;
  }

  public ScheduleDefinition addYearItem(String yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getYear() {
    return year;
  }


  public void setYear(List<String> year) {
    
    
    
    this.year = year;
  }


  public ScheduleDefinition hour(List<String> hour) {
    
    
    
    
    this.hour = hour;
    return this;
  }

  public ScheduleDefinition addHourItem(String hourItem) {
    if (this.hour == null) {
      this.hour = new ArrayList<>();
    }
    this.hour.add(hourItem);
    return this;
  }

   /**
   * Get hour
   * @return hour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getHour() {
    return hour;
  }


  public void setHour(List<String> hour) {
    
    
    
    this.hour = hour;
  }


  public ScheduleDefinition second(List<String> second) {
    
    
    
    
    this.second = second;
    return this;
  }

  public ScheduleDefinition addSecondItem(String secondItem) {
    if (this.second == null) {
      this.second = new ArrayList<>();
    }
    this.second.add(secondItem);
    return this;
  }

   /**
   * Get second
   * @return second
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSecond() {
    return second;
  }


  public void setSecond(List<String> second) {
    
    
    
    this.second = second;
  }


  public ScheduleDefinition month(List<String> month) {
    
    
    
    
    this.month = month;
    return this;
  }

  public ScheduleDefinition addMonthItem(String monthItem) {
    if (this.month == null) {
      this.month = new ArrayList<>();
    }
    this.month.add(monthItem);
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMonth() {
    return month;
  }


  public void setMonth(List<String> month) {
    
    
    
    this.month = month;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScheduleDefinition instance itself
   */
  public ScheduleDefinition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleDefinition scheduleDefinition = (ScheduleDefinition) o;
    return Objects.equals(this.dayOfWeek, scheduleDefinition.dayOfWeek) &&
        Objects.equals(this.minute, scheduleDefinition.minute) &&
        Objects.equals(this.dayOfMonth, scheduleDefinition.dayOfMonth) &&
        Objects.equals(this.year, scheduleDefinition.year) &&
        Objects.equals(this.hour, scheduleDefinition.hour) &&
        Objects.equals(this.second, scheduleDefinition.second) &&
        Objects.equals(this.month, scheduleDefinition.month)&&
        Objects.equals(this.additionalProperties, scheduleDefinition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfWeek, minute, dayOfMonth, year, hour, second, month, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleDefinition {\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    minute: ").append(toIndentedString(minute)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    second: ").append(toIndentedString(second)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfWeek");
    openapiFields.add("minute");
    openapiFields.add("dayOfMonth");
    openapiFields.add("year");
    openapiFields.add("hour");
    openapiFields.add("second");
    openapiFields.add("month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScheduleDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScheduleDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleDefinition is not found in the empty JSON string", ScheduleDefinition.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("minute") != null && !jsonObj.get("minute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minute` to be an array in the JSON string but got `%s`", jsonObj.get("minute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dayOfMonth") != null && !jsonObj.get("dayOfMonth").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfMonth` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfMonth").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hour") != null && !jsonObj.get("hour").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hour` to be an array in the JSON string but got `%s`", jsonObj.get("hour").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("second") != null && !jsonObj.get("second").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `second` to be an array in the JSON string but got `%s`", jsonObj.get("second").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("month") != null && !jsonObj.get("month").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be an array in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleDefinition>() {
           @Override
           public void write(JsonWriter out, ScheduleDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScheduleDefinition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScheduleDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScheduleDefinition
  * @throws IOException if the JSON string is invalid with respect to ScheduleDefinition
  */
  public static ScheduleDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleDefinition.class);
  }

 /**
  * Convert an instance of ScheduleDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

