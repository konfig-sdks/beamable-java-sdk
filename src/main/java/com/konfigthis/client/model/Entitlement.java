/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EntitlementClaimWindow;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Entitlement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Entitlement {
  public static final String SERIALIZED_NAME_CWIN_SECS_TILL_OPEN = "cwinSecsTillOpen";
  @SerializedName(SERIALIZED_NAME_CWIN_SECS_TILL_OPEN)
  private Integer cwinSecsTillOpen;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<String> history = null;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_GAMER_TAG = "gamerTag";
  @SerializedName(SERIALIZED_NAME_GAMER_TAG)
  private Integer gamerTag;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_CWIN = "cwin";
  @SerializedName(SERIALIZED_NAME_CWIN)
  private EntitlementClaimWindow cwin;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_SPECIALIZED = "specialized";
  @SerializedName(SERIALIZED_NAME_SPECIALIZED)
  private String specialized;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private Integer updated;

  public static final String SERIALIZED_NAME_CWIN_SECS_TILL_CLOSE = "cwinSecsTillClose";
  @SerializedName(SERIALIZED_NAME_CWIN_SECS_TILL_CLOSE)
  private Integer cwinSecsTillClose;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public Entitlement() {
  }

  public Entitlement cwinSecsTillOpen(Integer cwinSecsTillOpen) {
    
    
    
    
    this.cwinSecsTillOpen = cwinSecsTillOpen;
    return this;
  }

   /**
   * Get cwinSecsTillOpen
   * @return cwinSecsTillOpen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCwinSecsTillOpen() {
    return cwinSecsTillOpen;
  }


  public void setCwinSecsTillOpen(Integer cwinSecsTillOpen) {
    
    
    
    this.cwinSecsTillOpen = cwinSecsTillOpen;
  }


  public Entitlement history(List<String> history) {
    
    
    
    
    this.history = history;
    return this;
  }

  public Entitlement addHistoryItem(String historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getHistory() {
    return history;
  }


  public void setHistory(List<String> history) {
    
    
    
    this.history = history;
  }


  public Entitlement state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public Entitlement gamerTag(Integer gamerTag) {
    
    
    
    
    this.gamerTag = gamerTag;
    return this;
  }

   /**
   * Get gamerTag
   * @return gamerTag
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getGamerTag() {
    return gamerTag;
  }


  public void setGamerTag(Integer gamerTag) {
    
    
    
    this.gamerTag = gamerTag;
  }


  public Entitlement uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public Entitlement cwin(EntitlementClaimWindow cwin) {
    
    
    
    
    this.cwin = cwin;
    return this;
  }

   /**
   * Get cwin
   * @return cwin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EntitlementClaimWindow getCwin() {
    return cwin;
  }


  public void setCwin(EntitlementClaimWindow cwin) {
    
    
    
    this.cwin = cwin;
  }


  public Entitlement symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public Entitlement specialized(String specialized) {
    
    
    
    
    this.specialized = specialized;
    return this;
  }

   /**
   * Get specialized
   * @return specialized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpecialized() {
    return specialized;
  }


  public void setSpecialized(String specialized) {
    
    
    
    this.specialized = specialized;
  }


  public Entitlement updated(Integer updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUpdated() {
    return updated;
  }


  public void setUpdated(Integer updated) {
    
    
    
    this.updated = updated;
  }


  public Entitlement cwinSecsTillClose(Integer cwinSecsTillClose) {
    
    
    
    
    this.cwinSecsTillClose = cwinSecsTillClose;
    return this;
  }

   /**
   * Get cwinSecsTillClose
   * @return cwinSecsTillClose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCwinSecsTillClose() {
    return cwinSecsTillClose;
  }


  public void setCwinSecsTillClose(Integer cwinSecsTillClose) {
    
    
    
    this.cwinSecsTillClose = cwinSecsTillClose;
  }


  public Entitlement ttl(Integer ttl) {
    
    
    
    
    this.ttl = ttl;
    return this;
  }

   /**
   * Get ttl
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTtl() {
    return ttl;
  }


  public void setTtl(Integer ttl) {
    
    
    
    this.ttl = ttl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Entitlement instance itself
   */
  public Entitlement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entitlement entitlement = (Entitlement) o;
    return Objects.equals(this.cwinSecsTillOpen, entitlement.cwinSecsTillOpen) &&
        Objects.equals(this.history, entitlement.history) &&
        Objects.equals(this.state, entitlement.state) &&
        Objects.equals(this.gamerTag, entitlement.gamerTag) &&
        Objects.equals(this.uuid, entitlement.uuid) &&
        Objects.equals(this.cwin, entitlement.cwin) &&
        Objects.equals(this.symbol, entitlement.symbol) &&
        Objects.equals(this.specialized, entitlement.specialized) &&
        Objects.equals(this.updated, entitlement.updated) &&
        Objects.equals(this.cwinSecsTillClose, entitlement.cwinSecsTillClose) &&
        Objects.equals(this.ttl, entitlement.ttl)&&
        Objects.equals(this.additionalProperties, entitlement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cwinSecsTillOpen, history, state, gamerTag, uuid, cwin, symbol, specialized, updated, cwinSecsTillClose, ttl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entitlement {\n");
    sb.append("    cwinSecsTillOpen: ").append(toIndentedString(cwinSecsTillOpen)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    gamerTag: ").append(toIndentedString(gamerTag)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    cwin: ").append(toIndentedString(cwin)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    specialized: ").append(toIndentedString(specialized)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    cwinSecsTillClose: ").append(toIndentedString(cwinSecsTillClose)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cwinSecsTillOpen");
    openapiFields.add("history");
    openapiFields.add("state");
    openapiFields.add("gamerTag");
    openapiFields.add("uuid");
    openapiFields.add("cwin");
    openapiFields.add("symbol");
    openapiFields.add("specialized");
    openapiFields.add("updated");
    openapiFields.add("cwinSecsTillClose");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gamerTag");
    openapiRequiredFields.add("updated");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Entitlement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Entitlement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entitlement is not found in the empty JSON string", Entitlement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Entitlement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `cwin`
      if (jsonObj.get("cwin") != null && !jsonObj.get("cwin").isJsonNull()) {
        EntitlementClaimWindow.validateJsonObject(jsonObj.getAsJsonObject("cwin"));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("specialized") != null && !jsonObj.get("specialized").isJsonNull()) && !jsonObj.get("specialized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialized").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entitlement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entitlement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entitlement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entitlement.class));

       return (TypeAdapter<T>) new TypeAdapter<Entitlement>() {
           @Override
           public void write(JsonWriter out, Entitlement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Entitlement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Entitlement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Entitlement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Entitlement
  * @throws IOException if the JSON string is invalid with respect to Entitlement
  */
  public static Entitlement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entitlement.class);
  }

 /**
  * Convert an instance of Entitlement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

