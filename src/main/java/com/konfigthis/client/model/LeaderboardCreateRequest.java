/*
 * history basic
 * var Beamable = BeamContext.Default; - That one line of code is a gateway to everything you need to build custom server logic via microservices along with a world of LiveOps tools and live services to build games that players love.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ClientPermission;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaderboardCreateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaderboardCreateRequest {
  public static final String SERIALIZED_NAME_FREEZE_TIME = "freezeTime";
  @SerializedName(SERIALIZED_NAME_FREEZE_TIME)
  private Integer freezeTime;

  public static final String SERIALIZED_NAME_DERIVATIVES = "derivatives";
  @SerializedName(SERIALIZED_NAME_DERIVATIVES)
  private List<String> derivatives = null;

  public static final String SERIALIZED_NAME_SCORE_NAME = "scoreName";
  @SerializedName(SERIALIZED_NAME_SCORE_NAME)
  private String scoreName;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private ClientPermission permissions;

  public static final String SERIALIZED_NAME_MAX_ENTRIES = "maxEntries";
  @SerializedName(SERIALIZED_NAME_MAX_ENTRIES)
  private Integer maxEntries;

  public static final String SERIALIZED_NAME_PARTITIONED = "partitioned";
  @SerializedName(SERIALIZED_NAME_PARTITIONED)
  private Boolean partitioned;

  public static final String SERIALIZED_NAME_SHARDED = "sharded";
  @SerializedName(SERIALIZED_NAME_SHARDED)
  private Boolean sharded;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public LeaderboardCreateRequest() {
  }

  public LeaderboardCreateRequest freezeTime(Integer freezeTime) {
    
    
    
    
    this.freezeTime = freezeTime;
    return this;
  }

   /**
   * Get freezeTime
   * @return freezeTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFreezeTime() {
    return freezeTime;
  }


  public void setFreezeTime(Integer freezeTime) {
    
    
    
    this.freezeTime = freezeTime;
  }


  public LeaderboardCreateRequest derivatives(List<String> derivatives) {
    
    
    
    
    this.derivatives = derivatives;
    return this;
  }

  public LeaderboardCreateRequest addDerivativesItem(String derivativesItem) {
    if (this.derivatives == null) {
      this.derivatives = new ArrayList<>();
    }
    this.derivatives.add(derivativesItem);
    return this;
  }

   /**
   * Get derivatives
   * @return derivatives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDerivatives() {
    return derivatives;
  }


  public void setDerivatives(List<String> derivatives) {
    
    
    
    this.derivatives = derivatives;
  }


  public LeaderboardCreateRequest scoreName(String scoreName) {
    
    
    
    
    this.scoreName = scoreName;
    return this;
  }

   /**
   * Get scoreName
   * @return scoreName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScoreName() {
    return scoreName;
  }


  public void setScoreName(String scoreName) {
    
    
    
    this.scoreName = scoreName;
  }


  public LeaderboardCreateRequest permissions(ClientPermission permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClientPermission getPermissions() {
    return permissions;
  }


  public void setPermissions(ClientPermission permissions) {
    
    
    
    this.permissions = permissions;
  }


  public LeaderboardCreateRequest maxEntries(Integer maxEntries) {
    
    
    
    
    this.maxEntries = maxEntries;
    return this;
  }

   /**
   * Get maxEntries
   * @return maxEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxEntries() {
    return maxEntries;
  }


  public void setMaxEntries(Integer maxEntries) {
    
    
    
    this.maxEntries = maxEntries;
  }


  public LeaderboardCreateRequest partitioned(Boolean partitioned) {
    
    
    
    
    this.partitioned = partitioned;
    return this;
  }

   /**
   * Get partitioned
   * @return partitioned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPartitioned() {
    return partitioned;
  }


  public void setPartitioned(Boolean partitioned) {
    
    
    
    this.partitioned = partitioned;
  }


  public LeaderboardCreateRequest sharded(Boolean sharded) {
    
    
    
    
    this.sharded = sharded;
    return this;
  }

   /**
   * Get sharded
   * @return sharded
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSharded() {
    return sharded;
  }


  public void setSharded(Boolean sharded) {
    
    
    
    this.sharded = sharded;
  }


  public LeaderboardCreateRequest ttl(Integer ttl) {
    
    
    
    
    this.ttl = ttl;
    return this;
  }

   /**
   * Get ttl
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTtl() {
    return ttl;
  }


  public void setTtl(Integer ttl) {
    
    
    
    this.ttl = ttl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaderboardCreateRequest instance itself
   */
  public LeaderboardCreateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaderboardCreateRequest leaderboardCreateRequest = (LeaderboardCreateRequest) o;
    return Objects.equals(this.freezeTime, leaderboardCreateRequest.freezeTime) &&
        Objects.equals(this.derivatives, leaderboardCreateRequest.derivatives) &&
        Objects.equals(this.scoreName, leaderboardCreateRequest.scoreName) &&
        Objects.equals(this.permissions, leaderboardCreateRequest.permissions) &&
        Objects.equals(this.maxEntries, leaderboardCreateRequest.maxEntries) &&
        Objects.equals(this.partitioned, leaderboardCreateRequest.partitioned) &&
        Objects.equals(this.sharded, leaderboardCreateRequest.sharded) &&
        Objects.equals(this.ttl, leaderboardCreateRequest.ttl)&&
        Objects.equals(this.additionalProperties, leaderboardCreateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freezeTime, derivatives, scoreName, permissions, maxEntries, partitioned, sharded, ttl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaderboardCreateRequest {\n");
    sb.append("    freezeTime: ").append(toIndentedString(freezeTime)).append("\n");
    sb.append("    derivatives: ").append(toIndentedString(derivatives)).append("\n");
    sb.append("    scoreName: ").append(toIndentedString(scoreName)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    maxEntries: ").append(toIndentedString(maxEntries)).append("\n");
    sb.append("    partitioned: ").append(toIndentedString(partitioned)).append("\n");
    sb.append("    sharded: ").append(toIndentedString(sharded)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freezeTime");
    openapiFields.add("derivatives");
    openapiFields.add("scoreName");
    openapiFields.add("permissions");
    openapiFields.add("maxEntries");
    openapiFields.add("partitioned");
    openapiFields.add("sharded");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sharded");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaderboardCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaderboardCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaderboardCreateRequest is not found in the empty JSON string", LeaderboardCreateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeaderboardCreateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("derivatives") != null && !jsonObj.get("derivatives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivatives` to be an array in the JSON string but got `%s`", jsonObj.get("derivatives").toString()));
      }
      if ((jsonObj.get("scoreName") != null && !jsonObj.get("scoreName").isJsonNull()) && !jsonObj.get("scoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreName").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        ClientPermission.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaderboardCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaderboardCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaderboardCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaderboardCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaderboardCreateRequest>() {
           @Override
           public void write(JsonWriter out, LeaderboardCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaderboardCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaderboardCreateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaderboardCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaderboardCreateRequest
  * @throws IOException if the JSON string is invalid with respect to LeaderboardCreateRequest
  */
  public static LeaderboardCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaderboardCreateRequest.class);
  }

 /**
  * Convert an instance of LeaderboardCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

